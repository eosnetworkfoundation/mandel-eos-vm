// Generated by spec_test_generator.  DO NOT MODIFY THIS FILE.

#include <algorithm>
#include <vector>
#include <iostream>
#include <iterator>
#include <cmath>
#include <cstdlib>
#include <catch2/catch.hpp>
#include <utils.hpp>
#include <wasm_config.hpp>
#include <eosio/vm/backend.hpp>

using namespace eosio;
using namespace eosio::vm;
extern wasm_allocator wa;

BACKEND_TEST_CASE( "Testing wasm <simd_load_splat_0_wasm>", "[simd_load_splat_0_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load_splat.0.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "v128.load8_splat", UINT32_C(0))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "v128.load8_splat", UINT32_C(1))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "v128.load8_splat", UINT32_C(2))->to_v128() == make_v128_i8(2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u));
   CHECK(bkend.call_with_return("env", "v128.load8_splat", UINT32_C(3))->to_v128() == make_v128_i8(3u,3u,3u,3u,3u,3u,3u,3u,3u,3u,3u,3u,3u,3u,3u,3u));
   CHECK(bkend.call_with_return("env", "v128.load8_splat", UINT32_C(65535))->to_v128() == make_v128_i8(31u,31u,31u,31u,31u,31u,31u,31u,31u,31u,31u,31u,31u,31u,31u,31u));
   CHECK(bkend.call_with_return("env", "v128.load16_splat", UINT32_C(4))->to_v128() == make_v128_i16(1284u,1284u,1284u,1284u,1284u,1284u,1284u,1284u));
   CHECK(bkend.call_with_return("env", "v128.load16_splat", UINT32_C(5))->to_v128() == make_v128_i16(1541u,1541u,1541u,1541u,1541u,1541u,1541u,1541u));
   CHECK(bkend.call_with_return("env", "v128.load16_splat", UINT32_C(6))->to_v128() == make_v128_i16(1798u,1798u,1798u,1798u,1798u,1798u,1798u,1798u));
   CHECK(bkend.call_with_return("env", "v128.load16_splat", UINT32_C(7))->to_v128() == make_v128_i16(2055u,2055u,2055u,2055u,2055u,2055u,2055u,2055u));
   CHECK(bkend.call_with_return("env", "v128.load16_splat", UINT32_C(65534))->to_v128() == make_v128_i16(7966u,7966u,7966u,7966u,7966u,7966u,7966u,7966u));
   CHECK(bkend.call_with_return("env", "v128.load32_splat", UINT32_C(8))->to_v128() == make_v128_i32(185207048u,185207048u,185207048u,185207048u));
   CHECK(bkend.call_with_return("env", "v128.load32_splat", UINT32_C(9))->to_v128() == make_v128_i32(202050057u,202050057u,202050057u,202050057u));
   CHECK(bkend.call_with_return("env", "v128.load32_splat", UINT32_C(10))->to_v128() == make_v128_i32(218893066u,218893066u,218893066u,218893066u));
   CHECK(bkend.call_with_return("env", "v128.load32_splat", UINT32_C(11))->to_v128() == make_v128_i32(235736075u,235736075u,235736075u,235736075u));
   CHECK(bkend.call_with_return("env", "v128.load32_splat", UINT32_C(65532))->to_v128() == make_v128_i32(522067228u,522067228u,522067228u,522067228u));
   CHECK(bkend.call_with_return("env", "v128.load64_splat", UINT32_C(12))->to_v128() == make_v128_i64(252579084u,252579084u));
   CHECK(bkend.call_with_return("env", "v128.load64_splat", UINT32_C(13))->to_v128() == make_v128_i64(986637u,986637u));
   CHECK(bkend.call_with_return("env", "v128.load64_splat", UINT32_C(14))->to_v128() == make_v128_i64(3854u,3854u));
   CHECK(bkend.call_with_return("env", "v128.load64_splat", UINT32_C(15))->to_v128() == make_v128_i64(15u,15u));
   CHECK(bkend.call_with_return("env", "v128.load64_splat", UINT32_C(65528))->to_v128() == make_v128_i64(2242261671028070680u,2242261671028070680u));
   CHECK(bkend.call_with_return("env", "v8x16.offset0", UINT32_C(0))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "v8x16.align1", UINT32_C(0))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "v8x16.offset1_align1", UINT32_C(0))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "v8x16.offset2_align1", UINT32_C(0))->to_v128() == make_v128_i8(2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u));
   CHECK(bkend.call_with_return("env", "v8x16.offset15_align1", UINT32_C(0))->to_v128() == make_v128_i8(15u,15u,15u,15u,15u,15u,15u,15u,15u,15u,15u,15u,15u,15u,15u,15u));
   CHECK(bkend.call_with_return("env", "v8x16.offset0", UINT32_C(1))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "v8x16.align1", UINT32_C(1))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "v8x16.offset1_align1", UINT32_C(1))->to_v128() == make_v128_i8(2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u));
   CHECK(bkend.call_with_return("env", "v8x16.offset2_align1", UINT32_C(1))->to_v128() == make_v128_i8(3u,3u,3u,3u,3u,3u,3u,3u,3u,3u,3u,3u,3u,3u,3u,3u));
   CHECK(bkend.call_with_return("env", "v8x16.offset15_align1", UINT32_C(1))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "v8x16.offset0", UINT32_C(65535))->to_v128() == make_v128_i8(31u,31u,31u,31u,31u,31u,31u,31u,31u,31u,31u,31u,31u,31u,31u,31u));
   CHECK(bkend.call_with_return("env", "v8x16.align1", UINT32_C(65535))->to_v128() == make_v128_i8(31u,31u,31u,31u,31u,31u,31u,31u,31u,31u,31u,31u,31u,31u,31u,31u));
   CHECK(bkend.call_with_return("env", "v16x8.offset0", UINT32_C(0))->to_v128() == make_v128_i16(256u,256u,256u,256u,256u,256u,256u,256u));
   CHECK(bkend.call_with_return("env", "v16x8.align1", UINT32_C(0))->to_v128() == make_v128_i16(256u,256u,256u,256u,256u,256u,256u,256u));
   CHECK(bkend.call_with_return("env", "v16x8.offset1_align1", UINT32_C(0))->to_v128() == make_v128_i16(513u,513u,513u,513u,513u,513u,513u,513u));
   CHECK(bkend.call_with_return("env", "v16x8.offset2_align1", UINT32_C(0))->to_v128() == make_v128_i16(770u,770u,770u,770u,770u,770u,770u,770u));
   CHECK(bkend.call_with_return("env", "v16x8.offset15_align2", UINT32_C(0))->to_v128() == make_v128_i16(15u,15u,15u,15u,15u,15u,15u,15u));
   CHECK(bkend.call_with_return("env", "v16x8.offset0", UINT32_C(1))->to_v128() == make_v128_i16(513u,513u,513u,513u,513u,513u,513u,513u));
   CHECK(bkend.call_with_return("env", "v16x8.align1", UINT32_C(1))->to_v128() == make_v128_i16(513u,513u,513u,513u,513u,513u,513u,513u));
   CHECK(bkend.call_with_return("env", "v16x8.offset1_align1", UINT32_C(1))->to_v128() == make_v128_i16(770u,770u,770u,770u,770u,770u,770u,770u));
   CHECK(bkend.call_with_return("env", "v16x8.offset2_align1", UINT32_C(1))->to_v128() == make_v128_i16(1027u,1027u,1027u,1027u,1027u,1027u,1027u,1027u));
   CHECK(bkend.call_with_return("env", "v16x8.offset15_align2", UINT32_C(1))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "v16x8.offset0", UINT32_C(65534))->to_v128() == make_v128_i16(7966u,7966u,7966u,7966u,7966u,7966u,7966u,7966u));
   CHECK(bkend.call_with_return("env", "v16x8.align1", UINT32_C(65534))->to_v128() == make_v128_i16(7966u,7966u,7966u,7966u,7966u,7966u,7966u,7966u));
   CHECK(bkend.call_with_return("env", "v32x4.offset0", UINT32_C(0))->to_v128() == make_v128_i32(50462976u,50462976u,50462976u,50462976u));
   CHECK(bkend.call_with_return("env", "v32x4.align1", UINT32_C(0))->to_v128() == make_v128_i32(50462976u,50462976u,50462976u,50462976u));
   CHECK(bkend.call_with_return("env", "v32x4.offset1_align1", UINT32_C(0))->to_v128() == make_v128_i32(67305985u,67305985u,67305985u,67305985u));
   CHECK(bkend.call_with_return("env", "v32x4.offset2_align2", UINT32_C(0))->to_v128() == make_v128_i32(84148994u,84148994u,84148994u,84148994u));
   CHECK(bkend.call_with_return("env", "v32x4.offset15_align4", UINT32_C(0))->to_v128() == make_v128_i32(15u,15u,15u,15u));
   CHECK(bkend.call_with_return("env", "v32x4.offset0", UINT32_C(1))->to_v128() == make_v128_i32(67305985u,67305985u,67305985u,67305985u));
   CHECK(bkend.call_with_return("env", "v32x4.align1", UINT32_C(1))->to_v128() == make_v128_i32(67305985u,67305985u,67305985u,67305985u));
   CHECK(bkend.call_with_return("env", "v32x4.offset1_align1", UINT32_C(1))->to_v128() == make_v128_i32(84148994u,84148994u,84148994u,84148994u));
   CHECK(bkend.call_with_return("env", "v32x4.offset2_align2", UINT32_C(1))->to_v128() == make_v128_i32(100992003u,100992003u,100992003u,100992003u));
   CHECK(bkend.call_with_return("env", "v32x4.offset15_align4", UINT32_C(1))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "v32x4.offset0", UINT32_C(65532))->to_v128() == make_v128_i32(522067228u,522067228u,522067228u,522067228u));
   CHECK(bkend.call_with_return("env", "v32x4.align1", UINT32_C(65532))->to_v128() == make_v128_i32(522067228u,522067228u,522067228u,522067228u));
   CHECK(bkend.call_with_return("env", "v64x2.offset0", UINT32_C(0))->to_v128() == make_v128_i64(506097522914230528u,506097522914230528u));
   CHECK(bkend.call_with_return("env", "v64x2.align1", UINT32_C(0))->to_v128() == make_v128_i64(506097522914230528u,506097522914230528u));
   CHECK(bkend.call_with_return("env", "v64x2.offset1_align2", UINT32_C(0))->to_v128() == make_v128_i64(578437695752307201u,578437695752307201u));
   CHECK(bkend.call_with_return("env", "v64x2.offset2_align4", UINT32_C(0))->to_v128() == make_v128_i64(650777868590383874u,650777868590383874u));
   CHECK(bkend.call_with_return("env", "v64x2.offset15_align8", UINT32_C(0))->to_v128() == make_v128_i64(15u,15u));
   CHECK(bkend.call_with_return("env", "v64x2.offset0", UINT32_C(1))->to_v128() == make_v128_i64(578437695752307201u,578437695752307201u));
   CHECK(bkend.call_with_return("env", "v64x2.align1", UINT32_C(1))->to_v128() == make_v128_i64(578437695752307201u,578437695752307201u));
   CHECK(bkend.call_with_return("env", "v64x2.offset1_align2", UINT32_C(1))->to_v128() == make_v128_i64(650777868590383874u,650777868590383874u));
   CHECK(bkend.call_with_return("env", "v64x2.offset2_align4", UINT32_C(1))->to_v128() == make_v128_i64(723118041428460547u,723118041428460547u));
   CHECK(bkend.call_with_return("env", "v64x2.offset15_align8", UINT32_C(1))->to_v128() == make_v128_i64(0u,0u));
   CHECK(bkend.call_with_return("env", "v64x2.offset0", UINT32_C(65528))->to_v128() == make_v128_i64(2242261671028070680u,2242261671028070680u));
   CHECK(bkend.call_with_return("env", "v64x2.align1", UINT32_C(65528))->to_v128() == make_v128_i64(2242261671028070680u,2242261671028070680u));
   CHECK_THROWS_AS(bkend("env", "v128.load8_splat", UINT32_C(4294967295)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v128.load16_splat", UINT32_C(4294967295)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v128.load32_splat", UINT32_C(4294967295)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v128.load64_splat", UINT32_C(4294967295)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v128.load8_splat", UINT32_C(65536)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v128.load16_splat", UINT32_C(65535)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v128.load32_splat", UINT32_C(65533)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v128.load64_splat", UINT32_C(65529)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v8x16.offset1_align1", UINT32_C(65535)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v8x16.offset2_align1", UINT32_C(65535)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v8x16.offset15_align1", UINT32_C(65535)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v16x8.offset1_align1", UINT32_C(65534)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v16x8.offset2_align1", UINT32_C(65534)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v16x8.offset15_align2", UINT32_C(65534)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v32x4.offset1_align1", UINT32_C(65532)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v32x4.offset2_align2", UINT32_C(65532)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v32x4.offset15_align4", UINT32_C(65532)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v64x2.offset1_align2", UINT32_C(65528)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v64x2.offset2_align4", UINT32_C(65528)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v64x2.offset15_align8", UINT32_C(65528)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v8x16.offset1_align1", UINT32_C(4294967295)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v16x8.offset1_align1", UINT32_C(4294967295)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v32x4.offset1_align1", UINT32_C(4294967295)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v64x2.offset1_align2", UINT32_C(4294967295)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v8x16.offset65536", UINT32_C(0)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v16x8.offset65535", UINT32_C(0)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v32x4.offset65533", UINT32_C(0)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v64x2.offset65529", UINT32_C(0)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v8x16.offset65536", UINT32_C(1)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v16x8.offset65535", UINT32_C(1)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v32x4.offset65533", UINT32_C(1)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v64x2.offset65529", UINT32_C(1)), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_splat_1_wasm>", "[simd_load_splat_1_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load_splat.1.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "v128.load8_splat-in-block")->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "v128.load16_splat-in-block")->to_v128() == make_v128_i16(513u,513u,513u,513u,513u,513u,513u,513u));
   CHECK(bkend.call_with_return("env", "v128.load32_splat-in-block")->to_v128() == make_v128_i32(84148994u,84148994u,84148994u,84148994u));
   CHECK(bkend.call_with_return("env", "v128.load64_splat-in-block")->to_v128() == make_v128_i64(2569u,2569u));
   CHECK(bkend.call_with_return("env", "v128.load8_splat-as-br-value")->to_v128() == make_v128_i8(3u,3u,3u,3u,3u,3u,3u,3u,3u,3u,3u,3u,3u,3u,3u,3u));
   CHECK(bkend.call_with_return("env", "v128.load16_splat-as-br-value")->to_v128() == make_v128_i16(1284u,1284u,1284u,1284u,1284u,1284u,1284u,1284u));
   CHECK(bkend.call_with_return("env", "v128.load32_splat-as-br-value")->to_v128() == make_v128_i32(134678021u,134678021u,134678021u,134678021u));
   CHECK(bkend.call_with_return("env", "v128.load64_splat-as-br-value")->to_v128() == make_v128_i64(10u,10u));
   CHECK(bkend.call_with_return("env", "v128.load8_splat-extract_lane_s-operand")->to_ui32() == UINT32_C(6));
   CHECK(bkend.call_with_return("env", "v128.load16_splat-extract_lane_s-operand")->to_ui32() == UINT32_C(7));
   CHECK(bkend.call_with_return("env", "v128.load32_splat-extract_lane_s-operand")->to_ui32() == UINT32_C(8));
   CHECK(bkend.call_with_return("env", "v128.load64_splat-extract_lane_s-operand")->to_ui32() == UINT32_C(0));
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_splat_10_wasm>", "[simd_load_splat_10_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load_splat.10.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_splat_11_wasm>", "[simd_load_splat_11_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load_splat.11.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_splat_12_wasm>", "[simd_load_splat_12_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load_splat.12.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_splat_13_wasm>", "[simd_load_splat_13_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load_splat.13.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_splat_2_wasm>", "[simd_load_splat_2_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load_splat.2.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_splat_3_wasm>", "[simd_load_splat_3_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load_splat.3.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_splat_4_wasm>", "[simd_load_splat_4_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load_splat.4.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_splat_5_wasm>", "[simd_load_splat_5_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load_splat.5.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

