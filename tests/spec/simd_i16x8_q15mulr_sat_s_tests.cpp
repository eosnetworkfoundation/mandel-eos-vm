// Generated by spec_test_generator.  DO NOT MODIFY THIS FILE.

#include <algorithm>
#include <vector>
#include <iostream>
#include <iterator>
#include <cmath>
#include <cstdlib>
#include <catch2/catch.hpp>
#include <utils.hpp>
#include <wasm_config.hpp>
#include <eosio/vm/backend.hpp>

using namespace eosio;
using namespace eosio::vm;
extern wasm_allocator wa;

BACKEND_TEST_CASE( "Testing wasm <simd_i16x8_q15mulr_sat_s_0_wasm>", "[simd_i16x8_q15mulr_sat_s_0_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i16x8_q15mulr_sat_s.0.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "i16x8.q15mulr_sat_s", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u), make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8.q15mulr_sat_s", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u), make_v128_i16(1u,1u,1u,1u,1u,1u,1u,1u))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8.q15mulr_sat_s", make_v128_i16(1u,1u,1u,1u,1u,1u,1u,1u), make_v128_i16(1u,1u,1u,1u,1u,1u,1u,1u))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8.q15mulr_sat_s", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u), make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8.q15mulr_sat_s", make_v128_i16(1u,1u,1u,1u,1u,1u,1u,1u), make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8.q15mulr_sat_s", make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u), make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8.q15mulr_sat_s", make_v128_i16(16383u,16383u,16383u,16383u,16383u,16383u,16383u,16383u), make_v128_i16(16384u,16384u,16384u,16384u,16384u,16384u,16384u,16384u))->to_v128() == make_v128_i16(8192u,8192u,8192u,8192u,8192u,8192u,8192u,8192u));
   CHECK(bkend.call_with_return("env", "i16x8.q15mulr_sat_s", make_v128_i16(16384u,16384u,16384u,16384u,16384u,16384u,16384u,16384u), make_v128_i16(16384u,16384u,16384u,16384u,16384u,16384u,16384u,16384u))->to_v128() == make_v128_i16(8192u,8192u,8192u,8192u,8192u,8192u,8192u,8192u));
   CHECK(bkend.call_with_return("env", "i16x8.q15mulr_sat_s", make_v128_i16(49153u,49153u,49153u,49153u,49153u,49153u,49153u,49153u), make_v128_i16(49152u,49152u,49152u,49152u,49152u,49152u,49152u,49152u))->to_v128() == make_v128_i16(8192u,8192u,8192u,8192u,8192u,8192u,8192u,8192u));
   CHECK(bkend.call_with_return("env", "i16x8.q15mulr_sat_s", make_v128_i16(49152u,49152u,49152u,49152u,49152u,49152u,49152u,49152u), make_v128_i16(49152u,49152u,49152u,49152u,49152u,49152u,49152u,49152u))->to_v128() == make_v128_i16(8192u,8192u,8192u,8192u,8192u,8192u,8192u,8192u));
   CHECK(bkend.call_with_return("env", "i16x8.q15mulr_sat_s", make_v128_i16(49151u,49151u,49151u,49151u,49151u,49151u,49151u,49151u), make_v128_i16(49152u,49152u,49152u,49152u,49152u,49152u,49152u,49152u))->to_v128() == make_v128_i16(8193u,8193u,8193u,8193u,8193u,8193u,8193u,8193u));
   CHECK(bkend.call_with_return("env", "i16x8.q15mulr_sat_s", make_v128_i16(32765u,32765u,32765u,32765u,32765u,32765u,32765u,32765u), make_v128_i16(1u,1u,1u,1u,1u,1u,1u,1u))->to_v128() == make_v128_i16(1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i16x8.q15mulr_sat_s", make_v128_i16(32766u,32766u,32766u,32766u,32766u,32766u,32766u,32766u), make_v128_i16(1u,1u,1u,1u,1u,1u,1u,1u))->to_v128() == make_v128_i16(1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i16x8.q15mulr_sat_s", make_v128_i16(32768u,32768u,32768u,32768u,32768u,32768u,32768u,32768u), make_v128_i16(1u,1u,1u,1u,1u,1u,1u,1u))->to_v128() == make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u));
   CHECK(bkend.call_with_return("env", "i16x8.q15mulr_sat_s", make_v128_i16(32770u,32770u,32770u,32770u,32770u,32770u,32770u,32770u), make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u))->to_v128() == make_v128_i16(1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i16x8.q15mulr_sat_s", make_v128_i16(32769u,32769u,32769u,32769u,32769u,32769u,32769u,32769u), make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u))->to_v128() == make_v128_i16(1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i16x8.q15mulr_sat_s", make_v128_i16(32768u,32768u,32768u,32768u,32768u,32768u,32768u,32768u), make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u))->to_v128() == make_v128_i16(1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i16x8.q15mulr_sat_s", make_v128_i16(32767u,32767u,32767u,32767u,32767u,32767u,32767u,32767u), make_v128_i16(32767u,32767u,32767u,32767u,32767u,32767u,32767u,32767u))->to_v128() == make_v128_i16(32766u,32766u,32766u,32766u,32766u,32766u,32766u,32766u));
   CHECK(bkend.call_with_return("env", "i16x8.q15mulr_sat_s", make_v128_i16(32768u,32768u,32768u,32768u,32768u,32768u,32768u,32768u), make_v128_i16(32768u,32768u,32768u,32768u,32768u,32768u,32768u,32768u))->to_v128() == make_v128_i16(32767u,32767u,32767u,32767u,32767u,32767u,32767u,32767u));
   CHECK(bkend.call_with_return("env", "i16x8.q15mulr_sat_s", make_v128_i16(32768u,32768u,32768u,32768u,32768u,32768u,32768u,32768u), make_v128_i16(32769u,32769u,32769u,32769u,32769u,32769u,32769u,32769u))->to_v128() == make_v128_i16(32767u,32767u,32767u,32767u,32767u,32767u,32767u,32767u));
   CHECK(bkend.call_with_return("env", "i16x8.q15mulr_sat_s", make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u), make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8.q15mulr_sat_s", make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u), make_v128_i16(1u,1u,1u,1u,1u,1u,1u,1u))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8.q15mulr_sat_s", make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u), make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8.q15mulr_sat_s", make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u), make_v128_i16(32767u,32767u,32767u,32767u,32767u,32767u,32767u,32767u))->to_v128() == make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u));
   CHECK(bkend.call_with_return("env", "i16x8.q15mulr_sat_s", make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u), make_v128_i16(32768u,32768u,32768u,32768u,32768u,32768u,32768u,32768u))->to_v128() == make_v128_i16(1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i16x8.q15mulr_sat_s", make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u), make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_i16x8_q15mulr_sat_s_1_wasm>", "[simd_i16x8_q15mulr_sat_s_1_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i16x8_q15mulr_sat_s.1.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i16x8_q15mulr_sat_s_2_wasm>", "[simd_i16x8_q15mulr_sat_s_2_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i16x8_q15mulr_sat_s.2.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i16x8_q15mulr_sat_s_3_wasm>", "[simd_i16x8_q15mulr_sat_s_3_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i16x8_q15mulr_sat_s.3.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

