// Generated by spec_test_generator.  DO NOT MODIFY THIS FILE.

#include <algorithm>
#include <vector>
#include <iostream>
#include <iterator>
#include <cmath>
#include <cstdlib>
#include <catch2/catch.hpp>
#include <utils.hpp>
#include <wasm_config.hpp>
#include <eosio/vm/backend.hpp>

using namespace eosio;
using namespace eosio::vm;
extern wasm_allocator wa;

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_arith_0_wasm>", "[simd_i32x4_arith_0_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_arith.0.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(0,0,0,0), make_v128_i32(0,0,0,0))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(0,0,0,0), make_v128_i32(1,1,1,1))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(1,1,1,1), make_v128_i32(1,1,1,1))->to_v128() == make_v128_i32(2u,2u,2u,2u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(0,0,0,0), make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(1,1,1,1), make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(4294967295,4294967295,4294967295,4294967295), make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i32(4294967294u,4294967294u,4294967294u,4294967294u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(1073741823,1073741823,1073741823,1073741823), make_v128_i32(1073741824,1073741824,1073741824,1073741824))->to_v128() == make_v128_i32(2147483647u,2147483647u,2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(1073741824,1073741824,1073741824,1073741824), make_v128_i32(1073741824,1073741824,1073741824,1073741824))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(3221225473,3221225473,3221225473,3221225473), make_v128_i32(3221225472,3221225472,3221225472,3221225472))->to_v128() == make_v128_i32(2147483649u,2147483649u,2147483649u,2147483649u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(3221225472,3221225472,3221225472,3221225472), make_v128_i32(3221225472,3221225472,3221225472,3221225472))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(3221225471,3221225471,3221225471,3221225471), make_v128_i32(3221225472,3221225472,3221225472,3221225472))->to_v128() == make_v128_i32(2147483647u,2147483647u,2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(2147483645,2147483645,2147483645,2147483645), make_v128_i32(1,1,1,1))->to_v128() == make_v128_i32(2147483646u,2147483646u,2147483646u,2147483646u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(2147483646,2147483646,2147483646,2147483646), make_v128_i32(1,1,1,1))->to_v128() == make_v128_i32(2147483647u,2147483647u,2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(2147483648,2147483648,2147483648,2147483648), make_v128_i32(1,1,1,1))->to_v128() == make_v128_i32(2147483649u,2147483649u,2147483649u,2147483649u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(2147483650,2147483650,2147483650,2147483650), make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i32(2147483649u,2147483649u,2147483649u,2147483649u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(2147483649,2147483649,2147483649,2147483649), make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(2147483648,2147483648,2147483648,2147483648), make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i32(2147483647u,2147483647u,2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(2147483647,2147483647,2147483647,2147483647), make_v128_i32(2147483647,2147483647,2147483647,2147483647))->to_v128() == make_v128_i32(4294967294u,4294967294u,4294967294u,4294967294u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(2147483648,2147483648,2147483648,2147483648), make_v128_i32(2147483648,2147483648,2147483648,2147483648))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(2147483648,2147483648,2147483648,2147483648), make_v128_i32(2147483649,2147483649,2147483649,2147483649))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(4294967295,4294967295,4294967295,4294967295), make_v128_i32(0,0,0,0))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(4294967295,4294967295,4294967295,4294967295), make_v128_i32(1,1,1,1))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(4294967295,4294967295,4294967295,4294967295), make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i32(4294967294u,4294967294u,4294967294u,4294967294u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(4294967295,4294967295,4294967295,4294967295), make_v128_i32(2147483647,2147483647,2147483647,2147483647))->to_v128() == make_v128_i32(2147483646u,2147483646u,2147483646u,2147483646u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(4294967295,4294967295,4294967295,4294967295), make_v128_i32(2147483648,2147483648,2147483648,2147483648))->to_v128() == make_v128_i32(2147483647u,2147483647u,2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(4294967295,4294967295,4294967295,4294967295), make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i32(4294967294u,4294967294u,4294967294u,4294967294u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(1073741823,1073741823,1073741823,1073741823), make_v128_i32(1073741824,1073741824,1073741824,1073741824))->to_v128() == make_v128_i32(2147483647u,2147483647u,2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(1073741824,1073741824,1073741824,1073741824), make_v128_i32(1073741824,1073741824,1073741824,1073741824))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(3221225473,3221225473,3221225473,3221225473), make_v128_i32(3221225472,3221225472,3221225472,3221225472))->to_v128() == make_v128_i32(2147483649u,2147483649u,2147483649u,2147483649u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(3221225472,3221225472,3221225472,3221225472), make_v128_i32(3221225472,3221225472,3221225472,3221225472))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(3221225472,3221225472,3221225472,3221225472), make_v128_i32(3221225471,3221225471,3221225471,3221225471))->to_v128() == make_v128_i32(2147483647u,2147483647u,2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(2147483647,2147483647,2147483647,2147483647), make_v128_i32(2147483647,2147483647,2147483647,2147483647))->to_v128() == make_v128_i32(4294967294u,4294967294u,4294967294u,4294967294u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(2147483647,2147483647,2147483647,2147483647), make_v128_i32(1,1,1,1))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(2147483648,2147483648,2147483648,2147483648), make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i32(2147483647u,2147483647u,2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(2147483647,2147483647,2147483647,2147483647), make_v128_i32(2147483648,2147483648,2147483648,2147483648))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(2147483648,2147483648,2147483648,2147483648), make_v128_i32(2147483648,2147483648,2147483648,2147483648))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(4294967295,4294967295,4294967295,4294967295), make_v128_i32(1,1,1,1))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(4294967295,4294967295,4294967295,4294967295), make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i32(4294967294u,4294967294u,4294967294u,4294967294u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(2147483647,2147483647,2147483647,2147483647), make_v128_i8(0,0,0,128,0,0,0,128,0,0,0,128,0,0,0,128))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(1,1,1,1), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(2147483647,2147483647,2147483647,2147483647), make_v128_i16(0,32768,0,32768,0,32768,0,32768))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(1,1,1,1), make_v128_i16(65535,65535,65535,65535,65535,65535,65535,65535))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(2147483648,2147483648,2147483648,2147483648), make_v128_f32(0,0,0,0))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(2147483648,2147483648,2147483648,2147483648), make_v128_f32(2147483648,2147483648,2147483648,2147483648))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(2147483648,2147483648,2147483648,2147483648), make_v128_f32(1065353216,1065353216,1065353216,1065353216))->to_v128() == make_v128_i32(3212836864u,3212836864u,3212836864u,3212836864u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(2147483648,2147483648,2147483648,2147483648), make_v128_f32(3212836864,3212836864,3212836864,3212836864))->to_v128() == make_v128_i32(1065353216u,1065353216u,1065353216u,1065353216u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(1,1,1,1), make_v128_f32(2139095040,2139095040,2139095040,2139095040))->to_v128() == make_v128_i32(2139095041u,2139095041u,2139095041u,2139095041u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(1,1,1,1), make_v128_f32(4286578688,4286578688,4286578688,4286578688))->to_v128() == make_v128_i32(4286578689u,4286578689u,4286578689u,4286578689u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(1,1,1,1), make_v128_f32(2143289344,2143289344,2143289344,2143289344))->to_v128() == make_v128_i32(2143289345u,2143289345u,2143289345u,2143289345u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(0,1,2,3), make_v128_i32(0,4294967295,4294967294,4294967293))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(0,1,2,3), make_v128_i32(0,2,4,6))->to_v128() == make_v128_i32(0u,3u,6u,9u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(1234567890,1234567890,1234567890,1234567890), make_v128_i32(1234567890,1234567890,1234567890,1234567890))->to_v128() == make_v128_i32(2469135780u,2469135780u,2469135780u,2469135780u));
   CHECK(bkend.call_with_return("env", "i32x4.add", make_v128_i32(305419896,305419896,305419896,305419896), make_v128_i32(2427178479,2427178479,2427178479,2427178479))->to_v128() == make_v128_i32(2732598375u,2732598375u,2732598375u,2732598375u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(0,0,0,0), make_v128_i32(0,0,0,0))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(0,0,0,0), make_v128_i32(1,1,1,1))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(1,1,1,1), make_v128_i32(1,1,1,1))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(0,0,0,0), make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(1,1,1,1), make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i32(2u,2u,2u,2u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(4294967295,4294967295,4294967295,4294967295), make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(1073741823,1073741823,1073741823,1073741823), make_v128_i32(1073741824,1073741824,1073741824,1073741824))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(1073741824,1073741824,1073741824,1073741824), make_v128_i32(1073741824,1073741824,1073741824,1073741824))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(3221225473,3221225473,3221225473,3221225473), make_v128_i32(3221225472,3221225472,3221225472,3221225472))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(3221225472,3221225472,3221225472,3221225472), make_v128_i32(3221225472,3221225472,3221225472,3221225472))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(3221225471,3221225471,3221225471,3221225471), make_v128_i32(3221225472,3221225472,3221225472,3221225472))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(2147483645,2147483645,2147483645,2147483645), make_v128_i32(1,1,1,1))->to_v128() == make_v128_i32(2147483644u,2147483644u,2147483644u,2147483644u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(2147483646,2147483646,2147483646,2147483646), make_v128_i32(1,1,1,1))->to_v128() == make_v128_i32(2147483645u,2147483645u,2147483645u,2147483645u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(2147483648,2147483648,2147483648,2147483648), make_v128_i32(1,1,1,1))->to_v128() == make_v128_i32(2147483647u,2147483647u,2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(2147483650,2147483650,2147483650,2147483650), make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i32(2147483651u,2147483651u,2147483651u,2147483651u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(2147483649,2147483649,2147483649,2147483649), make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i32(2147483650u,2147483650u,2147483650u,2147483650u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(2147483648,2147483648,2147483648,2147483648), make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i32(2147483649u,2147483649u,2147483649u,2147483649u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(2147483647,2147483647,2147483647,2147483647), make_v128_i32(2147483647,2147483647,2147483647,2147483647))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(2147483648,2147483648,2147483648,2147483648), make_v128_i32(2147483648,2147483648,2147483648,2147483648))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(2147483648,2147483648,2147483648,2147483648), make_v128_i32(2147483649,2147483649,2147483649,2147483649))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(4294967295,4294967295,4294967295,4294967295), make_v128_i32(0,0,0,0))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(4294967295,4294967295,4294967295,4294967295), make_v128_i32(1,1,1,1))->to_v128() == make_v128_i32(4294967294u,4294967294u,4294967294u,4294967294u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(4294967295,4294967295,4294967295,4294967295), make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(4294967295,4294967295,4294967295,4294967295), make_v128_i32(2147483647,2147483647,2147483647,2147483647))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(4294967295,4294967295,4294967295,4294967295), make_v128_i32(2147483648,2147483648,2147483648,2147483648))->to_v128() == make_v128_i32(2147483647u,2147483647u,2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(4294967295,4294967295,4294967295,4294967295), make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(1073741823,1073741823,1073741823,1073741823), make_v128_i32(1073741824,1073741824,1073741824,1073741824))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(1073741824,1073741824,1073741824,1073741824), make_v128_i32(1073741824,1073741824,1073741824,1073741824))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(3221225473,3221225473,3221225473,3221225473), make_v128_i32(3221225472,3221225472,3221225472,3221225472))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(3221225472,3221225472,3221225472,3221225472), make_v128_i32(3221225472,3221225472,3221225472,3221225472))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(3221225472,3221225472,3221225472,3221225472), make_v128_i32(3221225471,3221225471,3221225471,3221225471))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(2147483647,2147483647,2147483647,2147483647), make_v128_i32(2147483647,2147483647,2147483647,2147483647))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(2147483647,2147483647,2147483647,2147483647), make_v128_i32(1,1,1,1))->to_v128() == make_v128_i32(2147483646u,2147483646u,2147483646u,2147483646u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(2147483648,2147483648,2147483648,2147483648), make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i32(2147483649u,2147483649u,2147483649u,2147483649u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(2147483647,2147483647,2147483647,2147483647), make_v128_i32(2147483648,2147483648,2147483648,2147483648))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(2147483648,2147483648,2147483648,2147483648), make_v128_i32(2147483648,2147483648,2147483648,2147483648))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(4294967295,4294967295,4294967295,4294967295), make_v128_i32(1,1,1,1))->to_v128() == make_v128_i32(4294967294u,4294967294u,4294967294u,4294967294u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(4294967295,4294967295,4294967295,4294967295), make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(2147483647,2147483647,2147483647,2147483647), make_v128_i8(0,0,0,128,0,0,0,128,0,0,0,128,0,0,0,128))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(1,1,1,1), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i32(2u,2u,2u,2u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(2147483647,2147483647,2147483647,2147483647), make_v128_i16(0,32768,0,32768,0,32768,0,32768))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(1,1,1,1), make_v128_i16(65535,65535,65535,65535,65535,65535,65535,65535))->to_v128() == make_v128_i32(2u,2u,2u,2u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(2147483648,2147483648,2147483648,2147483648), make_v128_f32(0,0,0,0))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(2147483648,2147483648,2147483648,2147483648), make_v128_f32(2147483648,2147483648,2147483648,2147483648))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(2147483648,2147483648,2147483648,2147483648), make_v128_f32(1065353216,1065353216,1065353216,1065353216))->to_v128() == make_v128_i32(1082130432u,1082130432u,1082130432u,1082130432u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(2147483648,2147483648,2147483648,2147483648), make_v128_f32(3212836864,3212836864,3212836864,3212836864))->to_v128() == make_v128_i32(3229614080u,3229614080u,3229614080u,3229614080u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(1,1,1,1), make_v128_f32(2139095040,2139095040,2139095040,2139095040))->to_v128() == make_v128_i32(2155872257u,2155872257u,2155872257u,2155872257u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(1,1,1,1), make_v128_f32(4286578688,4286578688,4286578688,4286578688))->to_v128() == make_v128_i32(8388609u,8388609u,8388609u,8388609u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(1,1,1,1), make_v128_f32(2143289344,2143289344,2143289344,2143289344))->to_v128() == make_v128_i32(2151677953u,2151677953u,2151677953u,2151677953u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(0,1,2,3), make_v128_i32(0,4294967295,4294967294,4294967293))->to_v128() == make_v128_i32(0u,2u,4u,6u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(0,1,2,3), make_v128_i32(0,2,4,6))->to_v128() == make_v128_i32(0u,4294967295u,4294967294u,4294967293u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(3214567890,3214567890,3214567890,3214567890), make_v128_i32(1234567890,1234567890,1234567890,1234567890))->to_v128() == make_v128_i32(1980000000u,1980000000u,1980000000u,1980000000u));
   CHECK(bkend.call_with_return("env", "i32x4.sub", make_v128_i32(2427178479,2427178479,2427178479,2427178479), make_v128_i32(305419896,305419896,305419896,305419896))->to_v128() == make_v128_i32(2121758583u,2121758583u,2121758583u,2121758583u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(0,0,0,0), make_v128_i32(0,0,0,0))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(0,0,0,0), make_v128_i32(1,1,1,1))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(1,1,1,1), make_v128_i32(1,1,1,1))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(0,0,0,0), make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(1,1,1,1), make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(4294967295,4294967295,4294967295,4294967295), make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(1073741823,1073741823,1073741823,1073741823), make_v128_i32(1073741824,1073741824,1073741824,1073741824))->to_v128() == make_v128_i32(3221225472u,3221225472u,3221225472u,3221225472u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(1073741824,1073741824,1073741824,1073741824), make_v128_i32(1073741824,1073741824,1073741824,1073741824))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(3221225473,3221225473,3221225473,3221225473), make_v128_i32(3221225472,3221225472,3221225472,3221225472))->to_v128() == make_v128_i32(3221225472u,3221225472u,3221225472u,3221225472u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(3221225472,3221225472,3221225472,3221225472), make_v128_i32(3221225472,3221225472,3221225472,3221225472))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(3221225471,3221225471,3221225471,3221225471), make_v128_i32(3221225472,3221225472,3221225472,3221225472))->to_v128() == make_v128_i32(1073741824u,1073741824u,1073741824u,1073741824u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(2147483645,2147483645,2147483645,2147483645), make_v128_i32(1,1,1,1))->to_v128() == make_v128_i32(2147483645u,2147483645u,2147483645u,2147483645u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(2147483646,2147483646,2147483646,2147483646), make_v128_i32(1,1,1,1))->to_v128() == make_v128_i32(2147483646u,2147483646u,2147483646u,2147483646u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(2147483648,2147483648,2147483648,2147483648), make_v128_i32(1,1,1,1))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(2147483650,2147483650,2147483650,2147483650), make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i32(2147483646u,2147483646u,2147483646u,2147483646u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(2147483649,2147483649,2147483649,2147483649), make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i32(2147483647u,2147483647u,2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(2147483648,2147483648,2147483648,2147483648), make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(2147483647,2147483647,2147483647,2147483647), make_v128_i32(2147483647,2147483647,2147483647,2147483647))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(2147483648,2147483648,2147483648,2147483648), make_v128_i32(2147483648,2147483648,2147483648,2147483648))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(2147483648,2147483648,2147483648,2147483648), make_v128_i32(2147483649,2147483649,2147483649,2147483649))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(4294967295,4294967295,4294967295,4294967295), make_v128_i32(0,0,0,0))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(4294967295,4294967295,4294967295,4294967295), make_v128_i32(1,1,1,1))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(4294967295,4294967295,4294967295,4294967295), make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(4294967295,4294967295,4294967295,4294967295), make_v128_i32(2147483647,2147483647,2147483647,2147483647))->to_v128() == make_v128_i32(2147483649u,2147483649u,2147483649u,2147483649u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(4294967295,4294967295,4294967295,4294967295), make_v128_i32(2147483648,2147483648,2147483648,2147483648))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(4294967295,4294967295,4294967295,4294967295), make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(1073741823,1073741823,1073741823,1073741823), make_v128_i32(1073741824,1073741824,1073741824,1073741824))->to_v128() == make_v128_i32(3221225472u,3221225472u,3221225472u,3221225472u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(1073741824,1073741824,1073741824,1073741824), make_v128_i32(1073741824,1073741824,1073741824,1073741824))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(3221225473,3221225473,3221225473,3221225473), make_v128_i32(3221225472,3221225472,3221225472,3221225472))->to_v128() == make_v128_i32(3221225472u,3221225472u,3221225472u,3221225472u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(3221225472,3221225472,3221225472,3221225472), make_v128_i32(3221225472,3221225472,3221225472,3221225472))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(3221225472,3221225472,3221225472,3221225472), make_v128_i32(3221225471,3221225471,3221225471,3221225471))->to_v128() == make_v128_i32(1073741824u,1073741824u,1073741824u,1073741824u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(2147483647,2147483647,2147483647,2147483647), make_v128_i32(2147483647,2147483647,2147483647,2147483647))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(2147483647,2147483647,2147483647,2147483647), make_v128_i32(1,1,1,1))->to_v128() == make_v128_i32(2147483647u,2147483647u,2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(2147483648,2147483648,2147483648,2147483648), make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(2147483647,2147483647,2147483647,2147483647), make_v128_i32(2147483648,2147483648,2147483648,2147483648))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(2147483648,2147483648,2147483648,2147483648), make_v128_i32(2147483648,2147483648,2147483648,2147483648))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(4294967295,4294967295,4294967295,4294967295), make_v128_i32(1,1,1,1))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(4294967295,4294967295,4294967295,4294967295), make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(268435456,268435456,268435456,268435456), make_v128_i8(16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(4294967295,4294967295,4294967295,4294967295), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(2147483648,2147483648,2147483648,2147483648), make_v128_i16(0,2,0,2,0,2,0,2))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(4294967295,4294967295,4294967295,4294967295), make_v128_i16(65535,65535,65535,65535,65535,65535,65535,65535))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(32768,32768,32768,32768), make_v128_f32(0,0,0,0))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(32768,32768,32768,32768), make_v128_f32(2147483648,2147483648,2147483648,2147483648))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(32768,32768,32768,32768), make_v128_f32(1065353216,1065353216,1065353216,1065353216))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(32768,32768,32768,32768), make_v128_f32(3212836864,3212836864,3212836864,3212836864))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(1,1,1,1), make_v128_f32(2139095040,2139095040,2139095040,2139095040))->to_v128() == make_v128_i32(2139095040u,2139095040u,2139095040u,2139095040u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(1,1,1,1), make_v128_f32(4286578688,4286578688,4286578688,4286578688))->to_v128() == make_v128_i32(4286578688u,4286578688u,4286578688u,4286578688u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(1,1,1,1), make_v128_f32(2143289344,2143289344,2143289344,2143289344))->to_v128() == make_v128_i32(2143289344u,2143289344u,2143289344u,2143289344u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(0,1,2,3), make_v128_i32(0,4294967295,4294967294,4294967293))->to_v128() == make_v128_i32(0u,4294967295u,4294967292u,4294967287u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(0,1,2,3), make_v128_i32(0,2,4,6))->to_v128() == make_v128_i32(0u,2u,8u,18u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(123456789,123456789,123456789,123456789), make_v128_i32(987654321,987654321,987654321,987654321))->to_v128() == make_v128_i32(4227814277u,4227814277u,4227814277u,4227814277u));
   CHECK(bkend.call_with_return("env", "i32x4.mul", make_v128_i32(305419896,305419896,305419896,305419896), make_v128_i32(2427178479,2427178479,2427178479,2427178479))->to_v128() == make_v128_i32(709022216u,709022216u,709022216u,709022216u));
   CHECK(bkend.call_with_return("env", "i32x4.neg", make_v128_i32(0,0,0,0))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.neg", make_v128_i32(1,1,1,1))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.neg", make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.neg", make_v128_i32(2147483646,2147483646,2147483646,2147483646))->to_v128() == make_v128_i32(2147483650u,2147483650u,2147483650u,2147483650u));
   CHECK(bkend.call_with_return("env", "i32x4.neg", make_v128_i32(2147483649,2147483649,2147483649,2147483649))->to_v128() == make_v128_i32(2147483647u,2147483647u,2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i32x4.neg", make_v128_i32(2147483648,2147483648,2147483648,2147483648))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.neg", make_v128_i32(2147483647,2147483647,2147483647,2147483647))->to_v128() == make_v128_i32(2147483649u,2147483649u,2147483649u,2147483649u));
   CHECK(bkend.call_with_return("env", "i32x4.neg", make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.neg", make_v128_i32(1,1,1,1))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.neg", make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.neg", make_v128_i32(2147483648,2147483648,2147483648,2147483648))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.neg", make_v128_i32(2147483649,2147483649,2147483649,2147483649))->to_v128() == make_v128_i32(2147483647u,2147483647u,2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i32x4.neg", make_v128_i32(2147483647,2147483647,2147483647,2147483647))->to_v128() == make_v128_i32(2147483649u,2147483649u,2147483649u,2147483649u));
   CHECK(bkend.call_with_return("env", "i32x4.neg", make_v128_i32(2147483648,2147483648,2147483648,2147483648))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.neg", make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i32(1u,1u,1u,1u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_arith_1_wasm>", "[simd_i32x4_arith_1_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_arith.1.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_arith_10_wasm>", "[simd_i32x4_arith_10_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_arith.10.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_arith_11_wasm>", "[simd_i32x4_arith_11_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_arith.11.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_arith_12_wasm>", "[simd_i32x4_arith_12_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_arith.12.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "add-sub", make_v128_i32(0,1,2,3), make_v128_i32(0,2,4,6), make_v128_i32(0,2,4,6))->to_v128() == make_v128_i32(0u,1u,2u,3u));
   CHECK(bkend.call_with_return("env", "mul-add", make_v128_i32(0,1,2,3), make_v128_i32(0,1,2,3), make_v128_i32(2,2,2,2))->to_v128() == make_v128_i32(0u,4u,8u,12u));
   CHECK(bkend.call_with_return("env", "mul-sub", make_v128_i32(0,2,4,6), make_v128_i32(0,1,2,3), make_v128_i32(0,1,2,3))->to_v128() == make_v128_i32(0u,1u,4u,9u));
   CHECK(bkend.call_with_return("env", "sub-add", make_v128_i32(0,1,2,3), make_v128_i32(0,2,4,6), make_v128_i32(0,2,4,6))->to_v128() == make_v128_i32(0u,1u,2u,3u));
   CHECK(bkend.call_with_return("env", "add-neg", make_v128_i32(0,1,2,3), make_v128_i32(0,1,2,3))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "mul-neg", make_v128_i32(0,1,2,3), make_v128_i32(2,2,2,2))->to_v128() == make_v128_i32(0u,4294967294u,4294967292u,4294967290u));
   CHECK(bkend.call_with_return("env", "sub-neg", make_v128_i32(0,1,2,3), make_v128_i32(0,1,2,3))->to_v128() == make_v128_i32(0u,4294967294u,4294967292u,4294967290u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_arith_2_wasm>", "[simd_i32x4_arith_2_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_arith.2.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_arith_3_wasm>", "[simd_i32x4_arith_3_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_arith.3.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_arith_4_wasm>", "[simd_i32x4_arith_4_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_arith.4.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_arith_5_wasm>", "[simd_i32x4_arith_5_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_arith.5.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_arith_6_wasm>", "[simd_i32x4_arith_6_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_arith.6.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_arith_7_wasm>", "[simd_i32x4_arith_7_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_arith.7.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_arith_8_wasm>", "[simd_i32x4_arith_8_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_arith.8.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_arith_9_wasm>", "[simd_i32x4_arith_9_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_arith.9.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

