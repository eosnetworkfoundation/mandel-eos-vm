// Generated by spec_test_generator.  DO NOT MODIFY THIS FILE.

#include <algorithm>
#include <vector>
#include <iostream>
#include <iterator>
#include <cmath>
#include <cstdlib>
#include <catch2/catch.hpp>
#include <utils.hpp>
#include <wasm_config.hpp>
#include <eosio/vm/backend.hpp>

using namespace eosio;
using namespace eosio::vm;
extern wasm_allocator wa;

BACKEND_TEST_CASE( "Testing wasm <simd_align_0_wasm>", "[simd_align_0_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.0.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_1_wasm>", "[simd_align_1_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.1.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_10_wasm>", "[simd_align_10_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.10.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_11_wasm>", "[simd_align_11_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.11.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_12_wasm>", "[simd_align_12_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.12.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_13_wasm>", "[simd_align_13_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.13.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_14_wasm>", "[simd_align_14_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.14.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_15_wasm>", "[simd_align_15_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.15.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_16_wasm>", "[simd_align_16_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.16.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_17_wasm>", "[simd_align_17_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.17.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_18_wasm>", "[simd_align_18_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.18.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_19_wasm>", "[simd_align_19_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.19.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_2_wasm>", "[simd_align_2_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.2.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_20_wasm>", "[simd_align_20_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.20.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_21_wasm>", "[simd_align_21_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.21.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_22_wasm>", "[simd_align_22_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.22.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_23_wasm>", "[simd_align_23_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.23.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_24_wasm>", "[simd_align_24_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.24.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_25_wasm>", "[simd_align_25_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.25.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_26_wasm>", "[simd_align_26_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.26.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_27_wasm>", "[simd_align_27_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.27.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_28_wasm>", "[simd_align_28_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.28.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_29_wasm>", "[simd_align_29_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.29.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_3_wasm>", "[simd_align_3_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.3.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_30_wasm>", "[simd_align_30_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.30.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_31_wasm>", "[simd_align_31_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.31.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_32_wasm>", "[simd_align_32_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.32.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_33_wasm>", "[simd_align_33_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.33.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_34_wasm>", "[simd_align_34_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.34.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_35_wasm>", "[simd_align_35_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.35.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_36_wasm>", "[simd_align_36_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.36.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_37_wasm>", "[simd_align_37_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.37.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_38_wasm>", "[simd_align_38_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.38.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_39_wasm>", "[simd_align_39_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.39.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_4_wasm>", "[simd_align_4_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.4.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_40_wasm>", "[simd_align_40_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.40.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_41_wasm>", "[simd_align_41_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.41.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_42_wasm>", "[simd_align_42_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.42.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_43_wasm>", "[simd_align_43_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.43.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_44_wasm>", "[simd_align_44_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.44.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_align_45_wasm>", "[simd_align_45_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.45.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_align_46_wasm>", "[simd_align_46_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.46.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_align_47_wasm>", "[simd_align_47_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.47.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_align_48_wasm>", "[simd_align_48_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.48.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_align_49_wasm>", "[simd_align_49_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.49.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_align_5_wasm>", "[simd_align_5_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.5.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_50_wasm>", "[simd_align_50_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.50.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_align_51_wasm>", "[simd_align_51_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.51.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_align_52_wasm>", "[simd_align_52_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.52.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_align_53_wasm>", "[simd_align_53_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.53.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_align_54_wasm>", "[simd_align_54_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.54.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_align_55_wasm>", "[simd_align_55_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.55.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_align_6_wasm>", "[simd_align_6_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.6.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_7_wasm>", "[simd_align_7_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.7.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_8_wasm>", "[simd_align_8_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.8.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_9_wasm>", "[simd_align_9_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.9.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_align_90_wasm>", "[simd_align_90_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.90.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "v128.load align=16", UINT32_C(0))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "v128.load align=16", UINT32_C(1))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(!bkend.call_with_return("env", "v128.store align=16", UINT32_C(1), make_v128_i8(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)));
   CHECK(bkend.call_with_return("env", "v128.load align=16", UINT32_C(0))->to_v128() == make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_align_91_wasm>", "[simd_align_91_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_align.91.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "v128_unaligned_read_and_write")->to_v128() == make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u));
   CHECK(bkend.call_with_return("env", "v128_aligned_read_and_write")->to_v128() == make_v128_i16(0u,1u,2u,3u,4u,5u,6u,7u));
   CHECK(bkend.call_with_return("env", "v128_aligned_read_and_unaligned_write")->to_v128() == make_v128_i32(0u,1u,2u,3u));
   CHECK(bkend.call_with_return("env", "v128_unaligned_read_and_aligned_write")->to_v128() == make_v128_i32(0u,1u,2u,3u));
}

