// Generated by spec_test_generator.  DO NOT MODIFY THIS FILE.

#include <algorithm>
#include <vector>
#include <iostream>
#include <iterator>
#include <cmath>
#include <cstdlib>
#include <catch2/catch.hpp>
#include <utils.hpp>
#include <wasm_config.hpp>
#include <eosio/vm/backend.hpp>

using namespace eosio;
using namespace eosio::vm;
extern wasm_allocator wa;

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_dot_i16x8_0_wasm>", "[simd_i32x4_dot_i16x8_0_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_dot_i16x8.0.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "i32x4.dot_i16x8_s", make_v128_i16(0,0,0,0,0,0,0,0), make_v128_i16(0,0,0,0,0,0,0,0))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.dot_i16x8_s", make_v128_i16(0,0,0,0,0,0,0,0), make_v128_i16(1,1,1,1,1,1,1,1))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.dot_i16x8_s", make_v128_i16(1,1,1,1,1,1,1,1), make_v128_i16(1,1,1,1,1,1,1,1))->to_v128() == make_v128_i32(2u,2u,2u,2u));
   CHECK(bkend.call_with_return("env", "i32x4.dot_i16x8_s", make_v128_i16(0,0,0,0,0,0,0,0), make_v128_i16(65535,65535,65535,65535,65535,65535,65535,65535))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.dot_i16x8_s", make_v128_i16(1,1,1,1,1,1,1,1), make_v128_i16(65535,65535,65535,65535,65535,65535,65535,65535))->to_v128() == make_v128_i32(4294967294u,4294967294u,4294967294u,4294967294u));
   CHECK(bkend.call_with_return("env", "i32x4.dot_i16x8_s", make_v128_i16(65535,65535,65535,65535,65535,65535,65535,65535), make_v128_i16(65535,65535,65535,65535,65535,65535,65535,65535))->to_v128() == make_v128_i32(2u,2u,2u,2u));
   CHECK(bkend.call_with_return("env", "i32x4.dot_i16x8_s", make_v128_i16(16383,16383,16383,16383,16383,16383,16383,16383), make_v128_i16(16384,16384,16384,16384,16384,16384,16384,16384))->to_v128() == make_v128_i32(536838144u,536838144u,536838144u,536838144u));
   CHECK(bkend.call_with_return("env", "i32x4.dot_i16x8_s", make_v128_i16(16384,16384,16384,16384,16384,16384,16384,16384), make_v128_i16(16384,16384,16384,16384,16384,16384,16384,16384))->to_v128() == make_v128_i32(536870912u,536870912u,536870912u,536870912u));
   CHECK(bkend.call_with_return("env", "i32x4.dot_i16x8_s", make_v128_i16(49153,49153,49153,49153,49153,49153,49153,49153), make_v128_i16(49152,49152,49152,49152,49152,49152,49152,49152))->to_v128() == make_v128_i32(536838144u,536838144u,536838144u,536838144u));
   CHECK(bkend.call_with_return("env", "i32x4.dot_i16x8_s", make_v128_i16(49152,49152,49152,49152,49152,49152,49152,49152), make_v128_i16(49152,49152,49152,49152,49152,49152,49152,49152))->to_v128() == make_v128_i32(536870912u,536870912u,536870912u,536870912u));
   CHECK(bkend.call_with_return("env", "i32x4.dot_i16x8_s", make_v128_i16(49151,49151,49151,49151,49151,49151,49151,49151), make_v128_i16(49152,49152,49152,49152,49152,49152,49152,49152))->to_v128() == make_v128_i32(536903680u,536903680u,536903680u,536903680u));
   CHECK(bkend.call_with_return("env", "i32x4.dot_i16x8_s", make_v128_i16(32765,32765,32765,32765,32765,32765,32765,32765), make_v128_i16(1,1,1,1,1,1,1,1))->to_v128() == make_v128_i32(65530u,65530u,65530u,65530u));
   CHECK(bkend.call_with_return("env", "i32x4.dot_i16x8_s", make_v128_i16(32766,32766,32766,32766,32766,32766,32766,32766), make_v128_i16(1,1,1,1,1,1,1,1))->to_v128() == make_v128_i32(65532u,65532u,65532u,65532u));
   CHECK(bkend.call_with_return("env", "i32x4.dot_i16x8_s", make_v128_i16(32768,32768,32768,32768,32768,32768,32768,32768), make_v128_i16(1,1,1,1,1,1,1,1))->to_v128() == make_v128_i32(4294901760u,4294901760u,4294901760u,4294901760u));
   CHECK(bkend.call_with_return("env", "i32x4.dot_i16x8_s", make_v128_i16(32770,32770,32770,32770,32770,32770,32770,32770), make_v128_i16(65535,65535,65535,65535,65535,65535,65535,65535))->to_v128() == make_v128_i32(65532u,65532u,65532u,65532u));
   CHECK(bkend.call_with_return("env", "i32x4.dot_i16x8_s", make_v128_i16(32769,32769,32769,32769,32769,32769,32769,32769), make_v128_i16(65535,65535,65535,65535,65535,65535,65535,65535))->to_v128() == make_v128_i32(65534u,65534u,65534u,65534u));
   CHECK(bkend.call_with_return("env", "i32x4.dot_i16x8_s", make_v128_i16(32768,32768,32768,32768,32768,32768,32768,32768), make_v128_i16(65535,65535,65535,65535,65535,65535,65535,65535))->to_v128() == make_v128_i32(65536u,65536u,65536u,65536u));
   CHECK(bkend.call_with_return("env", "i32x4.dot_i16x8_s", make_v128_i16(32767,32767,32767,32767,32767,32767,32767,32767), make_v128_i16(32767,32767,32767,32767,32767,32767,32767,32767))->to_v128() == make_v128_i32(2147352578u,2147352578u,2147352578u,2147352578u));
   CHECK(bkend.call_with_return("env", "i32x4.dot_i16x8_s", make_v128_i16(32768,32768,32768,32768,32768,32768,32768,32768), make_v128_i16(32768,32768,32768,32768,32768,32768,32768,32768))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.dot_i16x8_s", make_v128_i16(32768,32768,32768,32768,32768,32768,32768,32768), make_v128_i16(32769,32769,32769,32769,32769,32769,32769,32769))->to_v128() == make_v128_i32(2147418112u,2147418112u,2147418112u,2147418112u));
   CHECK(bkend.call_with_return("env", "i32x4.dot_i16x8_s", make_v128_i16(65535,65535,65535,65535,65535,65535,65535,65535), make_v128_i16(0,0,0,0,0,0,0,0))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.dot_i16x8_s", make_v128_i16(65535,65535,65535,65535,65535,65535,65535,65535), make_v128_i16(1,1,1,1,1,1,1,1))->to_v128() == make_v128_i32(4294967294u,4294967294u,4294967294u,4294967294u));
   CHECK(bkend.call_with_return("env", "i32x4.dot_i16x8_s", make_v128_i16(65535,65535,65535,65535,65535,65535,65535,65535), make_v128_i16(65535,65535,65535,65535,65535,65535,65535,65535))->to_v128() == make_v128_i32(2u,2u,2u,2u));
   CHECK(bkend.call_with_return("env", "i32x4.dot_i16x8_s", make_v128_i16(65535,65535,65535,65535,65535,65535,65535,65535), make_v128_i16(32767,32767,32767,32767,32767,32767,32767,32767))->to_v128() == make_v128_i32(4294901762u,4294901762u,4294901762u,4294901762u));
   CHECK(bkend.call_with_return("env", "i32x4.dot_i16x8_s", make_v128_i16(65535,65535,65535,65535,65535,65535,65535,65535), make_v128_i16(32768,32768,32768,32768,32768,32768,32768,32768))->to_v128() == make_v128_i32(65536u,65536u,65536u,65536u));
   CHECK(bkend.call_with_return("env", "i32x4.dot_i16x8_s", make_v128_i16(65535,65535,65535,65535,65535,65535,65535,65535), make_v128_i16(65535,65535,65535,65535,65535,65535,65535,65535))->to_v128() == make_v128_i32(2u,2u,2u,2u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_dot_i16x8_1_wasm>", "[simd_i32x4_dot_i16x8_1_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_dot_i16x8.1.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_dot_i16x8_2_wasm>", "[simd_i32x4_dot_i16x8_2_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_dot_i16x8.2.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_dot_i16x8_3_wasm>", "[simd_i32x4_dot_i16x8_3_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_dot_i16x8.3.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

