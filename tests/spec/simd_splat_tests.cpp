// Generated by spec_test_generator.  DO NOT MODIFY THIS FILE.

#include <algorithm>
#include <vector>
#include <iostream>
#include <iterator>
#include <cmath>
#include <cstdlib>
#include <catch2/catch.hpp>
#include <utils.hpp>
#include <wasm_config.hpp>
#include <eosio/vm/backend.hpp>

using namespace eosio;
using namespace eosio::vm;
extern wasm_allocator wa;

BACKEND_TEST_CASE( "Testing wasm <simd_splat_0_wasm>", "[simd_splat_0_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_splat.0.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "i8x16.splat", UINT32_C(0))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.splat", UINT32_C(5))->to_v128() == make_v128_i8(5u,5u,5u,5u,5u,5u,5u,5u,5u,5u,5u,5u,5u,5u,5u,5u));
   CHECK(bkend.call_with_return("env", "i8x16.splat", UINT32_C(4294967291))->to_v128() == make_v128_i8(251u,251u,251u,251u,251u,251u,251u,251u,251u,251u,251u,251u,251u,251u,251u,251u));
   CHECK(bkend.call_with_return("env", "i8x16.splat", UINT32_C(257))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.splat", UINT32_C(255))->to_v128() == make_v128_i8(255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i8x16.splat", UINT32_C(4294967168))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.splat", UINT32_C(127))->to_v128() == make_v128_i8(127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u));
   CHECK(bkend.call_with_return("env", "i8x16.splat", UINT32_C(4294967167))->to_v128() == make_v128_i8(127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u));
   CHECK(bkend.call_with_return("env", "i8x16.splat", UINT32_C(128))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.splat", UINT32_C(65407))->to_v128() == make_v128_i8(127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u));
   CHECK(bkend.call_with_return("env", "i8x16.splat", UINT32_C(128))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.splat", UINT32_C(171))->to_v128() == make_v128_i32(2880154539u,2880154539u,2880154539u,2880154539u));
   CHECK(bkend.call_with_return("env", "i16x8.splat", UINT32_C(0))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8.splat", UINT32_C(5))->to_v128() == make_v128_i16(5u,5u,5u,5u,5u,5u,5u,5u));
   CHECK(bkend.call_with_return("env", "i16x8.splat", UINT32_C(4294967291))->to_v128() == make_v128_i16(65531u,65531u,65531u,65531u,65531u,65531u,65531u,65531u));
   CHECK(bkend.call_with_return("env", "i16x8.splat", UINT32_C(65537))->to_v128() == make_v128_i16(1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i16x8.splat", UINT32_C(65535))->to_v128() == make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u));
   CHECK(bkend.call_with_return("env", "i16x8.splat", UINT32_C(4294934528))->to_v128() == make_v128_i16(32768u,32768u,32768u,32768u,32768u,32768u,32768u,32768u));
   CHECK(bkend.call_with_return("env", "i16x8.splat", UINT32_C(32767))->to_v128() == make_v128_i16(32767u,32767u,32767u,32767u,32767u,32767u,32767u,32767u));
   CHECK(bkend.call_with_return("env", "i16x8.splat", UINT32_C(4294934527))->to_v128() == make_v128_i16(32767u,32767u,32767u,32767u,32767u,32767u,32767u,32767u));
   CHECK(bkend.call_with_return("env", "i16x8.splat", UINT32_C(32768))->to_v128() == make_v128_i16(32768u,32768u,32768u,32768u,32768u,32768u,32768u,32768u));
   CHECK(bkend.call_with_return("env", "i16x8.splat", UINT32_C(4294934527))->to_v128() == make_v128_i16(32767u,32767u,32767u,32767u,32767u,32767u,32767u,32767u));
   CHECK(bkend.call_with_return("env", "i16x8.splat", UINT32_C(32768))->to_v128() == make_v128_i16(32768u,32768u,32768u,32768u,32768u,32768u,32768u,32768u));
   CHECK(bkend.call_with_return("env", "i16x8.splat", UINT32_C(43981))->to_v128() == make_v128_i32(2882382797u,2882382797u,2882382797u,2882382797u));
   CHECK(bkend.call_with_return("env", "i16x8.splat", UINT32_C(12345))->to_v128() == make_v128_i16(12345u,12345u,12345u,12345u,12345u,12345u,12345u,12345u));
   CHECK(bkend.call_with_return("env", "i16x8.splat", UINT32_C(4660))->to_v128() == make_v128_i16(4660u,4660u,4660u,4660u,4660u,4660u,4660u,4660u));
   CHECK(bkend.call_with_return("env", "i32x4.splat", UINT32_C(0))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.splat", UINT32_C(5))->to_v128() == make_v128_i32(5u,5u,5u,5u));
   CHECK(bkend.call_with_return("env", "i32x4.splat", UINT32_C(4294967291))->to_v128() == make_v128_i32(4294967291u,4294967291u,4294967291u,4294967291u));
   CHECK(bkend.call_with_return("env", "i32x4.splat", UINT32_C(4294967295))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.splat", UINT32_C(4294967295))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.splat", UINT32_C(2147483648))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.splat", UINT32_C(2147483647))->to_v128() == make_v128_i32(2147483647u,2147483647u,2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i32x4.splat", UINT32_C(2147483648))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.splat", UINT32_C(1234567890))->to_v128() == make_v128_i32(1234567890u,1234567890u,1234567890u,1234567890u));
   CHECK(bkend.call_with_return("env", "i32x4.splat", UINT32_C(305419896))->to_v128() == make_v128_i32(305419896u,305419896u,305419896u,305419896u));
   CHECK(bkend.call_with_return("env", "f32x4.splat", bit_cast<float>(UINT32_C(0)))->to_v128() == make_v128_f32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.splat", bit_cast<float>(UINT32_C(1066192077)))->to_v128() == make_v128_f32(1066192077u,1066192077u,1066192077u,1066192077u));
   CHECK(bkend.call_with_return("env", "f32x4.splat", bit_cast<float>(UINT32_C(3213675725)))->to_v128() == make_v128_f32(3213675725u,3213675725u,3213675725u,3213675725u));
   CHECK(bkend.call_with_return("env", "f32x4.splat", bit_cast<float>(UINT32_C(2123789977)))->to_v128() == make_v128_f32(2123789977u,2123789977u,2123789977u,2123789977u));
   CHECK(bkend.call_with_return("env", "f32x4.splat", bit_cast<float>(UINT32_C(4271273625)))->to_v128() == make_v128_f32(4271273625u,4271273625u,4271273625u,4271273625u));
   CHECK(bkend.call_with_return("env", "f32x4.splat", bit_cast<float>(UINT32_C(2139095039)))->to_v128() == make_v128_f32(2139095039u,2139095039u,2139095039u,2139095039u));
   CHECK(bkend.call_with_return("env", "f32x4.splat", bit_cast<float>(UINT32_C(4286578687)))->to_v128() == make_v128_f32(4286578687u,4286578687u,4286578687u,4286578687u));
   CHECK(bkend.call_with_return("env", "f32x4.splat", bit_cast<float>(UINT32_C(2130706432)))->to_v128() == make_v128_f32(2130706432u,2130706432u,2130706432u,2130706432u));
   CHECK(bkend.call_with_return("env", "f32x4.splat", bit_cast<float>(UINT32_C(4278190080)))->to_v128() == make_v128_f32(4278190080u,4278190080u,4278190080u,4278190080u));
   CHECK(bkend.call_with_return("env", "f32x4.splat", bit_cast<float>(UINT32_C(2139095040)))->to_v128() == make_v128_f32(2139095040u,2139095040u,2139095040u,2139095040u));
   CHECK(bkend.call_with_return("env", "f32x4.splat", bit_cast<float>(UINT32_C(4286578688)))->to_v128() == make_v128_f32(4286578688u,4286578688u,4286578688u,4286578688u));
   CHECK(bkend.call_with_return("env", "f32x4.splat", bit_cast<float>(UINT32_C(2143289344)))->to_v128() == make_v128_f32(2143289344u,2143289344u,2143289344u,2143289344u));
   CHECK(bkend.call_with_return("env", "f32x4.splat", bit_cast<float>(UINT32_C(2139095041)))->to_v128() == make_v128_f32(2139095041u,2139095041u,2139095041u,2139095041u));
   CHECK(bkend.call_with_return("env", "f32x4.splat", bit_cast<float>(UINT32_C(2147483647)))->to_v128() == make_v128_f32(2147483647u,2147483647u,2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "f32x4.splat", bit_cast<float>(UINT32_C(1290500515)))->to_v128() == make_v128_f32(1290500515u,1290500515u,1290500515u,1290500515u));
   CHECK(bkend.call_with_return("env", "f32x4.splat", bit_cast<float>(UINT32_C(1290500515)))->to_v128() == make_v128_f32(1290500515u,1290500515u,1290500515u,1290500515u));
   CHECK(bkend.call_with_return("env", "f32x4.splat", bit_cast<float>(UINT32_C(1536271028)))->to_v128() == make_v128_f32(1536271028u,1536271028u,1536271028u,1536271028u));
   CHECK(bkend.call_with_return("env", "f32x4.splat", bit_cast<float>(UINT32_C(1536271028)))->to_v128() == make_v128_f32(1536271028u,1536271028u,1536271028u,1536271028u));
   CHECK(bkend.call_with_return("env", "f32x4.splat", bit_cast<float>(UINT32_C(1820282235)))->to_v128() == make_v128_f32(1820282235u,1820282235u,1820282235u,1820282235u));
   CHECK(bkend.call_with_return("env", "f32x4.splat", bit_cast<float>(UINT32_C(1820282235)))->to_v128() == make_v128_f32(1820282235u,1820282235u,1820282235u,1820282235u));
   CHECK(bkend.call_with_return("env", "f32x4.splat", bit_cast<float>(UINT32_C(1695654580)))->to_v128() == make_v128_f32(1695654580u,1695654580u,1695654580u,1695654580u));
   CHECK(bkend.call_with_return("env", "f32x4.splat", bit_cast<float>(UINT32_C(1376887476)))->to_v128() == make_v128_f32(1376887476u,1376887476u,1376887476u,1376887476u));
   CHECK(bkend.call_with_return("env", "i64x2.splat", UINT64_C(0))->to_v128() == make_v128_i64(0u,0u));
   CHECK(bkend.call_with_return("env", "i64x2.splat", UINT64_C(0))->to_v128() == make_v128_i64(0u,0u));
   CHECK(bkend.call_with_return("env", "i64x2.splat", UINT64_C(1))->to_v128() == make_v128_i64(1u,1u));
   CHECK(bkend.call_with_return("env", "i64x2.splat", UINT64_C(18446744073709551615))->to_v128() == make_v128_i64(18446744073709551615u,18446744073709551615u));
   CHECK(bkend.call_with_return("env", "i64x2.splat", UINT64_C(9223372036854775808))->to_v128() == make_v128_i64(9223372036854775808u,9223372036854775808u));
   CHECK(bkend.call_with_return("env", "i64x2.splat", UINT64_C(9223372036854775808))->to_v128() == make_v128_i64(9223372036854775808u,9223372036854775808u));
   CHECK(bkend.call_with_return("env", "i64x2.splat", UINT64_C(9223372036854775807))->to_v128() == make_v128_i64(9223372036854775807u,9223372036854775807u));
   CHECK(bkend.call_with_return("env", "i64x2.splat", UINT64_C(18446744073709551615))->to_v128() == make_v128_i64(18446744073709551615u,18446744073709551615u));
   CHECK(bkend.call_with_return("env", "i64x2.splat", UINT64_C(9223372036854775807))->to_v128() == make_v128_i64(9223372036854775807u,9223372036854775807u));
   CHECK(bkend.call_with_return("env", "i64x2.splat", UINT64_C(18446744073709551615))->to_v128() == make_v128_i64(18446744073709551615u,18446744073709551615u));
   CHECK(bkend.call_with_return("env", "i64x2.splat", UINT64_C(9223372036854775808))->to_v128() == make_v128_i64(9223372036854775808u,9223372036854775808u));
   CHECK(bkend.call_with_return("env", "i64x2.splat", UINT64_C(9223372036854775808))->to_v128() == make_v128_i64(9223372036854775808u,9223372036854775808u));
   CHECK(bkend.call_with_return("env", "i64x2.splat", UINT64_C(1234567890123456789))->to_v128() == make_v128_i64(1234567890123456789u,1234567890123456789u));
   CHECK(bkend.call_with_return("env", "i64x2.splat", UINT64_C(1311768467294899695))->to_v128() == make_v128_i64(1311768467294899695u,1311768467294899695u));
   CHECK(bkend.call_with_return("env", "f64x2.splat", bit_cast<double>(UINT64_C(0)))->to_v128() == make_v128_f64(0u,0u));
   CHECK(bkend.call_with_return("env", "f64x2.splat", bit_cast<double>(UINT64_C(9223372036854775808)))->to_v128() == make_v128_f64(9223372036854775808u,9223372036854775808u));
   CHECK(bkend.call_with_return("env", "f64x2.splat", bit_cast<double>(UINT64_C(4607632778762754458)))->to_v128() == make_v128_f64(4607632778762754458u,4607632778762754458u));
   CHECK(bkend.call_with_return("env", "f64x2.splat", bit_cast<double>(UINT64_C(13831004815617530266)))->to_v128() == make_v128_f64(13831004815617530266u,13831004815617530266u));
   CHECK(bkend.call_with_return("env", "f64x2.splat", bit_cast<double>(UINT64_C(1)))->to_v128() == make_v128_f64(1u,1u));
   CHECK(bkend.call_with_return("env", "f64x2.splat", bit_cast<double>(UINT64_C(9223372036854775809)))->to_v128() == make_v128_f64(9223372036854775809u,9223372036854775809u));
   CHECK(bkend.call_with_return("env", "f64x2.splat", bit_cast<double>(UINT64_C(4503599627370496)))->to_v128() == make_v128_f64(4503599627370496u,4503599627370496u));
   CHECK(bkend.call_with_return("env", "f64x2.splat", bit_cast<double>(UINT64_C(9227875636482146304)))->to_v128() == make_v128_f64(9227875636482146304u,9227875636482146304u));
   CHECK(bkend.call_with_return("env", "f64x2.splat", bit_cast<double>(UINT64_C(4602678819172646912)))->to_v128() == make_v128_f64(4602678819172646912u,4602678819172646912u));
   CHECK(bkend.call_with_return("env", "f64x2.splat", bit_cast<double>(UINT64_C(13826050856027422720)))->to_v128() == make_v128_f64(13826050856027422720u,13826050856027422720u));
   CHECK(bkend.call_with_return("env", "f64x2.splat", bit_cast<double>(UINT64_C(4607182418800017408)))->to_v128() == make_v128_f64(4607182418800017408u,4607182418800017408u));
   CHECK(bkend.call_with_return("env", "f64x2.splat", bit_cast<double>(UINT64_C(13830554455654793216)))->to_v128() == make_v128_f64(13830554455654793216u,13830554455654793216u));
   CHECK(bkend.call_with_return("env", "f64x2.splat", bit_cast<double>(UINT64_C(4618760256179416344)))->to_v128() == make_v128_f64(4618760256179416344u,4618760256179416344u));
   CHECK(bkend.call_with_return("env", "f64x2.splat", bit_cast<double>(UINT64_C(13842132293034192152)))->to_v128() == make_v128_f64(13842132293034192152u,13842132293034192152u));
   CHECK(bkend.call_with_return("env", "f64x2.splat", bit_cast<double>(UINT64_C(9218868437227405311)))->to_v128() == make_v128_f64(9218868437227405311u,9218868437227405311u));
   CHECK(bkend.call_with_return("env", "f64x2.splat", bit_cast<double>(UINT64_C(18442240474082181119)))->to_v128() == make_v128_f64(18442240474082181119u,18442240474082181119u));
   CHECK(bkend.call_with_return("env", "f64x2.splat", bit_cast<double>(UINT64_C(9218868437227405312)))->to_v128() == make_v128_f64(9218868437227405312u,9218868437227405312u));
   CHECK(bkend.call_with_return("env", "f64x2.splat", bit_cast<double>(UINT64_C(18442240474082181120)))->to_v128() == make_v128_f64(18442240474082181120u,18442240474082181120u));
   CHECK(bkend.call_with_return("env", "f64x2.splat", bit_cast<double>(UINT64_C(9221120237041090560)))->to_v128() == make_v128_f64(9221120237041090560u,9221120237041090560u));
   CHECK(bkend.call_with_return("env", "f64x2.splat", bit_cast<double>(UINT64_C(18444492273895866368)))->to_v128() == make_v128_f64(18444492273895866368u,18444492273895866368u));
   CHECK(bkend.call_with_return("env", "f64x2.splat", bit_cast<double>(UINT64_C(9219994337134247936)))->to_v128() == make_v128_f64(9219994337134247936u,9219994337134247936u));
   CHECK(bkend.call_with_return("env", "f64x2.splat", bit_cast<double>(UINT64_C(18443366373989023744)))->to_v128() == make_v128_f64(18443366373989023744u,18443366373989023744u));
   CHECK(bkend.call_with_return("env", "f64x2.splat", bit_cast<double>(UINT64_C(4728057454347157504)))->to_v128() == make_v128_f64(4728057454347157504u,4728057454347157504u));
   CHECK(bkend.call_with_return("env", "f64x2.splat", bit_cast<double>(UINT64_C(4728057454347157504)))->to_v128() == make_v128_f64(4728057454347157504u,4728057454347157504u));
   CHECK(bkend.call_with_return("env", "f64x2.splat", bit_cast<double>(UINT64_C(4968090884938317023)))->to_v128() == make_v128_f64(4968090884938317023u,4968090884938317023u));
   CHECK(bkend.call_with_return("env", "f64x2.splat", bit_cast<double>(UINT64_C(4968090884938317023)))->to_v128() == make_v128_f64(4968090884938317023u,4968090884938317023u));
   CHECK(bkend.call_with_return("env", "f64x2.splat", bit_cast<double>(UINT64_C(5012481849648092922)))->to_v128() == make_v128_f64(5012481849648092922u,5012481849648092922u));
   CHECK(bkend.call_with_return("env", "f64x2.splat", bit_cast<double>(UINT64_C(5012481849648092922)))->to_v128() == make_v128_f64(5012481849648092922u,5012481849648092922u));
   CHECK(bkend.call_with_return("env", "f64x2.splat", bit_cast<double>(UINT64_C(5053659277858356447)))->to_v128() == make_v128_f64(5053659277858356447u,5053659277858356447u));
   CHECK(bkend.call_with_return("env", "f64x2.splat", bit_cast<double>(UINT64_C(4882522492018277599)))->to_v128() == make_v128_f64(4882522492018277599u,4882522492018277599u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_splat_10_wasm>", "[simd_splat_10_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_splat.10.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_splat_11_wasm>", "[simd_splat_11_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_splat.11.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_splat_12_wasm>", "[simd_splat_12_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_splat.12.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_splat_13_wasm>", "[simd_splat_13_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_splat.13.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_splat_14_wasm>", "[simd_splat_14_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_splat.14.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_splat_15_wasm>", "[simd_splat_15_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_splat.15.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_splat_16_wasm>", "[simd_splat_16_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_splat.16.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_splat_17_wasm>", "[simd_splat_17_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_splat.17.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_splat_18_wasm>", "[simd_splat_18_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_splat.18.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "as-v128_store-operand-1", UINT32_C(1))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "as-v128_store-operand-2", UINT32_C(256))->to_v128() == make_v128_i16(256u,256u,256u,256u,256u,256u,256u,256u));
   CHECK(bkend.call_with_return("env", "as-v128_store-operand-3", UINT32_C(4294967295))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "as-v128_store-operand-4", UINT64_C(1))->to_v128() == make_v128_i64(1u,1u));
   CHECK(bkend.call_with_return("env", "as-v128_store-operand-5", bit_cast<double>(UINT64_C(13830554455654793216)))->to_v128() == make_v128_f64(13830554455654793216u,13830554455654793216u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_splat_19_wasm>", "[simd_splat_19_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_splat.19.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "as-i8x16_extract_lane_s-operand-first", UINT32_C(42))->to_ui32() == UINT32_C(42));
   CHECK(bkend.call_with_return("env", "as-i8x16_extract_lane_s-operand-last", UINT32_C(4294967254))->to_ui32() == UINT32_C(4294967254));
   CHECK(bkend.call_with_return("env", "as-i16x8_extract_lane_s-operand-first", UINT32_C(4294934527))->to_ui32() == UINT32_C(32767));
   CHECK(bkend.call_with_return("env", "as-i16x8_extract_lane_s-operand-last", UINT32_C(32768))->to_ui32() == UINT32_C(4294934528));
   CHECK(bkend.call_with_return("env", "as-i32x4_extract_lane_s-operand-first", UINT32_C(2147483647))->to_ui32() == UINT32_C(2147483647));
   CHECK(bkend.call_with_return("env", "as-i32x4_extract_lane_s-operand-last", UINT32_C(2147483648))->to_ui32() == UINT32_C(2147483648));
   CHECK(bit_cast<uint32_t>(bkend.call_with_return("env", "as-f32x4_extract_lane_s-operand-first", bit_cast<float>(UINT32_C(1069547520)))->to_f32()) == UINT32_C(1069547520));
   CHECK(bit_cast<uint32_t>(bkend.call_with_return("env", "as-f32x4_extract_lane_s-operand-last", bit_cast<float>(UINT32_C(3196059648)))->to_f32()) == UINT32_C(3196059648));
   CHECK(bkend.call_with_return("env", "as-v8x16_swizzle-operands", UINT32_C(1), UINT32_C(4294967295))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "as-i64x2_extract_lane-operand-last", UINT64_C(18446744073709551574))->to_ui64() == UINT64_C(18446744073709551574));
   CHECK(bkend.call_with_return("env", "as-i64x2_extract_lane-operand-first", UINT64_C(42))->to_ui64() == UINT64_C(42));
   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "as-f64x2_extract_lane-operand-first", bit_cast<double>(UINT64_C(4609434218613702656)))->to_f64()) == UINT64_C(4609434218613702656));
   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "as-f64x2_extract_lane-operand-last", bit_cast<double>(UINT64_C(13830554455654793216)))->to_f64()) == UINT64_C(13830554455654793216));
   CHECK(bkend.call_with_return("env", "as-i8x16_add_sub-operands", UINT32_C(3), UINT32_C(2), UINT32_C(1))->to_v128() == make_v128_i8(4u,4u,4u,4u,4u,4u,4u,4u,4u,4u,4u,4u,4u,4u,4u,4u));
   CHECK(bkend.call_with_return("env", "as-i16x8_add_sub_mul-operands", UINT32_C(257), UINT32_C(128), UINT32_C(16), UINT32_C(16))->to_v128() == make_v128_i16(129u,129u,129u,129u,129u,129u,129u,129u));
   CHECK(bkend.call_with_return("env", "as-i32x4_add_sub_mul-operands", UINT32_C(65535), UINT32_C(65537), UINT32_C(256), UINT32_C(256))->to_v128() == make_v128_i32(65536u,65536u,65536u,65536u));
   CHECK(bkend.call_with_return("env", "as-i64x2_add_sub_mul-operands", UINT64_C(2147483647), UINT64_C(4294967297), UINT64_C(65536), UINT64_C(65536))->to_v128() == make_v128_i64(2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "as-f64x2_add_sub_mul-operands", bit_cast<double>(UINT64_C(4602678819172646912)), bit_cast<double>(UINT64_C(4604930618986332160)), bit_cast<double>(UINT64_C(4602678819172646912)), bit_cast<double>(UINT64_C(4602678819172646912)))->to_v128() == make_v128_f64(4607182418800017408u,4607182418800017408u));
   CHECK(bkend.call_with_return("env", "as-i8x16_add_sat_s-operands", UINT32_C(127), UINT32_C(1))->to_v128() == make_v128_i8(127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u));
   CHECK(bkend.call_with_return("env", "as-i16x8_add_sat_s-operands", UINT32_C(32767), UINT32_C(1))->to_v128() == make_v128_i16(32767u,32767u,32767u,32767u,32767u,32767u,32767u,32767u));
   CHECK(bkend.call_with_return("env", "as-i8x16_sub_sat_u-operands", UINT32_C(127), UINT32_C(255))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "as-i16x8_sub_sat_u-operands", UINT32_C(32767), UINT32_C(65535))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "as-i8x16_shr_s-operand", UINT32_C(240), UINT32_C(3))->to_v128() == make_v128_i8(254u,254u,254u,254u,254u,254u,254u,254u,254u,254u,254u,254u,254u,254u,254u,254u));
   CHECK(bkend.call_with_return("env", "as-i16x8_shr_s-operand", UINT32_C(256), UINT32_C(4))->to_v128() == make_v128_i16(16u,16u,16u,16u,16u,16u,16u,16u));
   CHECK(bkend.call_with_return("env", "as-i32x4_shr_s-operand", UINT32_C(4294967295), UINT32_C(16))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "as-v128_and-operands", UINT32_C(17), UINT32_C(255))->to_v128() == make_v128_i8(17u,17u,17u,17u,17u,17u,17u,17u,17u,17u,17u,17u,17u,17u,17u,17u));
   CHECK(bkend.call_with_return("env", "as-v128_or-operands", UINT32_C(0), UINT32_C(65535))->to_v128() == make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u));
   CHECK(bkend.call_with_return("env", "as-v128_xor-operands", UINT32_C(4042322160), UINT32_C(4294967295))->to_v128() == make_v128_i32(252645135u,252645135u,252645135u,252645135u));
   CHECK(bkend.call_with_return("env", "as-i8x16_all_true-operand", UINT32_C(0))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "as-i16x8_all_true-operand", UINT32_C(65535))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "as-i32x4_all_true-operand1", UINT32_C(4042322160))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "as-i32x4_all_true-operand2", UINT64_C(18446744073709551615))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "as-i8x16_eq-operands", UINT32_C(1), UINT32_C(2))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "as-i16x8_eq-operands", UINT32_C(4294967295), UINT32_C(65535))->to_v128() == make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u));
   CHECK(bkend.call_with_return("env", "as-i32x4_eq-operands1", UINT32_C(4294967295), UINT32_C(4294967295))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "as-f32x4_eq-operands", bit_cast<float>(UINT32_C(0)), bit_cast<float>(UINT32_C(2147483648)))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "as-i32x4_eq-operands2", UINT64_C(1), UINT64_C(2))->to_v128() == make_v128_i64(18446744069414584320u,18446744069414584320u));
   CHECK(bkend.call_with_return("env", "as-f64x2_eq-operands", bit_cast<double>(UINT64_C(0)), bit_cast<double>(UINT64_C(9223372036854775808)))->to_v128() == make_v128_i64(18446744073709551615u,18446744073709551615u));
   CHECK(bkend.call_with_return("env", "as-f32x4_abs-operand", bit_cast<float>(UINT32_C(3213885440)))->to_v128() == make_v128_f32(1066401792u,1066401792u,1066401792u,1066401792u));
   CHECK(bkend.call_with_return("env", "as-f32x4_min-operands", bit_cast<float>(UINT32_C(1048576000)), bit_cast<float>(UINT32_C(7136238)))->to_v128() == make_v128_f32(7136238u,7136238u,7136238u,7136238u));
   CHECK(bkend.call_with_return("env", "as-f32x4_div-operands", bit_cast<float>(UINT32_C(1065353216)), bit_cast<float>(UINT32_C(1090519040)))->to_v128() == make_v128_f32(1040187392u,1040187392u,1040187392u,1040187392u));
   CHECK(bkend.call_with_return("env", "as-f32x4_convert_s_i32x4-operand", UINT32_C(12345))->to_v128() == make_v128_f32(1178657792u,1178657792u,1178657792u,1178657792u));
   CHECK(bkend.call_with_return("env", "as-i32x4_trunc_s_f32x4_sat-operand", bit_cast<float>(UINT32_C(1066192077)))->to_v128() == make_v128_i32(1u,1u,1u,1u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_splat_2_wasm>", "[simd_splat_2_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_splat.2.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_splat_20_wasm>", "[simd_splat_20_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_splat.20.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "as-br-value1", UINT32_C(171))->to_v128() == make_v128_i8(171u,171u,171u,171u,171u,171u,171u,171u,171u,171u,171u,171u,171u,171u,171u,171u));
   CHECK(bkend.call_with_return("env", "as-return-value1", UINT32_C(43981))->to_v128() == make_v128_i16(43981u,43981u,43981u,43981u,43981u,43981u,43981u,43981u));
   CHECK(bkend.call_with_return("env", "as-local_set-value1", UINT32_C(65536))->to_v128() == make_v128_i32(65536u,65536u,65536u,65536u));
   CHECK(bkend.call_with_return("env", "as-global_set-value1", bit_cast<float>(UINT32_C(1065353216)))->to_v128() == make_v128_f32(1065353216u,1065353216u,1065353216u,1065353216u));
   CHECK(bkend.call_with_return("env", "as-br-value2", UINT64_C(43981))->to_v128() == make_v128_i64(43981u,43981u));
   CHECK(bkend.call_with_return("env", "as-return-value2", UINT64_C(43981))->to_v128() == make_v128_i64(43981u,43981u));
   CHECK(bkend.call_with_return("env", "as-local_set-value2", UINT64_C(65536))->to_v128() == make_v128_i64(65536u,65536u));
   CHECK(bkend.call_with_return("env", "as-global_set-value2", bit_cast<double>(UINT64_C(4607182418800017408)))->to_v128() == make_v128_f64(4607182418800017408u,4607182418800017408u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_splat_21_wasm>", "[simd_splat_21_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_splat.21.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_splat_22_wasm>", "[simd_splat_22_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_splat.22.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_splat_23_wasm>", "[simd_splat_23_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_splat.23.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_splat_24_wasm>", "[simd_splat_24_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_splat.24.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_splat_25_wasm>", "[simd_splat_25_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_splat.25.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_splat_26_wasm>", "[simd_splat_26_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_splat.26.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_splat_3_wasm>", "[simd_splat_3_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_splat.3.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_splat_4_wasm>", "[simd_splat_4_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_splat.4.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_splat_5_wasm>", "[simd_splat_5_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_splat.5.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_splat_6_wasm>", "[simd_splat_6_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_splat.6.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_splat_7_wasm>", "[simd_splat_7_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_splat.7.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_splat_8_wasm>", "[simd_splat_8_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_splat.8.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_splat_9_wasm>", "[simd_splat_9_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_splat.9.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

