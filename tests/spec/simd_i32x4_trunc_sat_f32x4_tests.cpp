// Generated by spec_test_generator.  DO NOT MODIFY THIS FILE.

#include <algorithm>
#include <vector>
#include <iostream>
#include <iterator>
#include <cmath>
#include <cstdlib>
#include <catch2/catch.hpp>
#include <utils.hpp>
#include <wasm_config.hpp>
#include <eosio/vm/backend.hpp>

using namespace eosio;
using namespace eosio::vm;
extern wasm_allocator wa;

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_trunc_sat_f32x4_0_wasm>", "[simd_i32x4_trunc_sat_f32x4_0_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_trunc_sat_f32x4.0.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(0,0,0,0))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(2147483648,2147483648,2147483648,2147483648))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1069547520,1069547520,1069547520,1069547520))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(3217031168,3217031168,3217031168,3217031168))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1072902963,1072902963,1072902963,1072902963))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1073741824,1073741824,1073741824,1073741824))->to_v128() == make_v128_i32(2u,2u,2u,2u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(3220386611,3220386611,3220386611,3220386611))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(3221225472,3221225472,3221225472,3221225472))->to_v128() == make_v128_i32(4294967294u,4294967294u,4294967294u,4294967294u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1325400063,1325400063,1325400063,1325400063))->to_v128() == make_v128_i32(2147483520u,2147483520u,2147483520u,2147483520u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(3472883711,3472883711,3472883711,3472883711))->to_v128() == make_v128_i32(2147483776u,2147483776u,2147483776u,2147483776u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1325400064,1325400064,1325400064,1325400064))->to_v128() == make_v128_i32(2147483647u,2147483647u,2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(3472883712,3472883712,3472883712,3472883712))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1333788672,1333788672,1333788672,1333788672))->to_v128() == make_v128_i32(2147483647u,2147483647u,2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(3481272320,3481272320,3481272320,3481272320))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1325400064,1325400064,1325400064,1325400064))->to_v128() == make_v128_i32(2147483647u,2147483647u,2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(3472883712,3472883712,3472883712,3472883712))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1333788672,1333788672,1333788672,1333788672))->to_v128() == make_v128_i32(2147483647u,2147483647u,2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1333788672,1333788672,1333788672,1333788672))->to_v128() == make_v128_i32(2147483647u,2147483647u,2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1333788672,1333788672,1333788672,1333788672))->to_v128() == make_v128_i32(2147483647u,2147483647u,2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1,1,1,1))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(2147483649,2147483649,2147483649,2147483649))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(8388608,8388608,8388608,8388608))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(2155872256,2155872256,2155872256,2155872256))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1056964608,1056964608,1056964608,1056964608))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(3204448256,3204448256,3204448256,3204448256))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1065353216,1065353216,1065353216,1065353216))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(3212836864,3212836864,3212836864,3212836864))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1066192077,1066192077,1066192077,1066192077))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(3213675725,3213675725,3213675725,3213675725))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1086918619,1086918619,1086918619,1086918619))->to_v128() == make_v128_i32(6u,6u,6u,6u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(3234402267,3234402267,3234402267,3234402267))->to_v128() == make_v128_i32(4294967290u,4294967290u,4294967290u,4294967290u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(2139095039,2139095039,2139095039,2139095039))->to_v128() == make_v128_i32(2147483647u,2147483647u,2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(4286578687,4286578687,4286578687,4286578687))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1063675494,1063675494,1063675494,1063675494))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(3211159142,3211159142,3211159142,3211159142))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1065353215,1065353215,1065353215,1065353215))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(3212836863,3212836863,3212836863,3212836863))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1086918619,1086918619,1086918619,1086918619))->to_v128() == make_v128_i32(6u,6u,6u,6u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(3234402267,3234402267,3234402267,3234402267))->to_v128() == make_v128_i32(4294967290u,4294967290u,4294967290u,4294967290u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(2139095039,2139095039,2139095039,2139095039))->to_v128() == make_v128_i32(2147483647u,2147483647u,2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(4286578687,4286578687,4286578687,4286578687))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(2139095040,2139095040,2139095040,2139095040))->to_v128() == make_v128_i32(2147483647u,2147483647u,2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(4286578688,4286578688,4286578688,4286578688))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(2143289344,2143289344,2143289344,2143289344))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(4290772992,4290772992,4290772992,4290772992))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(2143568964,2143568964,2143568964,2143568964))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(4291052612,4291052612,4291052612,4291052612))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1109917696,1109917696,1109917696,1109917696))->to_v128() == make_v128_i32(42u,42u,42u,42u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(3257401344,3257401344,3257401344,3257401344))->to_v128() == make_v128_i32(4294967254u,4294967254u,4294967254u,4294967254u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1290500515,1290500515,1290500515,1290500515))->to_v128() == make_v128_i32(123456792u,123456792u,123456792u,123456792u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1318267910,1318267910,1318267910,1318267910))->to_v128() == make_v128_i32(1234567936u,1234567936u,1234567936u,1234567936u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(0,0,0,0))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(2147483648,2147483648,2147483648,2147483648))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1069547520,1069547520,1069547520,1069547520))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(3217031168,3217031168,3217031168,3217031168))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1072902963,1072902963,1072902963,1072902963))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1073741824,1073741824,1073741824,1073741824))->to_v128() == make_v128_i32(2u,2u,2u,2u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(3220386611,3220386611,3220386611,3220386611))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(3221225472,3221225472,3221225472,3221225472))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1325400063,1325400063,1325400063,1325400063))->to_v128() == make_v128_i32(2147483520u,2147483520u,2147483520u,2147483520u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(3472883711,3472883711,3472883711,3472883711))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1325400064,1325400064,1325400064,1325400064))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(3472883712,3472883712,3472883712,3472883712))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1333788672,1333788672,1333788672,1333788672))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(3481272320,3481272320,3481272320,3481272320))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1325400064,1325400064,1325400064,1325400064))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(3472883712,3472883712,3472883712,3472883712))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1333788672,1333788672,1333788672,1333788672))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1333788672,1333788672,1333788672,1333788672))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1333788672,1333788672,1333788672,1333788672))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1,1,1,1))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(2147483649,2147483649,2147483649,2147483649))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(8388608,8388608,8388608,8388608))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(2155872256,2155872256,2155872256,2155872256))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1056964608,1056964608,1056964608,1056964608))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(3204448256,3204448256,3204448256,3204448256))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1065353216,1065353216,1065353216,1065353216))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(3212836864,3212836864,3212836864,3212836864))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1066192077,1066192077,1066192077,1066192077))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(3213675725,3213675725,3213675725,3213675725))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1086918619,1086918619,1086918619,1086918619))->to_v128() == make_v128_i32(6u,6u,6u,6u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(3234402267,3234402267,3234402267,3234402267))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(2139095039,2139095039,2139095039,2139095039))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(4286578687,4286578687,4286578687,4286578687))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1063675494,1063675494,1063675494,1063675494))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(3211159142,3211159142,3211159142,3211159142))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1065353215,1065353215,1065353215,1065353215))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(3212836863,3212836863,3212836863,3212836863))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1086918619,1086918619,1086918619,1086918619))->to_v128() == make_v128_i32(6u,6u,6u,6u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(3234402267,3234402267,3234402267,3234402267))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(2139095039,2139095039,2139095039,2139095039))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(4286578687,4286578687,4286578687,4286578687))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(2139095040,2139095040,2139095040,2139095040))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(4286578688,4286578688,4286578688,4286578688))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(2143289344,2143289344,2143289344,2143289344))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(4290772992,4290772992,4290772992,4290772992))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(2143568964,2143568964,2143568964,2143568964))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(4291052612,4291052612,4291052612,4291052612))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1109917696,1109917696,1109917696,1109917696))->to_v128() == make_v128_i32(42u,42u,42u,42u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(3257401344,3257401344,3257401344,3257401344))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1290500515,1290500515,1290500515,1290500515))->to_v128() == make_v128_i32(123456792u,123456792u,123456792u,123456792u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1318267910,1318267910,1318267910,1318267910))->to_v128() == make_v128_i32(1234567936u,1234567936u,1234567936u,1234567936u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_trunc_sat_f32x4_1_wasm>", "[simd_i32x4_trunc_sat_f32x4_1_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_trunc_sat_f32x4.1.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_trunc_sat_f32x4_2_wasm>", "[simd_i32x4_trunc_sat_f32x4_2_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_trunc_sat_f32x4.2.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_trunc_sat_f32x4_3_wasm>", "[simd_i32x4_trunc_sat_f32x4_3_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_trunc_sat_f32x4.3.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_trunc_sat_f32x4_4_wasm>", "[simd_i32x4_trunc_sat_f32x4_4_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_trunc_sat_f32x4.4.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

