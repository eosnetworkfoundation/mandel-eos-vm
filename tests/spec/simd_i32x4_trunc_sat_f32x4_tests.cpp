// Generated by spec_test_generator.  DO NOT MODIFY THIS FILE.

#include <algorithm>
#include <vector>
#include <iostream>
#include <iterator>
#include <cmath>
#include <cstdlib>
#include <catch2/catch.hpp>
#include <utils.hpp>
#include <wasm_config.hpp>
#include <eosio/vm/backend.hpp>

using namespace eosio;
using namespace eosio::vm;
extern wasm_allocator wa;

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_trunc_sat_f32x4_0_wasm>", "[simd_i32x4_trunc_sat_f32x4_0_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_trunc_sat_f32x4.0.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(0u,0u,0u,0u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(2147483648u,2147483648u,2147483648u,2147483648u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1069547520u,1069547520u,1069547520u,1069547520u))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(3217031168u,3217031168u,3217031168u,3217031168u))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1072902963u,1072902963u,1072902963u,1072902963u))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1073741824u,1073741824u,1073741824u,1073741824u))->to_v128() == make_v128_i32(2u,2u,2u,2u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(3220386611u,3220386611u,3220386611u,3220386611u))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(3221225472u,3221225472u,3221225472u,3221225472u))->to_v128() == make_v128_i32(4294967294u,4294967294u,4294967294u,4294967294u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1325400063u,1325400063u,1325400063u,1325400063u))->to_v128() == make_v128_i32(2147483520u,2147483520u,2147483520u,2147483520u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(3472883711u,3472883711u,3472883711u,3472883711u))->to_v128() == make_v128_i32(2147483776u,2147483776u,2147483776u,2147483776u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1325400064u,1325400064u,1325400064u,1325400064u))->to_v128() == make_v128_i32(2147483647u,2147483647u,2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(3472883712u,3472883712u,3472883712u,3472883712u))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1333788672u,1333788672u,1333788672u,1333788672u))->to_v128() == make_v128_i32(2147483647u,2147483647u,2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(3481272320u,3481272320u,3481272320u,3481272320u))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1325400064u,1325400064u,1325400064u,1325400064u))->to_v128() == make_v128_i32(2147483647u,2147483647u,2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(3472883712u,3472883712u,3472883712u,3472883712u))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1333788672u,1333788672u,1333788672u,1333788672u))->to_v128() == make_v128_i32(2147483647u,2147483647u,2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1333788672u,1333788672u,1333788672u,1333788672u))->to_v128() == make_v128_i32(2147483647u,2147483647u,2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1333788672u,1333788672u,1333788672u,1333788672u))->to_v128() == make_v128_i32(2147483647u,2147483647u,2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1u,1u,1u,1u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(2147483649u,2147483649u,2147483649u,2147483649u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(8388608u,8388608u,8388608u,8388608u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(2155872256u,2155872256u,2155872256u,2155872256u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1056964608u,1056964608u,1056964608u,1056964608u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(3204448256u,3204448256u,3204448256u,3204448256u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1065353216u,1065353216u,1065353216u,1065353216u))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(3212836864u,3212836864u,3212836864u,3212836864u))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1066192077u,1066192077u,1066192077u,1066192077u))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(3213675725u,3213675725u,3213675725u,3213675725u))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1086918619u,1086918619u,1086918619u,1086918619u))->to_v128() == make_v128_i32(6u,6u,6u,6u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(3234402267u,3234402267u,3234402267u,3234402267u))->to_v128() == make_v128_i32(4294967290u,4294967290u,4294967290u,4294967290u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(2139095039u,2139095039u,2139095039u,2139095039u))->to_v128() == make_v128_i32(2147483647u,2147483647u,2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(4286578687u,4286578687u,4286578687u,4286578687u))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1063675494u,1063675494u,1063675494u,1063675494u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(3211159142u,3211159142u,3211159142u,3211159142u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1065353215u,1065353215u,1065353215u,1065353215u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(3212836863u,3212836863u,3212836863u,3212836863u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1086918619u,1086918619u,1086918619u,1086918619u))->to_v128() == make_v128_i32(6u,6u,6u,6u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(3234402267u,3234402267u,3234402267u,3234402267u))->to_v128() == make_v128_i32(4294967290u,4294967290u,4294967290u,4294967290u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(2139095039u,2139095039u,2139095039u,2139095039u))->to_v128() == make_v128_i32(2147483647u,2147483647u,2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(4286578687u,4286578687u,4286578687u,4286578687u))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(2139095040u,2139095040u,2139095040u,2139095040u))->to_v128() == make_v128_i32(2147483647u,2147483647u,2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(4286578688u,4286578688u,4286578688u,4286578688u))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(2143289344u,2143289344u,2143289344u,2143289344u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(4290772992u,4290772992u,4290772992u,4290772992u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(2143568964u,2143568964u,2143568964u,2143568964u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(4291052612u,4291052612u,4291052612u,4291052612u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1109917696u,1109917696u,1109917696u,1109917696u))->to_v128() == make_v128_i32(42u,42u,42u,42u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(3257401344u,3257401344u,3257401344u,3257401344u))->to_v128() == make_v128_i32(4294967254u,4294967254u,4294967254u,4294967254u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1290500515u,1290500515u,1290500515u,1290500515u))->to_v128() == make_v128_i32(123456792u,123456792u,123456792u,123456792u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_s", make_v128_f32(1318267910u,1318267910u,1318267910u,1318267910u))->to_v128() == make_v128_i32(1234567936u,1234567936u,1234567936u,1234567936u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(0u,0u,0u,0u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(2147483648u,2147483648u,2147483648u,2147483648u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1069547520u,1069547520u,1069547520u,1069547520u))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(3217031168u,3217031168u,3217031168u,3217031168u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1072902963u,1072902963u,1072902963u,1072902963u))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1073741824u,1073741824u,1073741824u,1073741824u))->to_v128() == make_v128_i32(2u,2u,2u,2u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(3220386611u,3220386611u,3220386611u,3220386611u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(3221225472u,3221225472u,3221225472u,3221225472u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1325400063u,1325400063u,1325400063u,1325400063u))->to_v128() == make_v128_i32(2147483520u,2147483520u,2147483520u,2147483520u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(3472883711u,3472883711u,3472883711u,3472883711u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1325400064u,1325400064u,1325400064u,1325400064u))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(3472883712u,3472883712u,3472883712u,3472883712u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1333788672u,1333788672u,1333788672u,1333788672u))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(3481272320u,3481272320u,3481272320u,3481272320u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1325400064u,1325400064u,1325400064u,1325400064u))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(3472883712u,3472883712u,3472883712u,3472883712u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1333788672u,1333788672u,1333788672u,1333788672u))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1333788672u,1333788672u,1333788672u,1333788672u))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1333788672u,1333788672u,1333788672u,1333788672u))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1u,1u,1u,1u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(2147483649u,2147483649u,2147483649u,2147483649u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(8388608u,8388608u,8388608u,8388608u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(2155872256u,2155872256u,2155872256u,2155872256u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1056964608u,1056964608u,1056964608u,1056964608u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(3204448256u,3204448256u,3204448256u,3204448256u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1065353216u,1065353216u,1065353216u,1065353216u))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(3212836864u,3212836864u,3212836864u,3212836864u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1066192077u,1066192077u,1066192077u,1066192077u))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(3213675725u,3213675725u,3213675725u,3213675725u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1086918619u,1086918619u,1086918619u,1086918619u))->to_v128() == make_v128_i32(6u,6u,6u,6u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(3234402267u,3234402267u,3234402267u,3234402267u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(2139095039u,2139095039u,2139095039u,2139095039u))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(4286578687u,4286578687u,4286578687u,4286578687u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1063675494u,1063675494u,1063675494u,1063675494u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(3211159142u,3211159142u,3211159142u,3211159142u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1065353215u,1065353215u,1065353215u,1065353215u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(3212836863u,3212836863u,3212836863u,3212836863u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1086918619u,1086918619u,1086918619u,1086918619u))->to_v128() == make_v128_i32(6u,6u,6u,6u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(3234402267u,3234402267u,3234402267u,3234402267u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(2139095039u,2139095039u,2139095039u,2139095039u))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(4286578687u,4286578687u,4286578687u,4286578687u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(2139095040u,2139095040u,2139095040u,2139095040u))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(4286578688u,4286578688u,4286578688u,4286578688u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(2143289344u,2143289344u,2143289344u,2143289344u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(4290772992u,4290772992u,4290772992u,4290772992u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(2143568964u,2143568964u,2143568964u,2143568964u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(4291052612u,4291052612u,4291052612u,4291052612u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1109917696u,1109917696u,1109917696u,1109917696u))->to_v128() == make_v128_i32(42u,42u,42u,42u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(3257401344u,3257401344u,3257401344u,3257401344u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1290500515u,1290500515u,1290500515u,1290500515u))->to_v128() == make_v128_i32(123456792u,123456792u,123456792u,123456792u));
   CHECK(bkend.call_with_return("env", "i32x4.trunc_sat_f32x4_u", make_v128_f32(1318267910u,1318267910u,1318267910u,1318267910u))->to_v128() == make_v128_i32(1234567936u,1234567936u,1234567936u,1234567936u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_trunc_sat_f32x4_1_wasm>", "[simd_i32x4_trunc_sat_f32x4_1_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_trunc_sat_f32x4.1.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_trunc_sat_f32x4_2_wasm>", "[simd_i32x4_trunc_sat_f32x4_2_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_trunc_sat_f32x4.2.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_trunc_sat_f32x4_3_wasm>", "[simd_i32x4_trunc_sat_f32x4_3_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_trunc_sat_f32x4.3.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_trunc_sat_f32x4_4_wasm>", "[simd_i32x4_trunc_sat_f32x4_4_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_trunc_sat_f32x4.4.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

