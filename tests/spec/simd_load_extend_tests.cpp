// Generated by spec_test_generator.  DO NOT MODIFY THIS FILE.

#include <algorithm>
#include <vector>
#include <iostream>
#include <iterator>
#include <cmath>
#include <cstdlib>
#include <catch2/catch.hpp>
#include <utils.hpp>
#include <wasm_config.hpp>
#include <eosio/vm/backend.hpp>

using namespace eosio;
using namespace eosio::vm;
extern wasm_allocator wa;

BACKEND_TEST_CASE( "Testing wasm <simd_load_extend_0_wasm>", "[simd_load_extend_0_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load_extend.0.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "v128.load8x8_s", UINT32_C(0))->to_v128() == make_v128_i16(0u,1u,2u,3u,4u,5u,6u,7u));
   CHECK(bkend.call_with_return("env", "v128.load8x8_u", UINT32_C(0))->to_v128() == make_v128_i16(0u,1u,2u,3u,4u,5u,6u,7u));
   CHECK(bkend.call_with_return("env", "v128.load16x4_s", UINT32_C(0))->to_v128() == make_v128_i32(256u,770u,1284u,1798u));
   CHECK(bkend.call_with_return("env", "v128.load16x4_u", UINT32_C(0))->to_v128() == make_v128_i32(256u,770u,1284u,1798u));
   CHECK(bkend.call_with_return("env", "v128.load32x2_s", UINT32_C(0))->to_v128() == make_v128_i64(50462976u,117835012u));
   CHECK(bkend.call_with_return("env", "v128.load32x2_u", UINT32_C(0))->to_v128() == make_v128_i64(50462976u,117835012u));
   CHECK(bkend.call_with_return("env", "v128.load8x8_s", UINT32_C(10))->to_v128() == make_v128_i16(10u,11u,12u,13u,14u,15u,65408u,65409u));
   CHECK(bkend.call_with_return("env", "v128.load8x8_u", UINT32_C(10))->to_v128() == make_v128_i16(10u,11u,12u,13u,14u,15u,128u,129u));
   CHECK(bkend.call_with_return("env", "v128.load16x4_s", UINT32_C(10))->to_v128() == make_v128_i32(2826u,3340u,3854u,4294934912u));
   CHECK(bkend.call_with_return("env", "v128.load16x4_u", UINT32_C(10))->to_v128() == make_v128_i32(2826u,3340u,3854u,33152u));
   CHECK(bkend.call_with_return("env", "v128.load32x2_s", UINT32_C(10))->to_v128() == make_v128_i64(218893066u,18446744071587237646u));
   CHECK(bkend.call_with_return("env", "v128.load32x2_u", UINT32_C(10))->to_v128() == make_v128_i64(218893066u,2172653326u));
   CHECK(bkend.call_with_return("env", "v128.load8x8_s", UINT32_C(20))->to_v128() == make_v128_i16(65412u,65413u,65414u,65415u,65416u,65417u,0u,0u));
   CHECK(bkend.call_with_return("env", "v128.load8x8_u", UINT32_C(20))->to_v128() == make_v128_i16(132u,133u,134u,135u,136u,137u,0u,0u));
   CHECK(bkend.call_with_return("env", "v128.load16x4_s", UINT32_C(20))->to_v128() == make_v128_i32(4294935940u,4294936454u,4294936968u,0u));
   CHECK(bkend.call_with_return("env", "v128.load16x4_u", UINT32_C(20))->to_v128() == make_v128_i32(34180u,34694u,35208u,0u));
   CHECK(bkend.call_with_return("env", "v128.load32x2_s", UINT32_C(20))->to_v128() == make_v128_i64(18446744071688324484u,35208u));
   CHECK(bkend.call_with_return("env", "v128.load32x2_u", UINT32_C(20))->to_v128() == make_v128_i64(2273740164u,35208u));
   CHECK(bkend.call_with_return("env", "v128.load8x8_s_const0")->to_v128() == make_v128_i16(0u,1u,2u,3u,4u,5u,6u,7u));
   CHECK(bkend.call_with_return("env", "v128.load8x8_u_const8")->to_v128() == make_v128_i16(8u,9u,10u,11u,12u,13u,14u,15u));
   CHECK(bkend.call_with_return("env", "v128.load16x4_s_const10")->to_v128() == make_v128_i32(2826u,3340u,3854u,4294934912u));
   CHECK(bkend.call_with_return("env", "v128.load16x4_u_const20")->to_v128() == make_v128_i32(34180u,34694u,35208u,0u));
   CHECK(bkend.call_with_return("env", "v128.load32x2_s_const65520")->to_v128() == make_v128_i64(218893066u,18446744071587237646u));
   CHECK(bkend.call_with_return("env", "v128.load32x2_u_const65526")->to_v128() == make_v128_i64(2206368128u,2273740164u));
   CHECK(bkend.call_with_return("env", "v128.load8x8_s_offset0", UINT32_C(0))->to_v128() == make_v128_i16(0u,1u,2u,3u,4u,5u,6u,7u));
   CHECK(bkend.call_with_return("env", "v128.load8x8_s_align1", UINT32_C(1))->to_v128() == make_v128_i16(1u,2u,3u,4u,5u,6u,7u,8u));
   CHECK(bkend.call_with_return("env", "v128.load8x8_s_offset0_align1", UINT32_C(2))->to_v128() == make_v128_i16(2u,3u,4u,5u,6u,7u,8u,9u));
   CHECK(bkend.call_with_return("env", "v128.load8x8_s_offset10_align4", UINT32_C(3))->to_v128() == make_v128_i16(13u,14u,15u,65408u,65409u,65410u,65411u,65412u));
   CHECK(bkend.call_with_return("env", "v128.load8x8_s_offset20_align8", UINT32_C(4))->to_v128() == make_v128_i16(65416u,65417u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "v128.load8x8_u_offset0", UINT32_C(0))->to_v128() == make_v128_i16(0u,1u,2u,3u,4u,5u,6u,7u));
   CHECK(bkend.call_with_return("env", "v128.load8x8_u_align1", UINT32_C(1))->to_v128() == make_v128_i16(1u,2u,3u,4u,5u,6u,7u,8u));
   CHECK(bkend.call_with_return("env", "v128.load8x8_u_offset0_align1", UINT32_C(2))->to_v128() == make_v128_i16(2u,3u,4u,5u,6u,7u,8u,9u));
   CHECK(bkend.call_with_return("env", "v128.load8x8_u_offset10_align4", UINT32_C(3))->to_v128() == make_v128_i16(13u,14u,15u,128u,129u,130u,131u,132u));
   CHECK(bkend.call_with_return("env", "v128.load8x8_u_offset20_align8", UINT32_C(4))->to_v128() == make_v128_i16(136u,137u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "v128.load16x4_s_offset0", UINT32_C(0))->to_v128() == make_v128_i32(256u,770u,1284u,1798u));
   CHECK(bkend.call_with_return("env", "v128.load16x4_s_align1", UINT32_C(1))->to_v128() == make_v128_i32(513u,1027u,1541u,2055u));
   CHECK(bkend.call_with_return("env", "v128.load16x4_s_offset0_align1", UINT32_C(2))->to_v128() == make_v128_i32(770u,1284u,1798u,2312u));
   CHECK(bkend.call_with_return("env", "v128.load16x4_s_offset10_align4", UINT32_C(3))->to_v128() == make_v128_i32(3597u,4294934543u,4294935169u,4294935683u));
   CHECK(bkend.call_with_return("env", "v128.load16x4_s_offset20_align8", UINT32_C(4))->to_v128() == make_v128_i32(4294936968u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "v128.load16x4_u_offset0", UINT32_C(0))->to_v128() == make_v128_i32(256u,770u,1284u,1798u));
   CHECK(bkend.call_with_return("env", "v128.load16x4_u_align1", UINT32_C(1))->to_v128() == make_v128_i32(513u,1027u,1541u,2055u));
   CHECK(bkend.call_with_return("env", "v128.load16x4_u_offset0_align1", UINT32_C(2))->to_v128() == make_v128_i32(770u,1284u,1798u,2312u));
   CHECK(bkend.call_with_return("env", "v128.load16x4_u_offset10_align4", UINT32_C(3))->to_v128() == make_v128_i32(3597u,32783u,33409u,33923u));
   CHECK(bkend.call_with_return("env", "v128.load16x4_u_offset20_align8", UINT32_C(4))->to_v128() == make_v128_i32(35208u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "v128.load32x2_s_offset0", UINT32_C(0))->to_v128() == make_v128_i64(50462976u,117835012u));
   CHECK(bkend.call_with_return("env", "v128.load32x2_s_align1", UINT32_C(1))->to_v128() == make_v128_i64(67305985u,134678021u));
   CHECK(bkend.call_with_return("env", "v128.load32x2_s_offset0_align1", UINT32_C(2))->to_v128() == make_v128_i64(84148994u,151521030u));
   CHECK(bkend.call_with_return("env", "v128.load32x2_s_offset10_align4", UINT32_C(3))->to_v128() == make_v128_i64(18446744071563054605u,18446744071637795457u));
   CHECK(bkend.call_with_return("env", "v128.load32x2_s_offset20_align8", UINT32_C(4))->to_v128() == make_v128_i64(35208u,0u));
   CHECK(bkend.call_with_return("env", "v128.load32x2_u_offset0", UINT32_C(0))->to_v128() == make_v128_i64(50462976u,117835012u));
   CHECK(bkend.call_with_return("env", "v128.load32x2_u_align1", UINT32_C(1))->to_v128() == make_v128_i64(67305985u,134678021u));
   CHECK(bkend.call_with_return("env", "v128.load32x2_u_offset0_align1", UINT32_C(2))->to_v128() == make_v128_i64(84148994u,151521030u));
   CHECK(bkend.call_with_return("env", "v128.load32x2_u_offset10_align4", UINT32_C(3))->to_v128() == make_v128_i64(2148470285u,2223211137u));
   CHECK(bkend.call_with_return("env", "v128.load32x2_u_offset20_align8", UINT32_C(4))->to_v128() == make_v128_i64(35208u,0u));
   CHECK_THROWS_AS(bkend("env", "v128.load8x8_s", UINT32_C(4294967295)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v128.load8x8_u", UINT32_C(4294967295)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v128.load16x4_s", UINT32_C(65536)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v128.load16x4_u", UINT32_C(65536)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v128.load32x2_s", UINT32_C(65529)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v128.load32x2_u", UINT32_C(65529)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v128.load8x8_s_offset1_align1", UINT32_C(4294967295)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v128.load8x8_u_offset1_align1", UINT32_C(4294967295)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v128.load16x4_s_offset1_align1", UINT32_C(4294967295)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v128.load16x4_u_offset1_align1", UINT32_C(4294967295)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v128.load32x2_s_offset1_align1", UINT32_C(4294967295)), std::exception);
   CHECK_THROWS_AS(bkend("env", "v128.load32x2_u_offset1_align1", UINT32_C(4294967295)), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_extend_1_wasm>", "[simd_load_extend_1_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load_extend.1.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_extend_10_wasm>", "[simd_load_extend_10_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load_extend.10.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_extend_11_wasm>", "[simd_load_extend_11_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load_extend.11.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_extend_12_wasm>", "[simd_load_extend_12_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load_extend.12.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_extend_19_wasm>", "[simd_load_extend_19_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load_extend.19.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "v128.load8x8_s-in-block")->to_v128() == make_v128_i16(0u,1u,2u,3u,4u,5u,6u,7u));
   CHECK(bkend.call_with_return("env", "v128.load8x8_u-in-block")->to_v128() == make_v128_i16(1u,2u,3u,4u,5u,6u,7u,8u));
   CHECK(bkend.call_with_return("env", "v128.load16x4_s-in-block")->to_v128() == make_v128_i32(770u,1284u,1798u,2312u));
   CHECK(bkend.call_with_return("env", "v128.load16x4_u-in-block")->to_v128() == make_v128_i32(1027u,1541u,2055u,2569u));
   CHECK(bkend.call_with_return("env", "v128.load32x2_s-in-block")->to_v128() == make_v128_i64(117835012u,185207048u));
   CHECK(bkend.call_with_return("env", "v128.load32x2_u-in-block")->to_v128() == make_v128_i64(134678021u,202050057u));
   CHECK(bkend.call_with_return("env", "v128.load8x8_s-as-br-value")->to_v128() == make_v128_i16(6u,7u,8u,9u,10u,11u,12u,13u));
   CHECK(bkend.call_with_return("env", "v128.load8x8_u-as-br-value")->to_v128() == make_v128_i16(7u,8u,9u,10u,11u,12u,13u,14u));
   CHECK(bkend.call_with_return("env", "v128.load16x4_s-as-br-value")->to_v128() == make_v128_i32(2312u,2826u,3340u,3854u));
   CHECK(bkend.call_with_return("env", "v128.load16x4_u-as-br-value")->to_v128() == make_v128_i32(2569u,3083u,3597u,32783u));
   CHECK(bkend.call_with_return("env", "v128.load32x2_s-as-br-value")->to_v128() == make_v128_i64(218893066u,18446744071587237646u));
   CHECK(bkend.call_with_return("env", "v128.load32x2_u-as-br-value")->to_v128() == make_v128_i64(235736075u,2189525007u));
   CHECK(bkend.call_with_return("env", "v128.load8x8_s-extract_lane_s-operand")->to_ui32() == UINT32_C(12));
   CHECK(bkend.call_with_return("env", "v128.load8x8_u-extract_lane_s-operand")->to_ui32() == UINT32_C(13));
   CHECK(bkend.call_with_return("env", "v128.load16x4_s-extract_lane_s-operand")->to_ui32() == UINT32_C(14));
   CHECK(bkend.call_with_return("env", "v128.load16x4_u-extract_lane_s-operand")->to_ui32() == UINT32_C(15));
   CHECK(bkend.call_with_return("env", "v128.load32x2_s-extract_lane_s-operand")->to_ui32() == UINT32_C(4294967168));
   CHECK(bkend.call_with_return("env", "v128.load32x2_u-extract_lane_s-operand")->to_ui32() == UINT32_C(4294967169));
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_extend_2_wasm>", "[simd_load_extend_2_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load_extend.2.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_extend_3_wasm>", "[simd_load_extend_3_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load_extend.3.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_extend_4_wasm>", "[simd_load_extend_4_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load_extend.4.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_extend_5_wasm>", "[simd_load_extend_5_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load_extend.5.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_extend_6_wasm>", "[simd_load_extend_6_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load_extend.6.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_extend_7_wasm>", "[simd_load_extend_7_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load_extend.7.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_extend_8_wasm>", "[simd_load_extend_8_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load_extend.8.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_extend_9_wasm>", "[simd_load_extend_9_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load_extend.9.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

