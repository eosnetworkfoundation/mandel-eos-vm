// Generated by spec_test_generator.  DO NOT MODIFY THIS FILE.

#include <algorithm>
#include <vector>
#include <iostream>
#include <iterator>
#include <cmath>
#include <cstdlib>
#include <catch2/catch.hpp>
#include <utils.hpp>
#include <wasm_config.hpp>
#include <eosio/vm/backend.hpp>

using namespace eosio;
using namespace eosio::vm;
extern wasm_allocator wa;

BACKEND_TEST_CASE( "Testing wasm <simd_lane_0_wasm>", "[simd_lane_0_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.0.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "i8x16_extract_lane_s-first", make_v128_i8(127u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(127));
   CHECK(bkend.call_with_return("env", "i8x16_extract_lane_s-first", make_v128_i8(127u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(127));
   CHECK(bkend.call_with_return("env", "i8x16_extract_lane_s-first", make_v128_i8(255u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(4294967295));
   CHECK(bkend.call_with_return("env", "i8x16_extract_lane_s-first", make_v128_i8(255u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(4294967295));
   CHECK(bkend.call_with_return("env", "i8x16_extract_lane_u-first", make_v128_i8(255u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(255));
   CHECK(bkend.call_with_return("env", "i8x16_extract_lane_u-first", make_v128_i8(255u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(255));
   CHECK(bkend.call_with_return("env", "i8x16_extract_lane_s-last", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,128u))->to_ui32() == UINT32_C(4294967168));
   CHECK(bkend.call_with_return("env", "i8x16_extract_lane_s-last", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,128u))->to_ui32() == UINT32_C(4294967168));
   CHECK(bkend.call_with_return("env", "i8x16_extract_lane_u-last", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,255u))->to_ui32() == UINT32_C(255));
   CHECK(bkend.call_with_return("env", "i8x16_extract_lane_u-last", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,255u))->to_ui32() == UINT32_C(255));
   CHECK(bkend.call_with_return("env", "i8x16_extract_lane_u-last", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,128u))->to_ui32() == UINT32_C(128));
   CHECK(bkend.call_with_return("env", "i8x16_extract_lane_u-last", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,128u))->to_ui32() == UINT32_C(128));
   CHECK(bkend.call_with_return("env", "i16x8_extract_lane_s-first", make_v128_i16(32767u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(32767));
   CHECK(bkend.call_with_return("env", "i16x8_extract_lane_s-first", make_v128_i16(32767u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(32767));
   CHECK(bkend.call_with_return("env", "i16x8_extract_lane_s-first", make_v128_i16(65535u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(4294967295));
   CHECK(bkend.call_with_return("env", "i16x8_extract_lane_s-first", make_v128_i16(65535u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(4294967295));
   CHECK(bkend.call_with_return("env", "i16x8_extract_lane_s-first", make_v128_i16(12345u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(12345));
   CHECK(bkend.call_with_return("env", "i16x8_extract_lane_s-first", make_v128_i16(60876u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(4294962636));
   CHECK(bkend.call_with_return("env", "i16x8_extract_lane_u-first", make_v128_i16(65535u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(65535));
   CHECK(bkend.call_with_return("env", "i16x8_extract_lane_u-first", make_v128_i16(65535u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(65535));
   CHECK(bkend.call_with_return("env", "i16x8_extract_lane_u-first", make_v128_i16(12345u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(12345));
   CHECK(bkend.call_with_return("env", "i16x8_extract_lane_u-first", make_v128_i16(60876u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(60876));
   CHECK(bkend.call_with_return("env", "i16x8_extract_lane_s-last", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,32768u))->to_ui32() == UINT32_C(4294934528));
   CHECK(bkend.call_with_return("env", "i16x8_extract_lane_s-last", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,32768u))->to_ui32() == UINT32_C(4294934528));
   CHECK(bkend.call_with_return("env", "i16x8_extract_lane_s-last", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,6789u))->to_ui32() == UINT32_C(6789));
   CHECK(bkend.call_with_return("env", "i16x8_extract_lane_s-last", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,39031u))->to_ui32() == UINT32_C(4294940791));
   CHECK(bkend.call_with_return("env", "i16x8_extract_lane_u-last", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,65535u))->to_ui32() == UINT32_C(65535));
   CHECK(bkend.call_with_return("env", "i16x8_extract_lane_u-last", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,65535u))->to_ui32() == UINT32_C(65535));
   CHECK(bkend.call_with_return("env", "i16x8_extract_lane_u-last", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,32768u))->to_ui32() == UINT32_C(32768));
   CHECK(bkend.call_with_return("env", "i16x8_extract_lane_u-last", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,32768u))->to_ui32() == UINT32_C(32768));
   CHECK(bkend.call_with_return("env", "i16x8_extract_lane_u-last", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,6789u))->to_ui32() == UINT32_C(6789));
   CHECK(bkend.call_with_return("env", "i16x8_extract_lane_u-last", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,39031u))->to_ui32() == UINT32_C(39031));
   CHECK(bkend.call_with_return("env", "i32x4_extract_lane-first", make_v128_i32(2147483647u,0u,0u,0u))->to_ui32() == UINT32_C(2147483647));
   CHECK(bkend.call_with_return("env", "i32x4_extract_lane-first", make_v128_i32(2147483647u,0u,0u,0u))->to_ui32() == UINT32_C(2147483647));
   CHECK(bkend.call_with_return("env", "i32x4_extract_lane-first", make_v128_i32(4294967295u,0u,0u,0u))->to_ui32() == UINT32_C(4294967295));
   CHECK(bkend.call_with_return("env", "i32x4_extract_lane-first", make_v128_i32(4294967295u,0u,0u,0u))->to_ui32() == UINT32_C(4294967295));
   CHECK(bkend.call_with_return("env", "i32x4_extract_lane-first", make_v128_i32(1234567890u,0u,0u,0u))->to_ui32() == UINT32_C(1234567890));
   CHECK(bkend.call_with_return("env", "i32x4_extract_lane-first", make_v128_i32(3989547400u,0u,0u,0u))->to_ui32() == UINT32_C(3989547400));
   CHECK(bkend.call_with_return("env", "i32x4_extract_lane-last", make_v128_i32(0u,0u,0u,2147483648u))->to_ui32() == UINT32_C(2147483648));
   CHECK(bkend.call_with_return("env", "i32x4_extract_lane-last", make_v128_i32(0u,0u,0u,2147483648u))->to_ui32() == UINT32_C(2147483648));
   CHECK(bkend.call_with_return("env", "i32x4_extract_lane-last", make_v128_i32(0u,0u,0u,4294967295u))->to_ui32() == UINT32_C(4294967295));
   CHECK(bkend.call_with_return("env", "i32x4_extract_lane-last", make_v128_i32(0u,0u,0u,4294967295u))->to_ui32() == UINT32_C(4294967295));
   CHECK(bkend.call_with_return("env", "i32x4_extract_lane-last", make_v128_i32(0u,0u,0u,987654321u))->to_ui32() == UINT32_C(987654321));
   CHECK(bkend.call_with_return("env", "i32x4_extract_lane-last", make_v128_i32(0u,0u,0u,3989547400u))->to_ui32() == UINT32_C(3989547400));
   CHECK(bkend.call_with_return("env", "i64x2_extract_lane-first", make_v128_i64(9223372036854775807u,0u))->to_ui64() == UINT64_C(9223372036854775807));
   CHECK(bkend.call_with_return("env", "i64x2_extract_lane-first", make_v128_i64(9223372036854775806u,0u))->to_ui64() == UINT64_C(9223372036854775806));
   CHECK(bkend.call_with_return("env", "i64x2_extract_lane-first", make_v128_i64(18446744073709551615u,0u))->to_ui64() == UINT64_C(18446744073709551615));
   CHECK(bkend.call_with_return("env", "i64x2_extract_lane-first", make_v128_i64(18446744073709551615u,0u))->to_ui64() == UINT64_C(18446744073709551615));
   CHECK(bkend.call_with_return("env", "i64x2_extract_lane-first", make_v128_i64(1234567890123456789u,0u))->to_ui64() == UINT64_C(1234567890123456789));
   CHECK(bkend.call_with_return("env", "i64x2_extract_lane-first", make_v128_i64(1311768467294899695u,0u))->to_ui64() == UINT64_C(1311768467294899695));
   CHECK(bkend.call_with_return("env", "i64x2_extract_lane-last", make_v128_i64(0u,9223372036854775808u))->to_ui64() == UINT64_C(9223372036854775808));
   CHECK(bkend.call_with_return("env", "i64x2_extract_lane-last", make_v128_i64(0u,9223372036854775808u))->to_ui64() == UINT64_C(9223372036854775808));
   CHECK(bkend.call_with_return("env", "i64x2_extract_lane-last", make_v128_i64(0u,9223372036854775808u))->to_ui64() == UINT64_C(9223372036854775808));
   CHECK(bkend.call_with_return("env", "i64x2_extract_lane-last", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,255u,255u,255u,255u,255u,255u,255u,127u))->to_ui64() == UINT64_C(9223372036854775807));
   CHECK(bkend.call_with_return("env", "i64x2_extract_lane-last", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,32768u))->to_ui64() == UINT64_C(9223372036854775808));
   CHECK(bkend.call_with_return("env", "i64x2_extract_lane-last", make_v128_i32(0u,0u,4294967295u,2147483647u))->to_ui64() == UINT64_C(9223372036854775807));
   CHECK(bkend.call_with_return("env", "i64x2_extract_lane-last", make_v128_f64(18442240474082181120u,9218868437227405312u))->to_ui64() == UINT64_C(9218868437227405312));
   CHECK(bkend.call_with_return("env", "i64x2_extract_lane-last", make_v128_i64(0u,1234567890123456789u))->to_ui64() == UINT64_C(1234567890123456789));
   CHECK(bkend.call_with_return("env", "i64x2_extract_lane-last", make_v128_i64(0u,1311768467294899695u))->to_ui64() == UINT64_C(1311768467294899695));
   CHECK(bit_cast<uint32_t>(bkend.call_with_return("env", "f32x4_extract_lane-first", make_v128_f32(3231711232u,0u,0u,0u))->to_f32()) == UINT32_C(3231711232));
   CHECK(bit_cast<uint32_t>(bkend.call_with_return("env", "f32x4_extract_lane-first", make_v128_f32(2123789977u,0u,0u,0u))->to_f32()) == UINT32_C(2123789977));
   CHECK(bit_cast<uint32_t>(bkend.call_with_return("env", "f32x4_extract_lane-first", make_v128_f32(2139095039u,0u,0u,0u))->to_f32()) == UINT32_C(2139095039));
   CHECK(bit_cast<uint32_t>(bkend.call_with_return("env", "f32x4_extract_lane-first", make_v128_f32(2130706432u,0u,0u,0u))->to_f32()) == UINT32_C(2130706432));
   CHECK(bit_cast<uint32_t>(bkend.call_with_return("env", "f32x4_extract_lane-first", make_v128_f32(2139095040u,0u,0u,0u))->to_f32()) == UINT32_C(2139095040));
   CHECK(bit_cast<uint32_t>(bkend.call_with_return("env", "f32x4_extract_lane-first", make_v128_f32(2143289344u,2139095040u,0u,0u))->to_f32()) == UINT32_C(2143289344));
   CHECK(bit_cast<uint32_t>(bkend.call_with_return("env", "f32x4_extract_lane-first", make_v128_f32(1820282235u,0u,0u,0u))->to_f32()) == UINT32_C(1820282235));
   CHECK(bit_cast<uint32_t>(bkend.call_with_return("env", "f32x4_extract_lane-first", make_v128_f32(1376887476u,0u,0u,0u))->to_f32()) == UINT32_C(1376887476));
   CHECK(bit_cast<uint32_t>(bkend.call_with_return("env", "f32x4_extract_lane-last", make_v128_f32(0u,0u,0u,4271273625u))->to_f32()) == UINT32_C(4271273625));
   CHECK(bit_cast<uint32_t>(bkend.call_with_return("env", "f32x4_extract_lane-last", make_v128_f32(0u,0u,0u,4286578687u))->to_f32()) == UINT32_C(4286578687));
   CHECK(bit_cast<uint32_t>(bkend.call_with_return("env", "f32x4_extract_lane-last", make_v128_f32(0u,0u,0u,4278190080u))->to_f32()) == UINT32_C(4278190080));
   CHECK(bit_cast<uint32_t>(bkend.call_with_return("env", "f32x4_extract_lane-last", make_v128_f32(0u,0u,0u,4286578688u))->to_f32()) == UINT32_C(4286578688));
   CHECK(bit_cast<uint32_t>(bkend.call_with_return("env", "f32x4_extract_lane-last", make_v128_f32(0u,0u,4286578688u,2143289344u))->to_f32()) == UINT32_C(2143289344));
   CHECK(bit_cast<uint32_t>(bkend.call_with_return("env", "f32x4_extract_lane-last", make_v128_f32(0u,0u,0u,1290500515u))->to_f32()) == UINT32_C(1290500515));
   CHECK(bit_cast<uint32_t>(bkend.call_with_return("env", "f32x4_extract_lane-last", make_v128_f32(0u,0u,0u,1536271028u))->to_f32()) == UINT32_C(1536271028));
   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f64x2_extract_lane-first", make_v128_f64(13832806255468478464u,0u))->to_f64()) == UINT64_C(13832806255468478464));
   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f64x2_extract_lane-first", make_v128_f64(4609434218613702656u,0u))->to_f64()) == UINT64_C(4609434218613702656));
   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f64x2_extract_lane-first", make_v128_f64(9227010608267287965u,0u))->to_f64()) == UINT64_C(9227010608267287965));
   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f64x2_extract_lane-first", make_v128_f64(3638571412512157u,0u))->to_f64()) == UINT64_C(3638571412512157));
   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f64x2_extract_lane-first", make_v128_f64(9227875636482146303u,0u))->to_f64()) == UINT64_C(9227875636482146303));
   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f64x2_extract_lane-first", make_v128_f64(4503599627370495u,0u))->to_f64()) == UINT64_C(4503599627370495));
   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f64x2_extract_lane-first", make_v128_f64(18442240474082181120u,0u))->to_f64()) == UINT64_C(18442240474082181120));
   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f64x2_extract_lane-first", make_v128_f64(9218868437227405312u,0u))->to_f64()) == UINT64_C(9218868437227405312));
   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f64x2_extract_lane-first", make_v128_f64(18444492273895866368u,9223372036854775808u))->to_f64()) == UINT64_C(18444492273895866368));
   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f64x2_extract_lane-first", make_v128_f64(9221120237041090560u,0u))->to_f64()) == UINT64_C(9221120237041090560));
   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f64x2_extract_lane-first", make_v128_f64(5012481849648991189u,0u))->to_f64()) == UINT64_C(5012481849648991189));
   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f64x2_extract_lane-first", make_v128_f64(4882522492018277599u,0u))->to_f64()) == UINT64_C(4882522492018277599));
   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f64x2_extract_lane-last", make_v128_f64(0u,4612248968380809216u))->to_f64()) == UINT64_C(4612248968380809216));
   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f64x2_extract_lane-last", make_v128_f64(0u,13835621005235585024u))->to_f64()) == UINT64_C(13835621005235585024));
   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f64x2_extract_lane-last", make_v128_f64(0u,18442240474082181119u))->to_f64()) == UINT64_C(18442240474082181119));
   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f64x2_extract_lane-last", make_v128_f64(0u,9218868437227405311u))->to_f64()) == UINT64_C(9218868437227405311));
   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f64x2_extract_lane-last", make_v128_f64(0u,18442240474082181119u))->to_f64()) == UINT64_C(18442240474082181119));
   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f64x2_extract_lane-last", make_v128_f64(0u,9218868437227405311u))->to_f64()) == UINT64_C(9218868437227405311));
   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f64x2_extract_lane-last", make_v128_f64(9223372036854775808u,18442240474082181120u))->to_f64()) == UINT64_C(18442240474082181120));
   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f64x2_extract_lane-last", make_v128_f64(0u,9218868437227405312u))->to_f64()) == UINT64_C(9218868437227405312));
   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f64x2_extract_lane-last", make_v128_f64(9223372036854775808u,18444492273895866368u))->to_f64()) == UINT64_C(18444492273895866368));
   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f64x2_extract_lane-last", make_v128_f64(0u,9221120237041090560u))->to_f64()) == UINT64_C(9221120237041090560));
   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f64x2_extract_lane-last", make_v128_f64(0u,4728057454347157504u))->to_f64()) == UINT64_C(4728057454347157504));
   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f64x2_extract_lane-last", make_v128_f64(0u,4968090884938317023u))->to_f64()) == UINT64_C(4968090884938317023));
   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f64x2_extract_lane-last", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u))->to_f64()) == UINT64_C(0));
   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f64x2_extract_lane-last", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,128u))->to_f64()) == UINT64_C(9223372036854775808));
   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f64x2_extract_lane-last", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,16384u))->to_f64()) == UINT64_C(4611686018427387904));
   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f64x2_extract_lane-last", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,49152u))->to_f64()) == UINT64_C(13835058055282163712));
   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f64x2_extract_lane-last", make_v128_i32(0u,0u,4294967295u,2146435071u))->to_f64()) == UINT64_C(9218868437227405311));
   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f64x2_extract_lane-last", make_v128_i32(0u,0u,0u,1048576u))->to_f64()) == UINT64_C(4503599627370496));
   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f64x2_extract_lane-last", make_v128_i32(0u,0u,4294967295u,1048575u))->to_f64()) == UINT64_C(4503599627370495));
   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f64x2_extract_lane-last", make_v128_i32(0u,0u,1u,0u))->to_f64()) == UINT64_C(1));
   CHECK(bkend.call_with_return("env", "i8x16_replace_lane-first", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u), UINT32_C(127))->to_v128() == make_v128_i8(127u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16_replace_lane-first", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u), UINT32_C(128))->to_v128() == make_v128_i8(128u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16_replace_lane-first", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u), UINT32_C(255))->to_v128() == make_v128_i8(255u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16_replace_lane-first", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u), UINT32_C(256))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16_replace_lane-last", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u), UINT32_C(4294967168))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,128u));
   CHECK(bkend.call_with_return("env", "i8x16_replace_lane-last", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u), UINT32_C(4294967167))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,127u));
   CHECK(bkend.call_with_return("env", "i8x16_replace_lane-last", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u), UINT32_C(32767))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,255u));
   CHECK(bkend.call_with_return("env", "i8x16_replace_lane-last", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u), UINT32_C(4294934528))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8_replace_lane-first", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u), UINT32_C(32767))->to_v128() == make_v128_i16(32767u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8_replace_lane-first", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u), UINT32_C(32768))->to_v128() == make_v128_i16(32768u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8_replace_lane-first", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u), UINT32_C(65535))->to_v128() == make_v128_i16(65535u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8_replace_lane-first", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u), UINT32_C(65536))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8_replace_lane-first", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u), UINT32_C(12345))->to_v128() == make_v128_i16(12345u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8_replace_lane-first", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u), UINT32_C(4294962636))->to_v128() == make_v128_i16(60876u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8_replace_lane-last", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u), UINT32_C(4294934528))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,32768u));
   CHECK(bkend.call_with_return("env", "i16x8_replace_lane-last", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u), UINT32_C(4294934527))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,32767u));
   CHECK(bkend.call_with_return("env", "i16x8_replace_lane-last", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u), UINT32_C(2147483647))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,65535u));
   CHECK(bkend.call_with_return("env", "i16x8_replace_lane-last", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u), UINT32_C(2147483648))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8_replace_lane-last", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u), UINT32_C(54321))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,54321u));
   CHECK(bkend.call_with_return("env", "i16x8_replace_lane-last", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u), UINT32_C(4294950111))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,48351u));
   CHECK(bkend.call_with_return("env", "i32x4_replace_lane-first", make_v128_i32(0u,0u,0u,0u), UINT32_C(2147483647))->to_v128() == make_v128_i32(2147483647u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4_replace_lane-first", make_v128_i32(0u,0u,0u,0u), UINT32_C(4294967295))->to_v128() == make_v128_i32(4294967295u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4_replace_lane-first", make_v128_i32(0u,0u,0u,0u), UINT32_C(1234567890))->to_v128() == make_v128_i32(1234567890u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4_replace_lane-first", make_v128_i32(0u,0u,0u,0u), UINT32_C(3989547400))->to_v128() == make_v128_i32(3989547400u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4_replace_lane-last", make_v128_i32(0u,0u,0u,0u), UINT32_C(2147483648))->to_v128() == make_v128_i32(0u,0u,0u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4_replace_lane-last", make_v128_i32(0u,0u,0u,0u), UINT32_C(2147483648))->to_v128() == make_v128_i32(0u,0u,0u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4_replace_lane-last", make_v128_i32(0u,0u,0u,0u), UINT32_C(1234567890))->to_v128() == make_v128_i32(0u,0u,0u,1234567890u));
   CHECK(bkend.call_with_return("env", "i32x4_replace_lane-last", make_v128_i32(0u,0u,0u,0u), UINT32_C(3989547400))->to_v128() == make_v128_i32(0u,0u,0u,3989547400u));
   CHECK(bkend.call_with_return("env", "f32x4_replace_lane-first", make_v128_f32(0u,0u,0u,0u), bit_cast<float>(UINT32_C(1112801280)))->to_v128() == make_v128_f32(1112801280u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4_replace_lane-first", make_v128_i32(0u,0u,0u,0u), bit_cast<float>(UINT32_C(1112801280)))->to_v128() == make_v128_f32(1112801280u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4_replace_lane-first", make_v128_f32(0u,0u,0u,0u), bit_cast<float>(UINT32_C(2143289344)))->to_v128() == make_v128_f32(2143289344u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4_replace_lane-first", make_v128_f32(0u,0u,0u,0u), bit_cast<float>(UINT32_C(2139095040)))->to_v128() == make_v128_f32(2139095040u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4_replace_lane-first", make_v128_f32(2143289344u,0u,0u,0u), bit_cast<float>(UINT32_C(1078523331)))->to_v128() == make_v128_f32(1078523331u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4_replace_lane-first", make_v128_f32(2139095040u,0u,0u,0u), bit_cast<float>(UINT32_C(2123789977)))->to_v128() == make_v128_f32(2123789977u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4_replace_lane-first", make_v128_f32(2139095040u,0u,0u,0u), bit_cast<float>(UINT32_C(2139095039)))->to_v128() == make_v128_f32(2139095039u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4_replace_lane-first", make_v128_f32(2139095040u,0u,0u,0u), bit_cast<float>(UINT32_C(2130706432)))->to_v128() == make_v128_f32(2130706432u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4_replace_lane-first", make_v128_f32(0u,0u,0u,0u), bit_cast<float>(UINT32_C(1290500515)))->to_v128() == make_v128_f32(1290500515u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4_replace_lane-first", make_v128_f32(0u,0u,0u,0u), bit_cast<float>(UINT32_C(1290500515)))->to_v128() == make_v128_f32(1290500515u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4_replace_lane-first", make_v128_f32(0u,0u,0u,0u), bit_cast<float>(UINT32_C(1536271028)))->to_v128() == make_v128_f32(1536271028u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4_replace_lane-first", make_v128_f32(0u,0u,0u,0u), bit_cast<float>(UINT32_C(1536271028)))->to_v128() == make_v128_f32(1536271028u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4_replace_lane-last", make_v128_f32(0u,0u,0u,0u), bit_cast<float>(UINT32_C(3260284928)))->to_v128() == make_v128_f32(0u,0u,0u,3260284928u));
   CHECK(bkend.call_with_return("env", "f32x4_replace_lane-last", make_v128_i32(0u,0u,0u,0u), bit_cast<float>(UINT32_C(3260284928)))->to_v128() == make_v128_f32(0u,0u,0u,3260284928u));
   CHECK(bkend.call_with_return("env", "f32x4_replace_lane-last", make_v128_f32(0u,0u,0u,0u), bit_cast<float>(UINT32_C(2143289344)))->to_v128() == make_v128_f32(0u,0u,0u,2143289344u));
   CHECK(bkend.call_with_return("env", "f32x4_replace_lane-last", make_v128_f32(0u,0u,0u,0u), bit_cast<float>(UINT32_C(4286578688)))->to_v128() == make_v128_f32(0u,0u,0u,4286578688u));
   CHECK(bkend.call_with_return("env", "f32x4_replace_lane-last", make_v128_f32(0u,0u,0u,2143289344u), bit_cast<float>(UINT32_C(1078523331)))->to_v128() == make_v128_f32(0u,0u,0u,1078523331u));
   CHECK(bkend.call_with_return("env", "f32x4_replace_lane-last", make_v128_f32(0u,0u,0u,4286578688u), bit_cast<float>(UINT32_C(4271273625)))->to_v128() == make_v128_f32(0u,0u,0u,4271273625u));
   CHECK(bkend.call_with_return("env", "f32x4_replace_lane-last", make_v128_f32(0u,0u,0u,4286578688u), bit_cast<float>(UINT32_C(4286578687)))->to_v128() == make_v128_f32(0u,0u,0u,4286578687u));
   CHECK(bkend.call_with_return("env", "f32x4_replace_lane-last", make_v128_f32(0u,0u,0u,4286578688u), bit_cast<float>(UINT32_C(4278190080)))->to_v128() == make_v128_f32(0u,0u,0u,4278190080u));
   CHECK(bkend.call_with_return("env", "f32x4_replace_lane-last", make_v128_f32(0u,0u,0u,0u), bit_cast<float>(UINT32_C(1820282235)))->to_v128() == make_v128_f32(0u,0u,0u,1820282235u));
   CHECK(bkend.call_with_return("env", "f32x4_replace_lane-last", make_v128_f32(0u,0u,0u,0u), bit_cast<float>(UINT32_C(1820282235)))->to_v128() == make_v128_f32(0u,0u,0u,1820282235u));
   CHECK(bkend.call_with_return("env", "f32x4_replace_lane-last", make_v128_f32(0u,0u,0u,0u), bit_cast<float>(UINT32_C(1695654580)))->to_v128() == make_v128_f32(0u,0u,0u,1695654580u));
   CHECK(bkend.call_with_return("env", "f32x4_replace_lane-last", make_v128_f32(0u,0u,0u,0u), bit_cast<float>(UINT32_C(1376887476)))->to_v128() == make_v128_f32(0u,0u,0u,1376887476u));
   CHECK(bkend.call_with_return("env", "i64x2_replace_lane-first", make_v128_i64(0u,0u), UINT64_C(9223372036854775807))->to_v128() == make_v128_i64(9223372036854775807u,0u));
   CHECK(bkend.call_with_return("env", "i64x2_replace_lane-first", make_v128_i64(0u,0u), UINT64_C(18446744073709551615))->to_v128() == make_v128_i64(18446744073709551615u,0u));
   CHECK(bkend.call_with_return("env", "i64x2_replace_lane-first", make_v128_i64(0u,0u), UINT64_C(1234567890123456789))->to_v128() == make_v128_i64(1234567890123456789u,0u));
   CHECK(bkend.call_with_return("env", "i64x2_replace_lane-first", make_v128_i64(0u,0u), UINT64_C(1311768467294899695))->to_v128() == make_v128_i64(1311768467294899695u,0u));
   CHECK(bkend.call_with_return("env", "i64x2_replace_lane-last", make_v128_i64(0u,0u), UINT64_C(9223372036854775808))->to_v128() == make_v128_i64(0u,9223372036854775808u));
   CHECK(bkend.call_with_return("env", "i64x2_replace_lane-last", make_v128_i64(0u,0u), UINT64_C(9223372036854775808))->to_v128() == make_v128_i64(0u,9223372036854775808u));
   CHECK(bkend.call_with_return("env", "i64x2_replace_lane-last", make_v128_i64(0u,0u), UINT64_C(1234567890123456789))->to_v128() == make_v128_i64(0u,1234567890123456789u));
   CHECK(bkend.call_with_return("env", "i64x2_replace_lane-last", make_v128_i64(0u,0u), UINT64_C(1311768467294899695))->to_v128() == make_v128_i64(0u,1311768467294899695u));
   CHECK(bkend.call_with_return("env", "f64x2_replace_lane-first", make_v128_f64(4607182418800017408u,4607182418800017408u), bit_cast<double>(UINT64_C(0)))->to_v128() == make_v128_f64(0u,4607182418800017408u));
   CHECK(bkend.call_with_return("env", "f64x2_replace_lane-first", make_v128_f64(13830554455654793216u,13830554455654793216u), bit_cast<double>(UINT64_C(9223372036854775808)))->to_v128() == make_v128_f64(9223372036854775808u,13830554455654793216u));
   CHECK(bkend.call_with_return("env", "f64x2_replace_lane-first", make_v128_f64(0u,0u), bit_cast<double>(UINT64_C(4608308318706860032)))->to_v128() == make_v128_f64(4608308318706860032u,0u));
   CHECK(bkend.call_with_return("env", "f64x2_replace_lane-first", make_v128_f64(0u,0u), bit_cast<double>(UINT64_C(13831680355561635840)))->to_v128() == make_v128_f64(13831680355561635840u,0u));
   CHECK(bkend.call_with_return("env", "f64x2_replace_lane-first", make_v128_f64(18444492273895866368u,0u), bit_cast<double>(UINT64_C(18442240474082181119)))->to_v128() == make_v128_f64(18442240474082181119u,0u));
   CHECK(bkend.call_with_return("env", "f64x2_replace_lane-first", make_v128_f64(9221120237041090560u,0u), bit_cast<double>(UINT64_C(9218868437227405311)))->to_v128() == make_v128_f64(9218868437227405311u,0u));
   CHECK(bkend.call_with_return("env", "f64x2_replace_lane-first", make_v128_f64(18442240474082181120u,0u), bit_cast<double>(UINT64_C(9227875636482146303)))->to_v128() == make_v128_f64(9227875636482146303u,0u));
   CHECK(bkend.call_with_return("env", "f64x2_replace_lane-first", make_v128_f64(9218868437227405312u,0u), bit_cast<double>(UINT64_C(4503599627370495)))->to_v128() == make_v128_f64(4503599627370495u,0u));
   CHECK(bkend.call_with_return("env", "f64x2_replace_lane-first", make_v128_f64(0u,0u), bit_cast<double>(UINT64_C(18444492273895866368)))->to_v128() == make_v128_f64(18444492273895866368u,0u));
   CHECK(bkend.call_with_return("env", "f64x2_replace_lane-first", make_v128_f64(0u,0u), bit_cast<double>(UINT64_C(9221120237041090560)))->to_v128() == make_v128_f64(9221120237041090560u,0u));
   CHECK(bkend.call_with_return("env", "f64x2_replace_lane-first", make_v128_f64(0u,0u), bit_cast<double>(UINT64_C(18442240474082181120)))->to_v128() == make_v128_f64(18442240474082181120u,0u));
   CHECK(bkend.call_with_return("env", "f64x2_replace_lane-first", make_v128_f64(0u,0u), bit_cast<double>(UINT64_C(9218868437227405312)))->to_v128() == make_v128_f64(9218868437227405312u,0u));
   CHECK(bkend.call_with_return("env", "f64x2_replace_lane-first", make_v128_f64(0u,0u), bit_cast<double>(UINT64_C(4728057454347157504)))->to_v128() == make_v128_f64(4728057454347157504u,0u));
   CHECK(bkend.call_with_return("env", "f64x2_replace_lane-first", make_v128_f64(0u,0u), bit_cast<double>(UINT64_C(4728057454347157504)))->to_v128() == make_v128_f64(4728057454347157504u,0u));
   CHECK(bkend.call_with_return("env", "f64x2_replace_lane-first", make_v128_f64(0u,0u), bit_cast<double>(UINT64_C(4968090884938317023)))->to_v128() == make_v128_f64(4968090884938317023u,0u));
   CHECK(bkend.call_with_return("env", "f64x2_replace_lane-first", make_v128_f64(0u,0u), bit_cast<double>(UINT64_C(4968090884938317023)))->to_v128() == make_v128_f64(4968090884938317023u,0u));
   CHECK(bkend.call_with_return("env", "f64x2_replace_lane-last", make_v128_f64(4611686018427387904u,4611686018427387904u), bit_cast<double>(UINT64_C(0)))->to_v128() == make_v128_f64(4611686018427387904u,0u));
   CHECK(bkend.call_with_return("env", "f64x2_replace_lane-last", make_v128_f64(13835058055282163712u,13835058055282163712u), bit_cast<double>(UINT64_C(9223372036854775808)))->to_v128() == make_v128_f64(13835058055282163712u,9223372036854775808u));
   CHECK(bkend.call_with_return("env", "f64x2_replace_lane-last", make_v128_f64(0u,0u), bit_cast<double>(UINT64_C(4612248968380809216)))->to_v128() == make_v128_f64(0u,4612248968380809216u));
   CHECK(bkend.call_with_return("env", "f64x2_replace_lane-last", make_v128_f64(0u,0u), bit_cast<double>(UINT64_C(13835621005235585024)))->to_v128() == make_v128_f64(0u,13835621005235585024u));
   CHECK(bkend.call_with_return("env", "f64x2_replace_lane-last", make_v128_f64(0u,18444492273895866368u), bit_cast<double>(UINT64_C(18442240474082181119)))->to_v128() == make_v128_f64(0u,18442240474082181119u));
   CHECK(bkend.call_with_return("env", "f64x2_replace_lane-last", make_v128_f64(0u,9221120237041090560u), bit_cast<double>(UINT64_C(9218868437227405311)))->to_v128() == make_v128_f64(0u,9218868437227405311u));
   CHECK(bkend.call_with_return("env", "f64x2_replace_lane-last", make_v128_f64(0u,18442240474082181120u), bit_cast<double>(UINT64_C(9227875636482146303)))->to_v128() == make_v128_f64(0u,9227875636482146303u));
   CHECK(bkend.call_with_return("env", "f64x2_replace_lane-last", make_v128_f64(0u,9218868437227405312u), bit_cast<double>(UINT64_C(4503599627370495)))->to_v128() == make_v128_f64(0u,4503599627370495u));
   CHECK(bkend.call_with_return("env", "f64x2_replace_lane-last", make_v128_f64(0u,0u), bit_cast<double>(UINT64_C(18444492273895866368)))->to_v128() == make_v128_f64(0u,18444492273895866368u));
   CHECK(bkend.call_with_return("env", "f64x2_replace_lane-last", make_v128_f64(0u,0u), bit_cast<double>(UINT64_C(9221120237041090560)))->to_v128() == make_v128_f64(0u,9221120237041090560u));
   CHECK(bkend.call_with_return("env", "f64x2_replace_lane-last", make_v128_f64(0u,0u), bit_cast<double>(UINT64_C(18442240474082181120)))->to_v128() == make_v128_f64(0u,18442240474082181120u));
   CHECK(bkend.call_with_return("env", "f64x2_replace_lane-last", make_v128_f64(0u,0u), bit_cast<double>(UINT64_C(9218868437227405312)))->to_v128() == make_v128_f64(0u,9218868437227405312u));
   CHECK(bkend.call_with_return("env", "f64x2_replace_lane-last", make_v128_f64(0u,0u), bit_cast<double>(UINT64_C(5012481849648092922)))->to_v128() == make_v128_f64(0u,5012481849648092922u));
   CHECK(bkend.call_with_return("env", "f64x2_replace_lane-last", make_v128_f64(0u,0u), bit_cast<double>(UINT64_C(5012481849648092922)))->to_v128() == make_v128_f64(0u,5012481849648092922u));
   CHECK(bkend.call_with_return("env", "f64x2_replace_lane-last", make_v128_f64(0u,0u), bit_cast<double>(UINT64_C(5012481849648092922)))->to_v128() == make_v128_f64(0u,5012481849648092922u));
   CHECK(bkend.call_with_return("env", "f64x2_replace_lane-last", make_v128_f64(0u,0u), bit_cast<double>(UINT64_C(4443687238071173905)))->to_v128() == make_v128_f64(0u,4443687238071173905u));
   CHECK(bkend.call_with_return("env", "v8x16_swizzle", make_v128_i8(16u,17u,18u,19u,20u,21u,22u,23u,24u,25u,26u,27u,28u,29u,30u,31u), make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u))->to_v128() == make_v128_i8(16u,17u,18u,19u,20u,21u,22u,23u,24u,25u,26u,27u,28u,29u,30u,31u));
   CHECK(bkend.call_with_return("env", "v8x16_swizzle", make_v128_i8(240u,241u,242u,243u,244u,245u,246u,247u,248u,249u,250u,251u,252u,253u,254u,255u), make_v128_i8(248u,249u,250u,251u,252u,253u,254u,255u,16u,17u,18u,19u,20u,21u,22u,23u))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "v8x16_swizzle", make_v128_i8(100u,101u,102u,103u,104u,105u,106u,107u,108u,109u,110u,111u,112u,113u,114u,115u), make_v128_i8(15u,14u,13u,12u,11u,10u,9u,8u,7u,6u,5u,4u,3u,2u,1u,0u))->to_v128() == make_v128_i8(115u,114u,113u,112u,111u,110u,109u,108u,107u,106u,105u,104u,103u,102u,101u,100u));
   CHECK(bkend.call_with_return("env", "v8x16_swizzle", make_v128_i8(100u,101u,102u,103u,104u,105u,106u,107u,108u,109u,110u,111u,112u,113u,114u,115u), make_v128_i8(255u,1u,254u,2u,253u,3u,252u,4u,251u,5u,250u,6u,249u,7u,248u,8u))->to_v128() == make_v128_i8(0u,101u,0u,102u,0u,103u,0u,104u,0u,105u,0u,106u,0u,107u,0u,108u));
   CHECK(bkend.call_with_return("env", "v8x16_swizzle", make_v128_i8(100u,101u,102u,103u,104u,105u,106u,107u,108u,109u,110u,111u,112u,113u,114u,115u), make_v128_i8(9u,16u,10u,17u,11u,18u,12u,19u,13u,20u,14u,21u,15u,22u,16u,23u))->to_v128() == make_v128_i8(109u,0u,110u,0u,111u,0u,112u,0u,113u,0u,114u,0u,115u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "v8x16_swizzle", make_v128_i8(100u,101u,102u,103u,104u,105u,106u,107u,108u,109u,110u,111u,112u,113u,114u,115u), make_v128_i8(9u,16u,10u,17u,11u,18u,12u,19u,13u,20u,14u,21u,15u,22u,16u,23u))->to_v128() == make_v128_i8(109u,0u,110u,0u,111u,0u,112u,0u,113u,0u,114u,0u,115u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "v8x16_swizzle", make_v128_i16(25701u,26215u,26729u,27243u,27757u,28271u,28785u,29299u), make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u))->to_v128() == make_v128_i16(25701u,26215u,26729u,27243u,27757u,28271u,28785u,29299u));
   CHECK(bkend.call_with_return("env", "v8x16_swizzle", make_v128_i32(1684366951u,1751738987u,1819111023u,1886483059u), make_v128_i8(15u,14u,13u,12u,11u,10u,9u,8u,7u,6u,5u,4u,3u,2u,1u,0u))->to_v128() == make_v128_i32(1936879984u,1869507948u,1802135912u,1734763876u));
   CHECK(bkend.call_with_return("env", "v8x16_swizzle", make_v128_f32(2143289344u,4290772992u,2139095040u,4286578688u), make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u))->to_v128() == make_v128_i32(2143289344u,4290772992u,2139095040u,4286578688u));
   CHECK(bkend.call_with_return("env", "v8x16_swizzle", make_v128_i32(1734763876u,1802135912u,1869507932u,1936879984u), make_v128_f32(0u,2147483648u,2139095040u,4286578688u))->to_v128() == make_v128_i32(1684300900u,6579300u,25700u,25700u));
   CHECK(bkend.call_with_return("env", "v8x16_shuffle-1", make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u), make_v128_i8(16u,17u,18u,19u,20u,21u,22u,23u,24u,25u,26u,27u,28u,29u,30u,31u))->to_v128() == make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u));
   CHECK(bkend.call_with_return("env", "v8x16_shuffle-2", make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u), make_v128_i8(240u,241u,242u,243u,244u,245u,246u,247u,248u,249u,250u,251u,252u,253u,254u,255u))->to_v128() == make_v128_i8(240u,241u,242u,243u,244u,245u,246u,247u,248u,249u,250u,251u,252u,253u,254u,255u));
   CHECK(bkend.call_with_return("env", "v8x16_shuffle-3", make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u), make_v128_i8(240u,241u,242u,243u,244u,245u,246u,247u,248u,249u,250u,251u,252u,253u,254u,255u))->to_v128() == make_v128_i8(255u,254u,253u,252u,251u,250u,249u,248u,247u,246u,245u,244u,243u,242u,241u,240u));
   CHECK(bkend.call_with_return("env", "v8x16_shuffle-4", make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u), make_v128_i8(240u,241u,242u,243u,244u,245u,246u,247u,248u,249u,250u,251u,252u,253u,254u,255u))->to_v128() == make_v128_i8(15u,14u,13u,12u,11u,10u,9u,8u,7u,6u,5u,4u,3u,2u,1u,0u));
   CHECK(bkend.call_with_return("env", "v8x16_shuffle-5", make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u), make_v128_i8(240u,241u,242u,243u,244u,245u,246u,247u,248u,249u,250u,251u,252u,253u,254u,255u))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "v8x16_shuffle-6", make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u), make_v128_i8(240u,241u,242u,243u,244u,245u,246u,247u,248u,249u,250u,251u,252u,253u,254u,255u))->to_v128() == make_v128_i8(240u,240u,240u,240u,240u,240u,240u,240u,240u,240u,240u,240u,240u,240u,240u,240u));
   CHECK(bkend.call_with_return("env", "v8x16_shuffle-7", make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u), make_v128_i8(240u,241u,242u,243u,244u,245u,246u,247u,248u,249u,250u,251u,252u,253u,254u,255u))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,240u,240u,240u,240u,240u,240u,240u,240u));
   CHECK(bkend.call_with_return("env", "v8x16_shuffle-1", make_v128_i8(100u,101u,102u,103u,104u,105u,106u,107u,108u,109u,110u,111u,112u,113u,114u,115u), make_v128_i8(240u,241u,242u,243u,244u,245u,246u,247u,248u,249u,250u,251u,252u,253u,254u,255u))->to_v128() == make_v128_i8(100u,101u,102u,103u,104u,105u,106u,107u,108u,109u,110u,111u,112u,113u,114u,115u));
   CHECK(bkend.call_with_return("env", "v8x16_shuffle-1", make_v128_i16(256u,770u,1284u,1798u,2312u,2826u,3340u,3854u), make_v128_i8(240u,241u,242u,243u,244u,245u,246u,247u,248u,249u,250u,251u,252u,253u,254u,255u))->to_v128() == make_v128_i16(256u,770u,1284u,1798u,2312u,2826u,3340u,3854u));
   CHECK(bkend.call_with_return("env", "v8x16_shuffle-2", make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u), make_v128_i32(4092785136u,4160157172u,4227529208u,4294901244u))->to_v128() == make_v128_i32(4092785136u,4160157172u,4227529208u,4294901244u));
   CHECK(bkend.call_with_return("env", "v8x16_shuffle-1", make_v128_i32(66051u,67438087u,134810123u,202182159u), make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u))->to_v128() == make_v128_i32(66051u,67438087u,134810123u,202182159u));
   CHECK(bkend.call_with_return("env", "v8x16_shuffle-1", make_v128_f32(1065353216u,2143289344u,2139095040u,4286578688u), make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u))->to_v128() == make_v128_i32(1065353216u,2143289344u,2139095040u,4286578688u));
   CHECK(bkend.call_with_return("env", "v8x16_shuffle-1", make_v128_i32(66051u,67438087u,134810123u,202182159u), make_v128_f32(2147483648u,2143289344u,2139095040u,4286578688u))->to_v128() == make_v128_i32(66051u,67438087u,134810123u,202182159u));
   CHECK(bkend.call_with_return("env", "v8x16_swizzle", make_v128_i32(1234567890u,305419896u,1234567890u,305419896u), make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u))->to_v128() == make_v128_i32(1234567890u,305419896u,1234567890u,305419896u));
   CHECK(bkend.call_with_return("env", "v8x16_shuffle-1", make_v128_i64(12345678901234567890u,1311768467294899695u), make_v128_i64(12345678901234567890u,1311768467294899695u))->to_v128() == make_v128_i32(3944680146u,2874452364u,2427178479u,305419896u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_137_wasm>", "[simd_lane_137_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.137.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "i8x16_extract_lane_s", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u), make_v128_i8(255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u))->to_v128() == make_v128_i8(255u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16_extract_lane_u", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u), make_v128_i8(255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u))->to_v128() == make_v128_i8(255u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8_extract_lane_s", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u), make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u))->to_v128() == make_v128_i16(65535u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8_extract_lane_u", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u), make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u))->to_v128() == make_v128_i16(65535u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4_extract_lane", make_v128_i32(0u,0u,0u,0u), make_v128_i32(65536u,4294967295u,4294967295u,4294967295u))->to_v128() == make_v128_i32(65536u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4_extract_lane", make_v128_f32(0u,0u,0u,0u), make_v128_f32(2123789977u,2143289344u,2143289344u,2143289344u))->to_v128() == make_v128_f32(2123789977u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16_replace_lane-s", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u), UINT32_C(255))->to_ui32() == UINT32_C(4294967295));
   CHECK(bkend.call_with_return("env", "i8x16_replace_lane-u", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u), UINT32_C(255))->to_ui32() == UINT32_C(255));
   CHECK(bkend.call_with_return("env", "i16x8_replace_lane-s", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u), UINT32_C(65535))->to_ui32() == UINT32_C(4294967295));
   CHECK(bkend.call_with_return("env", "i16x8_replace_lane-u", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u), UINT32_C(65535))->to_ui32() == UINT32_C(65535));
   CHECK(bkend.call_with_return("env", "i32x4_replace_lane", make_v128_i32(0u,0u,0u,0u), UINT32_C(4294967295))->to_ui32() == UINT32_C(4294967295));
   CHECK(bit_cast<uint32_t>(bkend.call_with_return("env", "f32x4_replace_lane", make_v128_f32(0u,0u,0u,0u), bit_cast<float>(UINT32_C(1067450368)))->to_f32()) == UINT32_C(1067450368));
   CHECK(bkend.call_with_return("env", "i64x2_extract_lane", make_v128_i64(0u,0u), make_v128_i64(18446744073709551615u,18446744073709551615u))->to_v128() == make_v128_i64(18446744073709551615u,0u));
   CHECK(bkend.call_with_return("env", "f64x2_extract_lane", make_v128_f64(0u,0u), make_v128_f64(9214871658872686752u,9221120237041090560u))->to_v128() == make_v128_f64(9214871658872686752u,0u));
   CHECK(bkend.call_with_return("env", "i64x2_replace_lane", make_v128_i64(0u,0u), UINT64_C(18446744073709551615))->to_ui64() == UINT64_C(18446744073709551615));
   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f64x2_replace_lane", make_v128_f64(0u,0u), bit_cast<double>(UINT64_C(4612811918334230528)))->to_f64()) == UINT64_C(4612811918334230528));
   CHECK(bkend.call_with_return("env", "as-v8x16_swizzle-operand", make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u), UINT32_C(255), make_v128_i8(255u,15u,14u,13u,12u,11u,10u,9u,8u,7u,6u,5u,4u,3u,2u,1u))->to_v128() == make_v128_i8(0u,15u,14u,13u,12u,11u,10u,9u,8u,7u,6u,5u,4u,3u,2u,1u));
   CHECK(bkend.call_with_return("env", "as-v8x16_shuffle-operands", make_v128_i8(0u,255u,0u,255u,15u,255u,0u,255u,255u,255u,0u,255u,127u,255u,0u,255u), UINT32_C(1), make_v128_i8(85u,0u,85u,0u,85u,0u,85u,0u,85u,0u,85u,0u,85u,1u,85u,255u), UINT32_C(0))->to_v128() == make_v128_i8(85u,255u,85u,255u,85u,255u,85u,255u,85u,255u,85u,255u,85u,255u,85u,255u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_138_wasm>", "[simd_lane_138_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.138.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "as-i8x16_splat-operand", make_v128_i8(255u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u))->to_v128() == make_v128_i8(255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "as-i16x8_splat-operand", make_v128_i16(65535u,65535u,65535u,65535u,0u,0u,0u,0u))->to_v128() == make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u));
   CHECK(bkend.call_with_return("env", "as-i32x4_splat-operand", make_v128_i32(65536u,0u,0u,0u))->to_v128() == make_v128_i32(65536u,65536u,65536u,65536u));
   CHECK(bkend.call_with_return("env", "as-f32x4_splat-operand", make_v128_f32(1078523331u,2143289344u,2143289344u,2143289344u))->to_v128() == make_v128_f32(1078523331u,1078523331u,1078523331u,1078523331u));
   CHECK(bkend.call_with_return("env", "as-i64x2_splat-operand", make_v128_i64(18446744073709551615u,0u))->to_v128() == make_v128_i64(18446744073709551615u,18446744073709551615u));
   CHECK(bkend.call_with_return("env", "as-f64x2_splat-operand", make_v128_f64(9218868437227405312u,9221120237041090560u))->to_v128() == make_v128_f64(9218868437227405312u,9218868437227405312u));
   CHECK(bkend.call_with_return("env", "as-i8x16_add-operands", make_v128_i8(255u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u,16u), UINT32_C(1), make_v128_i8(16u,15u,14u,13u,12u,11u,10u,9u,8u,7u,6u,5u,4u,3u,2u,255u), UINT32_C(1))->to_v128() == make_v128_i8(17u,17u,17u,17u,17u,17u,17u,17u,17u,17u,17u,17u,17u,17u,17u,17u));
   CHECK(bkend.call_with_return("env", "as-i16x8_add-operands", make_v128_i16(65535u,4u,9u,16u,25u,36u,49u,64u), UINT32_C(1), make_v128_i16(64u,49u,36u,25u,16u,9u,4u,65535u), UINT32_C(1))->to_v128() == make_v128_i16(65u,53u,45u,41u,41u,45u,53u,65u));
   CHECK(bkend.call_with_return("env", "as-i32x4_add-operands", make_v128_i32(4294967295u,8u,27u,64u), UINT32_C(1), make_v128_i32(64u,27u,8u,4294967295u), UINT32_C(1))->to_v128() == make_v128_i32(65u,35u,35u,65u));
   CHECK(bkend.call_with_return("env", "as-i64x2_add-operands", make_v128_i64(18446744073709551615u,8u), UINT64_C(1), make_v128_i64(64u,27u), UINT64_C(1))->to_v128() == make_v128_i64(65u,9u));
   CHECK(bkend.call_with_return("env", "swizzle-as-i8x16_add-operands", make_v128_i8(240u,241u,242u,243u,244u,245u,246u,247u,248u,249u,250u,251u,252u,253u,254u,255u), make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u), make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u), make_v128_i8(15u,14u,13u,12u,11u,10u,9u,8u,7u,6u,5u,4u,3u,2u,1u,0u))->to_v128() == make_v128_i8(255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "shuffle-as-i8x16_sub-operands", make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u), make_v128_i8(15u,14u,13u,12u,11u,10u,9u,8u,7u,6u,5u,4u,3u,2u,1u,0u), make_v128_i8(240u,241u,242u,243u,244u,245u,246u,247u,248u,249u,250u,251u,252u,253u,254u,255u), make_v128_i8(15u,14u,13u,12u,11u,10u,9u,8u,7u,6u,5u,4u,3u,2u,1u,0u))->to_v128() == make_v128_i8(241u,243u,245u,247u,249u,251u,253u,255u,1u,3u,5u,7u,9u,11u,13u,15u));
   CHECK(bkend.call_with_return("env", "as-i8x16_any_true-operand", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u), UINT32_C(1))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "as-i16x8_any_true-operand", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u), UINT32_C(1))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "as-i32x4_any_true-operand1", make_v128_i32(1u,0u,0u,0u), UINT32_C(0))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "as-i32x4_any_true-operand2", make_v128_i64(1u,0u), UINT64_C(0))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "swizzle-as-i8x16_all_true-operands", make_v128_i8(1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u,16u), make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "swizzle-as-i8x16_all_true-operands", make_v128_i8(240u,241u,242u,243u,244u,245u,246u,247u,248u,249u,250u,251u,252u,253u,254u,255u), make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,16u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "shuffle-as-i8x16_any_true-operands", make_v128_i8(240u,241u,242u,243u,244u,245u,246u,247u,248u,249u,250u,251u,252u,253u,254u,255u), make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u))->to_ui32() == UINT32_C(1));
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_139_wasm>", "[simd_lane_139_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.139.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "as-v128_store-operand-1", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u), UINT32_C(1))->to_v128() == make_v128_i8(1u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "as-v128_store-operand-2", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u), UINT32_C(256))->to_v128() == make_v128_i16(256u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "as-v128_store-operand-3", make_v128_i32(0u,0u,0u,0u), UINT32_C(4294967295))->to_v128() == make_v128_i32(4294967295u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "as-v128_store-operand-4", make_v128_f32(0u,0u,0u,0u), bit_cast<float>(UINT32_C(1078523331)))->to_v128() == make_v128_f32(1078523331u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "as-v128_store-operand-5", make_v128_i64(0u,0u), UINT64_C(18446744073709551615))->to_v128() == make_v128_i64(18446744073709551615u,0u));
   CHECK(bkend.call_with_return("env", "as-v128_store-operand-6", make_v128_f64(0u,0u), bit_cast<double>(UINT64_C(4614253070214989087)))->to_v128() == make_v128_f64(4614253070214989087u,0u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_140_wasm>", "[simd_lane_140_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.140.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "as-if-condition-value", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "as-return-value-1", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u), UINT32_C(1))->to_v128() == make_v128_i16(1u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "as-local_set-value", make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u))->to_ui32() == UINT32_C(4294967295));
   CHECK(bkend.call_with_return("env", "as-global_set-value-1", make_v128_f32(0u,0u,0u,0u), bit_cast<float>(UINT32_C(1078523331)))->to_v128() == make_v128_f32(1078523331u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "as-return-value-2", make_v128_i8(240u,241u,242u,243u,244u,245u,246u,247u,248u,249u,250u,251u,252u,253u,254u,255u), make_v128_i8(15u,14u,13u,12u,11u,10u,9u,8u,7u,6u,5u,4u,3u,2u,1u,0u))->to_v128() == make_v128_i8(255u,254u,253u,252u,251u,250u,249u,248u,247u,246u,245u,244u,243u,242u,241u,240u));
   CHECK(bkend.call_with_return("env", "as-global_set-value-2", make_v128_i8(240u,241u,242u,243u,244u,245u,246u,247u,248u,249u,250u,251u,252u,253u,254u,255u), make_v128_i8(16u,15u,14u,13u,12u,11u,10u,9u,8u,7u,6u,5u,4u,3u,2u,1u))->to_v128() == make_v128_i8(240u,241u,242u,243u,244u,245u,246u,247u,8u,7u,6u,5u,4u,3u,2u,1u));
   CHECK(bkend.call_with_return("env", "as-local_set-value-1", make_v128_i64(18446744073709551615u,18446744073709551615u))->to_ui64() == UINT64_C(18446744073709551615));
   CHECK(bkend.call_with_return("env", "as-global_set-value-3", make_v128_f64(0u,0u), bit_cast<double>(UINT64_C(4614253070214989087)))->to_v128() == make_v128_f64(4614253070214989087u,0u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_148_wasm>", "[simd_lane_148_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.148.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_149_wasm>", "[simd_lane_149_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.149.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_150_wasm>", "[simd_lane_150_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.150.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_151_wasm>", "[simd_lane_151_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.151.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_152_wasm>", "[simd_lane_152_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.152.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_153_wasm>", "[simd_lane_153_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.153.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_154_wasm>", "[simd_lane_154_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.154.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_157_wasm>", "[simd_lane_157_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.157.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_160_wasm>", "[simd_lane_160_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.160.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_163_wasm>", "[simd_lane_163_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.163.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_166_wasm>", "[simd_lane_166_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.166.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_169_wasm>", "[simd_lane_169_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.169.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_172_wasm>", "[simd_lane_172_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.172.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_175_wasm>", "[simd_lane_175_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.175.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_176_wasm>", "[simd_lane_176_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.176.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_179_wasm>", "[simd_lane_179_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.179.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_180_wasm>", "[simd_lane_180_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.180.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_183_wasm>", "[simd_lane_183_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.183.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_184_wasm>", "[simd_lane_184_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.184.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_187_wasm>", "[simd_lane_187_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.187.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_188_wasm>", "[simd_lane_188_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.188.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_191_wasm>", "[simd_lane_191_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.191.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_192_wasm>", "[simd_lane_192_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.192.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_195_wasm>", "[simd_lane_195_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.195.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_196_wasm>", "[simd_lane_196_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.196.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_199_wasm>", "[simd_lane_199_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.199.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_29_wasm>", "[simd_lane_29_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.29.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_30_wasm>", "[simd_lane_30_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.30.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_31_wasm>", "[simd_lane_31_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.31.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_32_wasm>", "[simd_lane_32_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.32.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_33_wasm>", "[simd_lane_33_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.33.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_34_wasm>", "[simd_lane_34_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.34.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_35_wasm>", "[simd_lane_35_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.35.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_36_wasm>", "[simd_lane_36_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.36.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_37_wasm>", "[simd_lane_37_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.37.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_38_wasm>", "[simd_lane_38_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.38.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_39_wasm>", "[simd_lane_39_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.39.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_40_wasm>", "[simd_lane_40_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.40.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_41_wasm>", "[simd_lane_41_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.41.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_42_wasm>", "[simd_lane_42_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.42.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_43_wasm>", "[simd_lane_43_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.43.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_44_wasm>", "[simd_lane_44_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.44.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_45_wasm>", "[simd_lane_45_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.45.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_46_wasm>", "[simd_lane_46_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.46.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_47_wasm>", "[simd_lane_47_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.47.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_48_wasm>", "[simd_lane_48_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.48.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_49_wasm>", "[simd_lane_49_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.49.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_50_wasm>", "[simd_lane_50_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.50.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_51_wasm>", "[simd_lane_51_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.51.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_52_wasm>", "[simd_lane_52_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.52.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_53_wasm>", "[simd_lane_53_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.53.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_54_wasm>", "[simd_lane_54_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.54.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_55_wasm>", "[simd_lane_55_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.55.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_56_wasm>", "[simd_lane_56_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.56.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_57_wasm>", "[simd_lane_57_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.57.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_58_wasm>", "[simd_lane_58_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.58.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_59_wasm>", "[simd_lane_59_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.59.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_60_wasm>", "[simd_lane_60_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.60.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_61_wasm>", "[simd_lane_61_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.61.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_62_wasm>", "[simd_lane_62_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.62.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_63_wasm>", "[simd_lane_63_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.63.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_64_wasm>", "[simd_lane_64_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.64.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_65_wasm>", "[simd_lane_65_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.65.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_66_wasm>", "[simd_lane_66_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.66.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_67_wasm>", "[simd_lane_67_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.67.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_68_wasm>", "[simd_lane_68_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.68.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_69_wasm>", "[simd_lane_69_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.69.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_70_wasm>", "[simd_lane_70_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.70.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_71_wasm>", "[simd_lane_71_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.71.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_72_wasm>", "[simd_lane_72_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.72.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_73_wasm>", "[simd_lane_73_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.73.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_74_wasm>", "[simd_lane_74_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.74.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_75_wasm>", "[simd_lane_75_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.75.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_76_wasm>", "[simd_lane_76_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.76.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_77_wasm>", "[simd_lane_77_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.77.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_78_wasm>", "[simd_lane_78_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.78.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_79_wasm>", "[simd_lane_79_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.79.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_80_wasm>", "[simd_lane_80_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.80.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_81_wasm>", "[simd_lane_81_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.81.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_82_wasm>", "[simd_lane_82_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.82.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_83_wasm>", "[simd_lane_83_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.83.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_84_wasm>", "[simd_lane_84_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.84.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_85_wasm>", "[simd_lane_85_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.85.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_86_wasm>", "[simd_lane_86_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.86.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_87_wasm>", "[simd_lane_87_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.87.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_88_wasm>", "[simd_lane_88_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.88.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_89_wasm>", "[simd_lane_89_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.89.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_90_wasm>", "[simd_lane_90_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.90.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_91_wasm>", "[simd_lane_91_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.91.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_lane_96_wasm>", "[simd_lane_96_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_lane.96.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

