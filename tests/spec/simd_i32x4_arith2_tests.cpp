// Generated by spec_test_generator.  DO NOT MODIFY THIS FILE.

#include <algorithm>
#include <vector>
#include <iostream>
#include <iterator>
#include <cmath>
#include <cstdlib>
#include <catch2/catch.hpp>
#include <utils.hpp>
#include <wasm_config.hpp>
#include <eosio/vm/backend.hpp>

using namespace eosio;
using namespace eosio::vm;
extern wasm_allocator wa;

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_arith2_0_wasm>", "[simd_i32x4_arith2_0_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_arith2.0.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "i32x4.min_s", make_v128_i32(0u,0u,0u,0u), make_v128_i32(0u,0u,0u,0u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.min_s", make_v128_i32(0u,0u,0u,0u), make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.min_s", make_v128_i32(0u,0u,4294967295u,4294967295u), make_v128_i32(0u,4294967295u,0u,4294967295u))->to_v128() == make_v128_i32(0u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.min_s", make_v128_i32(0u,0u,0u,0u), make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.min_s", make_v128_i32(1u,1u,1u,1u), make_v128_i32(1u,1u,1u,1u))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.min_s", make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u), make_v128_i32(1u,1u,1u,1u))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.min_s", make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u), make_v128_i32(128u,128u,128u,128u))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.min_s", make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u), make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.min_s", make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u), make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.min_s", make_v128_i32(123u,123u,123u,123u), make_v128_i32(123u,123u,123u,123u))->to_v128() == make_v128_i32(123u,123u,123u,123u));
   CHECK(bkend.call_with_return("env", "i32x4.min_s", make_v128_i32(128u,128u,128u,128u), make_v128_i32(128u,128u,128u,128u))->to_v128() == make_v128_i32(128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i32x4.min_u", make_v128_i32(0u,0u,0u,0u), make_v128_i32(0u,0u,0u,0u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.min_u", make_v128_i32(0u,0u,0u,0u), make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.min_u", make_v128_i32(0u,0u,4294967295u,4294967295u), make_v128_i32(0u,4294967295u,0u,4294967295u))->to_v128() == make_v128_i32(0u,0u,0u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.min_u", make_v128_i32(0u,0u,0u,0u), make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.min_u", make_v128_i32(1u,1u,1u,1u), make_v128_i32(1u,1u,1u,1u))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.min_u", make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u), make_v128_i32(1u,1u,1u,1u))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.min_u", make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u), make_v128_i32(128u,128u,128u,128u))->to_v128() == make_v128_i32(128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i32x4.min_u", make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u), make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.min_u", make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u), make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.min_u", make_v128_i32(123u,123u,123u,123u), make_v128_i32(123u,123u,123u,123u))->to_v128() == make_v128_i32(123u,123u,123u,123u));
   CHECK(bkend.call_with_return("env", "i32x4.min_u", make_v128_i32(128u,128u,128u,128u), make_v128_i32(128u,128u,128u,128u))->to_v128() == make_v128_i32(128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i32x4.max_s", make_v128_i32(0u,0u,0u,0u), make_v128_i32(0u,0u,0u,0u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.max_s", make_v128_i32(0u,0u,0u,0u), make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.max_s", make_v128_i32(0u,0u,4294967295u,4294967295u), make_v128_i32(0u,4294967295u,0u,4294967295u))->to_v128() == make_v128_i32(0u,0u,0u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.max_s", make_v128_i32(0u,0u,0u,0u), make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.max_s", make_v128_i32(1u,1u,1u,1u), make_v128_i32(1u,1u,1u,1u))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.max_s", make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u), make_v128_i32(1u,1u,1u,1u))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.max_s", make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u), make_v128_i32(128u,128u,128u,128u))->to_v128() == make_v128_i32(128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i32x4.max_s", make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u), make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.max_s", make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u), make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.max_s", make_v128_i32(123u,123u,123u,123u), make_v128_i32(123u,123u,123u,123u))->to_v128() == make_v128_i32(123u,123u,123u,123u));
   CHECK(bkend.call_with_return("env", "i32x4.max_s", make_v128_i32(128u,128u,128u,128u), make_v128_i32(128u,128u,128u,128u))->to_v128() == make_v128_i32(128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i32x4.max_u", make_v128_i32(0u,0u,0u,0u), make_v128_i32(0u,0u,0u,0u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.max_u", make_v128_i32(0u,0u,0u,0u), make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.max_u", make_v128_i32(0u,0u,4294967295u,4294967295u), make_v128_i32(0u,4294967295u,0u,4294967295u))->to_v128() == make_v128_i32(0u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.max_u", make_v128_i32(0u,0u,0u,0u), make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.max_u", make_v128_i32(1u,1u,1u,1u), make_v128_i32(1u,1u,1u,1u))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.max_u", make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u), make_v128_i32(1u,1u,1u,1u))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.max_u", make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u), make_v128_i32(128u,128u,128u,128u))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.max_u", make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u), make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.max_u", make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u), make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.max_u", make_v128_i32(123u,123u,123u,123u), make_v128_i32(123u,123u,123u,123u))->to_v128() == make_v128_i32(123u,123u,123u,123u));
   CHECK(bkend.call_with_return("env", "i32x4.max_u", make_v128_i32(128u,128u,128u,128u), make_v128_i32(128u,128u,128u,128u))->to_v128() == make_v128_i32(128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i32x4.abs", make_v128_i32(1u,1u,1u,1u))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.abs", make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.abs", make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.abs", make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.abs", make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.abs", make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.abs", make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.abs", make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u))->to_v128() == make_v128_i32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.abs", make_v128_i32(123u,123u,123u,123u))->to_v128() == make_v128_i32(123u,123u,123u,123u));
   CHECK(bkend.call_with_return("env", "i32x4.abs", make_v128_i32(4294967173u,4294967173u,4294967173u,4294967173u))->to_v128() == make_v128_i32(123u,123u,123u,123u));
   CHECK(bkend.call_with_return("env", "i32x4.abs", make_v128_i32(128u,128u,128u,128u))->to_v128() == make_v128_i32(128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i32x4.abs", make_v128_i32(4294967168u,4294967168u,4294967168u,4294967168u))->to_v128() == make_v128_i32(128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i32x4.abs", make_v128_i32(128u,128u,128u,128u))->to_v128() == make_v128_i32(128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i32x4.abs", make_v128_i32(4294967168u,4294967168u,4294967168u,4294967168u))->to_v128() == make_v128_i32(128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i32x4.min_s_with_const_0")->to_v128() == make_v128_i32(2147483648u,1073741824u,1073741824u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.min_s_with_const_1")->to_v128() == make_v128_i32(0u,1u,1u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.min_u_with_const_2")->to_v128() == make_v128_i32(2147483648u,1073741824u,1073741824u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.min_u_with_const_3")->to_v128() == make_v128_i32(0u,1u,1u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.max_s_with_const_4")->to_v128() == make_v128_i32(4294967295u,2147483647u,2147483647u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.max_s_with_const_5")->to_v128() == make_v128_i32(3u,2u,2u,3u));
   CHECK(bkend.call_with_return("env", "i32x4.max_u_with_const_6")->to_v128() == make_v128_i32(4294967295u,2147483647u,2147483647u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.max_u_with_const_7")->to_v128() == make_v128_i32(3u,2u,2u,3u));
   CHECK(bkend.call_with_return("env", "i32x4.abs_with_const_8")->to_v128() == make_v128_i32(2147483648u,2147483647u,1073741824u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.min_s_with_const_9", make_v128_i32(4294967295u,1073741824u,2147483647u,2147483648u))->to_v128() == make_v128_i32(2147483648u,1073741824u,1073741824u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.min_s_with_const_10", make_v128_i32(3u,2u,1u,0u))->to_v128() == make_v128_i32(0u,1u,1u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.min_u_with_const_11", make_v128_i32(4294967295u,1073741824u,2147483647u,2147483648u))->to_v128() == make_v128_i32(2147483648u,1073741824u,1073741824u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.min_u_with_const_12", make_v128_i32(3u,2u,1u,0u))->to_v128() == make_v128_i32(0u,1u,1u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.max_s_with_const_13", make_v128_i32(4294967295u,1073741824u,2147483647u,2147483648u))->to_v128() == make_v128_i32(4294967295u,2147483647u,2147483647u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.max_s_with_const_14", make_v128_i32(3u,2u,1u,0u))->to_v128() == make_v128_i32(3u,2u,2u,3u));
   CHECK(bkend.call_with_return("env", "i32x4.max_u_with_const_15", make_v128_i32(4294967295u,1073741824u,2147483647u,2147483648u))->to_v128() == make_v128_i32(4294967295u,2147483647u,2147483647u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.max_u_with_const_16", make_v128_i32(3u,2u,1u,0u))->to_v128() == make_v128_i32(3u,2u,2u,3u));
   CHECK(bkend.call_with_return("env", "i32x4.min_s", make_v128_i32(2147483648u,2147483647u,1073741824u,4294967295u), make_v128_i32(4294967295u,1073741824u,2147483647u,2147483648u))->to_v128() == make_v128_i32(2147483648u,1073741824u,1073741824u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.min_s", make_v128_i32(0u,1u,2u,128u), make_v128_i32(0u,2u,1u,128u))->to_v128() == make_v128_i32(0u,1u,1u,128u));
   CHECK(bkend.call_with_return("env", "i32x4.min_u", make_v128_i32(2147483648u,2147483647u,1073741824u,4294967295u), make_v128_i32(4294967295u,1073741824u,2147483647u,2147483648u))->to_v128() == make_v128_i32(2147483648u,1073741824u,1073741824u,2147483648u));
   CHECK(bkend.call_with_return("env", "i32x4.min_u", make_v128_i32(0u,1u,2u,128u), make_v128_i32(0u,2u,1u,128u))->to_v128() == make_v128_i32(0u,1u,1u,128u));
   CHECK(bkend.call_with_return("env", "i32x4.max_s", make_v128_i32(2147483648u,2147483647u,1073741824u,4294967295u), make_v128_i32(4294967295u,1073741824u,2147483647u,2147483648u))->to_v128() == make_v128_i32(4294967295u,2147483647u,2147483647u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.max_s", make_v128_i32(0u,1u,2u,128u), make_v128_i32(0u,2u,1u,128u))->to_v128() == make_v128_i32(0u,2u,2u,128u));
   CHECK(bkend.call_with_return("env", "i32x4.max_u", make_v128_i32(2147483648u,2147483647u,1073741824u,4294967295u), make_v128_i32(4294967295u,1073741824u,2147483647u,2147483648u))->to_v128() == make_v128_i32(4294967295u,2147483647u,2147483647u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.max_u", make_v128_i32(0u,1u,2u,128u), make_v128_i32(0u,2u,1u,128u))->to_v128() == make_v128_i32(0u,2u,2u,128u));
   CHECK(bkend.call_with_return("env", "i32x4.abs", make_v128_i32(2147483648u,2147483647u,1073741824u,4294967295u))->to_v128() == make_v128_i32(2147483648u,2147483647u,1073741824u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.min_s", make_v128_i32(0u,0u,0u,0u), make_v128_i32(0u,0u,0u,0u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.min_s", make_v128_i32(0u,0u,0u,0u), make_v128_i32(0u,0u,0u,0u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.min_u", make_v128_i32(0u,0u,0u,0u), make_v128_i32(0u,0u,0u,0u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.min_u", make_v128_i32(0u,0u,0u,0u), make_v128_i32(0u,0u,0u,0u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.max_s", make_v128_i32(0u,0u,0u,0u), make_v128_i32(0u,0u,0u,0u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.max_s", make_v128_i32(0u,0u,0u,0u), make_v128_i32(0u,0u,0u,0u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.max_u", make_v128_i32(0u,0u,0u,0u), make_v128_i32(0u,0u,0u,0u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.max_u", make_v128_i32(0u,0u,0u,0u), make_v128_i32(0u,0u,0u,0u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.abs", make_v128_i32(0u,0u,0u,0u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.abs", make_v128_i32(0u,0u,0u,0u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.abs", make_v128_i32(0u,0u,0u,0u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.abs", make_v128_i32(0u,0u,0u,0u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_arith2_13_wasm>", "[simd_i32x4_arith2_13_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_arith2.13.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_arith2_14_wasm>", "[simd_i32x4_arith2_14_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_arith2.14.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_arith2_15_wasm>", "[simd_i32x4_arith2_15_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_arith2.15.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_arith2_16_wasm>", "[simd_i32x4_arith2_16_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_arith2.16.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_arith2_17_wasm>", "[simd_i32x4_arith2_17_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_arith2.17.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_arith2_18_wasm>", "[simd_i32x4_arith2_18_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_arith2.18.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_arith2_19_wasm>", "[simd_i32x4_arith2_19_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_arith2.19.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_arith2_20_wasm>", "[simd_i32x4_arith2_20_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_arith2.20.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_arith2_21_wasm>", "[simd_i32x4_arith2_21_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_arith2.21.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_arith2_22_wasm>", "[simd_i32x4_arith2_22_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_arith2.22.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_arith2_23_wasm>", "[simd_i32x4_arith2_23_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_arith2.23.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_arith2_24_wasm>", "[simd_i32x4_arith2_24_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_arith2.24.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_arith2_25_wasm>", "[simd_i32x4_arith2_25_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_arith2.25.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_arith2_26_wasm>", "[simd_i32x4_arith2_26_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_arith2.26.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i32x4_arith2_27_wasm>", "[simd_i32x4_arith2_27_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i32x4_arith2.27.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "i32x4.min_s-i32x4.max_u", make_v128_i32(0u,0u,0u,0u), make_v128_i32(1u,1u,1u,1u), make_v128_i32(2u,2u,2u,2u))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.min_s-i32x4.max_s", make_v128_i32(0u,0u,0u,0u), make_v128_i32(1u,1u,1u,1u), make_v128_i32(2u,2u,2u,2u))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.min_s-i32x4.min_u", make_v128_i32(0u,0u,0u,0u), make_v128_i32(1u,1u,1u,1u), make_v128_i32(2u,2u,2u,2u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.min_s-i32x4.min_s", make_v128_i32(0u,0u,0u,0u), make_v128_i32(1u,1u,1u,1u), make_v128_i32(2u,2u,2u,2u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.min_s-i32x4.abs", make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u), make_v128_i32(0u,0u,0u,0u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.abs-i32x4.min_s", make_v128_i32(0u,0u,0u,0u), make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.min_u-i32x4.max_u", make_v128_i32(0u,0u,0u,0u), make_v128_i32(1u,1u,1u,1u), make_v128_i32(2u,2u,2u,2u))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.min_u-i32x4.max_s", make_v128_i32(0u,0u,0u,0u), make_v128_i32(1u,1u,1u,1u), make_v128_i32(2u,2u,2u,2u))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.min_u-i32x4.min_u", make_v128_i32(0u,0u,0u,0u), make_v128_i32(1u,1u,1u,1u), make_v128_i32(2u,2u,2u,2u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.min_u-i32x4.min_s", make_v128_i32(0u,0u,0u,0u), make_v128_i32(1u,1u,1u,1u), make_v128_i32(2u,2u,2u,2u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.min_u-i32x4.abs", make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u), make_v128_i32(0u,0u,0u,0u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.abs-i32x4.min_u", make_v128_i32(0u,0u,0u,0u), make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.max_s-i32x4.max_u", make_v128_i32(0u,0u,0u,0u), make_v128_i32(1u,1u,1u,1u), make_v128_i32(2u,2u,2u,2u))->to_v128() == make_v128_i32(2u,2u,2u,2u));
   CHECK(bkend.call_with_return("env", "i32x4.max_s-i32x4.max_s", make_v128_i32(0u,0u,0u,0u), make_v128_i32(1u,1u,1u,1u), make_v128_i32(2u,2u,2u,2u))->to_v128() == make_v128_i32(2u,2u,2u,2u));
   CHECK(bkend.call_with_return("env", "i32x4.max_s-i32x4.min_u", make_v128_i32(0u,0u,0u,0u), make_v128_i32(1u,1u,1u,1u), make_v128_i32(2u,2u,2u,2u))->to_v128() == make_v128_i32(2u,2u,2u,2u));
   CHECK(bkend.call_with_return("env", "i32x4.max_s-i32x4.min_s", make_v128_i32(0u,0u,0u,0u), make_v128_i32(1u,1u,1u,1u), make_v128_i32(2u,2u,2u,2u))->to_v128() == make_v128_i32(2u,2u,2u,2u));
   CHECK(bkend.call_with_return("env", "i32x4.max_s-i32x4.abs", make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u), make_v128_i32(0u,0u,0u,0u))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.abs-i32x4.max_s", make_v128_i32(0u,0u,0u,0u), make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.max_u-i32x4.max_u", make_v128_i32(0u,0u,0u,0u), make_v128_i32(1u,1u,1u,1u), make_v128_i32(2u,2u,2u,2u))->to_v128() == make_v128_i32(2u,2u,2u,2u));
   CHECK(bkend.call_with_return("env", "i32x4.max_u-i32x4.max_s", make_v128_i32(0u,0u,0u,0u), make_v128_i32(1u,1u,1u,1u), make_v128_i32(2u,2u,2u,2u))->to_v128() == make_v128_i32(2u,2u,2u,2u));
   CHECK(bkend.call_with_return("env", "i32x4.max_u-i32x4.min_u", make_v128_i32(0u,0u,0u,0u), make_v128_i32(1u,1u,1u,1u), make_v128_i32(2u,2u,2u,2u))->to_v128() == make_v128_i32(2u,2u,2u,2u));
   CHECK(bkend.call_with_return("env", "i32x4.max_u-i32x4.min_s", make_v128_i32(0u,0u,0u,0u), make_v128_i32(1u,1u,1u,1u), make_v128_i32(2u,2u,2u,2u))->to_v128() == make_v128_i32(2u,2u,2u,2u));
   CHECK(bkend.call_with_return("env", "i32x4.max_u-i32x4.abs", make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u), make_v128_i32(0u,0u,0u,0u))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.abs-i32x4.max_u", make_v128_i32(0u,0u,0u,0u), make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.abs-i32x4.abs", make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u))->to_v128() == make_v128_i32(1u,1u,1u,1u));
}

