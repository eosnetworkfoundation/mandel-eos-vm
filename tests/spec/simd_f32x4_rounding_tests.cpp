// Generated by spec_test_generator.  DO NOT MODIFY THIS FILE.

#include <algorithm>
#include <vector>
#include <iostream>
#include <iterator>
#include <cmath>
#include <cstdlib>
#include <catch2/catch.hpp>
#include <utils.hpp>
#include <wasm_config.hpp>
#include <eosio/vm/backend.hpp>

using namespace eosio;
using namespace eosio::vm;
extern wasm_allocator wa;

BACKEND_TEST_CASE( "Testing wasm <simd_f32x4_rounding_0_wasm>", "[simd_f32x4_rounding_0_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_f32x4_rounding.0.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(0,0,0,0))->to_v128() == make_v128_f32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(2147483648,2147483648,2147483648,2147483648))->to_v128() == make_v128_f32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(1,1,1,1))->to_v128() == make_v128_f32(1065353216u,1065353216u,1065353216u,1065353216u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(2147483649,2147483649,2147483649,2147483649))->to_v128() == make_v128_f32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(8388608,8388608,8388608,8388608))->to_v128() == make_v128_f32(1065353216u,1065353216u,1065353216u,1065353216u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(2155872256,2155872256,2155872256,2155872256))->to_v128() == make_v128_f32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(1056964608,1056964608,1056964608,1056964608))->to_v128() == make_v128_f32(1065353216u,1065353216u,1065353216u,1065353216u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(3204448256,3204448256,3204448256,3204448256))->to_v128() == make_v128_f32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(1065353216,1065353216,1065353216,1065353216))->to_v128() == make_v128_f32(1065353216u,1065353216u,1065353216u,1065353216u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(3212836864,3212836864,3212836864,3212836864))->to_v128() == make_v128_f32(3212836864u,3212836864u,3212836864u,3212836864u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(1086918619,1086918619,1086918619,1086918619))->to_v128() == make_v128_f32(1088421888u,1088421888u,1088421888u,1088421888u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(3234402267,3234402267,3234402267,3234402267))->to_v128() == make_v128_f32(3233808384u,3233808384u,3233808384u,3233808384u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(2139095039,2139095039,2139095039,2139095039))->to_v128() == make_v128_f32(2139095039u,2139095039u,2139095039u,2139095039u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(4286578687,4286578687,4286578687,4286578687))->to_v128() == make_v128_f32(4286578687u,4286578687u,4286578687u,4286578687u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(2139095040,2139095040,2139095040,2139095040))->to_v128() == make_v128_f32(2139095040u,2139095040u,2139095040u,2139095040u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(4286578688,4286578688,4286578688,4286578688))->to_v128() == make_v128_f32(4286578688u,4286578688u,4286578688u,4286578688u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(1290500515,1290500515,1290500515,1290500515))->to_v128() == make_v128_f32(1290500515u,1290500515u,1290500515u,1290500515u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(1820282235,1820282235,1820282235,1820282235))->to_v128() == make_v128_f32(1820282235u,1820282235u,1820282235u,1820282235u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(1820282235,1820282235,1820282235,1820282235))->to_v128() == make_v128_f32(1820282235u,1820282235u,1820282235u,1820282235u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(760819711,760819711,760819711,760819711))->to_v128() == make_v128_f32(1065353216u,1065353216u,1065353216u,1065353216u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(1290500515,1290500515,1290500515,1290500515))->to_v128() == make_v128_f32(1290500515u,1290500515u,1290500515u,1290500515u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(1820282235,1820282235,1820282235,1820282235))->to_v128() == make_v128_f32(1820282235u,1820282235u,1820282235u,1820282235u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(1820282235,1820282235,1820282235,1820282235))->to_v128() == make_v128_f32(1820282235u,1820282235u,1820282235u,1820282235u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(760819711,760819711,760819711,760819711))->to_v128() == make_v128_f32(1065353216u,1065353216u,1065353216u,1065353216u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(1290500515,1290500515,1290500515,1290500515))->to_v128() == make_v128_f32(1290500515u,1290500515u,1290500515u,1290500515u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(1820282235,1820282235,1820282235,1820282235))->to_v128() == make_v128_f32(1820282235u,1820282235u,1820282235u,1820282235u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(1820282235,1820282235,1820282235,1820282235))->to_v128() == make_v128_f32(1820282235u,1820282235u,1820282235u,1820282235u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(760819711,760819711,760819711,760819711))->to_v128() == make_v128_f32(1065353216u,1065353216u,1065353216u,1065353216u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(1536271028,1536271028,1536271028,1536271028))->to_v128() == make_v128_f32(1536271028u,1536271028u,1536271028u,1536271028u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(1695654580,1695654580,1695654580,1695654580))->to_v128() == make_v128_f32(1695654580u,1695654580u,1695654580u,1695654580u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(1695654580,1695654580,1695654580,1695654580))->to_v128() == make_v128_f32(1695654580u,1695654580u,1695654580u,1695654580u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(1376887476,1376887476,1376887476,1376887476))->to_v128() == make_v128_f32(1376887476u,1376887476u,1376887476u,1376887476u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(1536271028,1536271028,1536271028,1536271028))->to_v128() == make_v128_f32(1536271028u,1536271028u,1536271028u,1536271028u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(1695654580,1695654580,1695654580,1695654580))->to_v128() == make_v128_f32(1695654580u,1695654580u,1695654580u,1695654580u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(1695654580,1695654580,1695654580,1695654580))->to_v128() == make_v128_f32(1695654580u,1695654580u,1695654580u,1695654580u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(1376887476,1376887476,1376887476,1376887476))->to_v128() == make_v128_f32(1376887476u,1376887476u,1376887476u,1376887476u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(1536271028,1536271028,1536271028,1536271028))->to_v128() == make_v128_f32(1536271028u,1536271028u,1536271028u,1536271028u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(1695654580,1695654580,1695654580,1695654580))->to_v128() == make_v128_f32(1695654580u,1695654580u,1695654580u,1695654580u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(1695654580,1695654580,1695654580,1695654580))->to_v128() == make_v128_f32(1695654580u,1695654580u,1695654580u,1695654580u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(1376887476,1376887476,1376887476,1376887476))->to_v128() == make_v128_f32(1376887476u,1376887476u,1376887476u,1376887476u));
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(2143289344,2143289344,2143289344,2143289344))->to_v128() == v128_matcher{nan_canonical_t{},nan_canonical_t{},nan_canonical_t{},nan_canonical_t{}});
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(4290772992,4290772992,4290772992,4290772992))->to_v128() == v128_matcher{nan_canonical_t{},nan_canonical_t{},nan_canonical_t{},nan_canonical_t{}});
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(2141192192,2141192192,2141192192,2141192192))->to_v128() == v128_matcher{nan_arithmetic_t{},nan_arithmetic_t{},nan_arithmetic_t{},nan_arithmetic_t{}});
   CHECK(bkend.call_with_return("env", "f32x4.ceil", make_v128_f32(4288675840,4288675840,4288675840,4288675840))->to_v128() == v128_matcher{nan_arithmetic_t{},nan_arithmetic_t{},nan_arithmetic_t{},nan_arithmetic_t{}});
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(0,0,0,0))->to_v128() == make_v128_f32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(2147483648,2147483648,2147483648,2147483648))->to_v128() == make_v128_f32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(1,1,1,1))->to_v128() == make_v128_f32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(2147483649,2147483649,2147483649,2147483649))->to_v128() == make_v128_f32(3212836864u,3212836864u,3212836864u,3212836864u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(8388608,8388608,8388608,8388608))->to_v128() == make_v128_f32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(2155872256,2155872256,2155872256,2155872256))->to_v128() == make_v128_f32(3212836864u,3212836864u,3212836864u,3212836864u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(1056964608,1056964608,1056964608,1056964608))->to_v128() == make_v128_f32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(3204448256,3204448256,3204448256,3204448256))->to_v128() == make_v128_f32(3212836864u,3212836864u,3212836864u,3212836864u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(1065353216,1065353216,1065353216,1065353216))->to_v128() == make_v128_f32(1065353216u,1065353216u,1065353216u,1065353216u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(3212836864,3212836864,3212836864,3212836864))->to_v128() == make_v128_f32(3212836864u,3212836864u,3212836864u,3212836864u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(1086918619,1086918619,1086918619,1086918619))->to_v128() == make_v128_f32(1086324736u,1086324736u,1086324736u,1086324736u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(3234402267,3234402267,3234402267,3234402267))->to_v128() == make_v128_f32(3235905536u,3235905536u,3235905536u,3235905536u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(2139095039,2139095039,2139095039,2139095039))->to_v128() == make_v128_f32(2139095039u,2139095039u,2139095039u,2139095039u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(4286578687,4286578687,4286578687,4286578687))->to_v128() == make_v128_f32(4286578687u,4286578687u,4286578687u,4286578687u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(2139095040,2139095040,2139095040,2139095040))->to_v128() == make_v128_f32(2139095040u,2139095040u,2139095040u,2139095040u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(4286578688,4286578688,4286578688,4286578688))->to_v128() == make_v128_f32(4286578688u,4286578688u,4286578688u,4286578688u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(1290500515,1290500515,1290500515,1290500515))->to_v128() == make_v128_f32(1290500515u,1290500515u,1290500515u,1290500515u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(1820282235,1820282235,1820282235,1820282235))->to_v128() == make_v128_f32(1820282235u,1820282235u,1820282235u,1820282235u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(1820282235,1820282235,1820282235,1820282235))->to_v128() == make_v128_f32(1820282235u,1820282235u,1820282235u,1820282235u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(760819711,760819711,760819711,760819711))->to_v128() == make_v128_f32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(1290500515,1290500515,1290500515,1290500515))->to_v128() == make_v128_f32(1290500515u,1290500515u,1290500515u,1290500515u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(1820282235,1820282235,1820282235,1820282235))->to_v128() == make_v128_f32(1820282235u,1820282235u,1820282235u,1820282235u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(1820282235,1820282235,1820282235,1820282235))->to_v128() == make_v128_f32(1820282235u,1820282235u,1820282235u,1820282235u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(760819711,760819711,760819711,760819711))->to_v128() == make_v128_f32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(1290500515,1290500515,1290500515,1290500515))->to_v128() == make_v128_f32(1290500515u,1290500515u,1290500515u,1290500515u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(1820282235,1820282235,1820282235,1820282235))->to_v128() == make_v128_f32(1820282235u,1820282235u,1820282235u,1820282235u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(1820282235,1820282235,1820282235,1820282235))->to_v128() == make_v128_f32(1820282235u,1820282235u,1820282235u,1820282235u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(760819711,760819711,760819711,760819711))->to_v128() == make_v128_f32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(1536271028,1536271028,1536271028,1536271028))->to_v128() == make_v128_f32(1536271028u,1536271028u,1536271028u,1536271028u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(1695654580,1695654580,1695654580,1695654580))->to_v128() == make_v128_f32(1695654580u,1695654580u,1695654580u,1695654580u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(1695654580,1695654580,1695654580,1695654580))->to_v128() == make_v128_f32(1695654580u,1695654580u,1695654580u,1695654580u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(1376887476,1376887476,1376887476,1376887476))->to_v128() == make_v128_f32(1376887476u,1376887476u,1376887476u,1376887476u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(1536271028,1536271028,1536271028,1536271028))->to_v128() == make_v128_f32(1536271028u,1536271028u,1536271028u,1536271028u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(1695654580,1695654580,1695654580,1695654580))->to_v128() == make_v128_f32(1695654580u,1695654580u,1695654580u,1695654580u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(1695654580,1695654580,1695654580,1695654580))->to_v128() == make_v128_f32(1695654580u,1695654580u,1695654580u,1695654580u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(1376887476,1376887476,1376887476,1376887476))->to_v128() == make_v128_f32(1376887476u,1376887476u,1376887476u,1376887476u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(1536271028,1536271028,1536271028,1536271028))->to_v128() == make_v128_f32(1536271028u,1536271028u,1536271028u,1536271028u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(1695654580,1695654580,1695654580,1695654580))->to_v128() == make_v128_f32(1695654580u,1695654580u,1695654580u,1695654580u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(1695654580,1695654580,1695654580,1695654580))->to_v128() == make_v128_f32(1695654580u,1695654580u,1695654580u,1695654580u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(1376887476,1376887476,1376887476,1376887476))->to_v128() == make_v128_f32(1376887476u,1376887476u,1376887476u,1376887476u));
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(2143289344,2143289344,2143289344,2143289344))->to_v128() == v128_matcher{nan_canonical_t{},nan_canonical_t{},nan_canonical_t{},nan_canonical_t{}});
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(4290772992,4290772992,4290772992,4290772992))->to_v128() == v128_matcher{nan_canonical_t{},nan_canonical_t{},nan_canonical_t{},nan_canonical_t{}});
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(2141192192,2141192192,2141192192,2141192192))->to_v128() == v128_matcher{nan_arithmetic_t{},nan_arithmetic_t{},nan_arithmetic_t{},nan_arithmetic_t{}});
   CHECK(bkend.call_with_return("env", "f32x4.floor", make_v128_f32(4288675840,4288675840,4288675840,4288675840))->to_v128() == v128_matcher{nan_arithmetic_t{},nan_arithmetic_t{},nan_arithmetic_t{},nan_arithmetic_t{}});
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(0,0,0,0))->to_v128() == make_v128_f32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(2147483648,2147483648,2147483648,2147483648))->to_v128() == make_v128_f32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(1,1,1,1))->to_v128() == make_v128_f32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(2147483649,2147483649,2147483649,2147483649))->to_v128() == make_v128_f32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(8388608,8388608,8388608,8388608))->to_v128() == make_v128_f32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(2155872256,2155872256,2155872256,2155872256))->to_v128() == make_v128_f32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(1056964608,1056964608,1056964608,1056964608))->to_v128() == make_v128_f32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(3204448256,3204448256,3204448256,3204448256))->to_v128() == make_v128_f32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(1065353216,1065353216,1065353216,1065353216))->to_v128() == make_v128_f32(1065353216u,1065353216u,1065353216u,1065353216u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(3212836864,3212836864,3212836864,3212836864))->to_v128() == make_v128_f32(3212836864u,3212836864u,3212836864u,3212836864u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(1086918619,1086918619,1086918619,1086918619))->to_v128() == make_v128_f32(1086324736u,1086324736u,1086324736u,1086324736u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(3234402267,3234402267,3234402267,3234402267))->to_v128() == make_v128_f32(3233808384u,3233808384u,3233808384u,3233808384u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(2139095039,2139095039,2139095039,2139095039))->to_v128() == make_v128_f32(2139095039u,2139095039u,2139095039u,2139095039u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(4286578687,4286578687,4286578687,4286578687))->to_v128() == make_v128_f32(4286578687u,4286578687u,4286578687u,4286578687u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(2139095040,2139095040,2139095040,2139095040))->to_v128() == make_v128_f32(2139095040u,2139095040u,2139095040u,2139095040u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(4286578688,4286578688,4286578688,4286578688))->to_v128() == make_v128_f32(4286578688u,4286578688u,4286578688u,4286578688u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(1290500515,1290500515,1290500515,1290500515))->to_v128() == make_v128_f32(1290500515u,1290500515u,1290500515u,1290500515u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(1820282235,1820282235,1820282235,1820282235))->to_v128() == make_v128_f32(1820282235u,1820282235u,1820282235u,1820282235u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(1820282235,1820282235,1820282235,1820282235))->to_v128() == make_v128_f32(1820282235u,1820282235u,1820282235u,1820282235u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(760819711,760819711,760819711,760819711))->to_v128() == make_v128_f32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(1290500515,1290500515,1290500515,1290500515))->to_v128() == make_v128_f32(1290500515u,1290500515u,1290500515u,1290500515u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(1820282235,1820282235,1820282235,1820282235))->to_v128() == make_v128_f32(1820282235u,1820282235u,1820282235u,1820282235u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(1820282235,1820282235,1820282235,1820282235))->to_v128() == make_v128_f32(1820282235u,1820282235u,1820282235u,1820282235u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(760819711,760819711,760819711,760819711))->to_v128() == make_v128_f32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(1290500515,1290500515,1290500515,1290500515))->to_v128() == make_v128_f32(1290500515u,1290500515u,1290500515u,1290500515u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(1820282235,1820282235,1820282235,1820282235))->to_v128() == make_v128_f32(1820282235u,1820282235u,1820282235u,1820282235u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(1820282235,1820282235,1820282235,1820282235))->to_v128() == make_v128_f32(1820282235u,1820282235u,1820282235u,1820282235u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(760819711,760819711,760819711,760819711))->to_v128() == make_v128_f32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(1536271028,1536271028,1536271028,1536271028))->to_v128() == make_v128_f32(1536271028u,1536271028u,1536271028u,1536271028u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(1695654580,1695654580,1695654580,1695654580))->to_v128() == make_v128_f32(1695654580u,1695654580u,1695654580u,1695654580u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(1695654580,1695654580,1695654580,1695654580))->to_v128() == make_v128_f32(1695654580u,1695654580u,1695654580u,1695654580u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(1376887476,1376887476,1376887476,1376887476))->to_v128() == make_v128_f32(1376887476u,1376887476u,1376887476u,1376887476u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(1536271028,1536271028,1536271028,1536271028))->to_v128() == make_v128_f32(1536271028u,1536271028u,1536271028u,1536271028u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(1695654580,1695654580,1695654580,1695654580))->to_v128() == make_v128_f32(1695654580u,1695654580u,1695654580u,1695654580u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(1695654580,1695654580,1695654580,1695654580))->to_v128() == make_v128_f32(1695654580u,1695654580u,1695654580u,1695654580u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(1376887476,1376887476,1376887476,1376887476))->to_v128() == make_v128_f32(1376887476u,1376887476u,1376887476u,1376887476u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(1536271028,1536271028,1536271028,1536271028))->to_v128() == make_v128_f32(1536271028u,1536271028u,1536271028u,1536271028u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(1695654580,1695654580,1695654580,1695654580))->to_v128() == make_v128_f32(1695654580u,1695654580u,1695654580u,1695654580u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(1695654580,1695654580,1695654580,1695654580))->to_v128() == make_v128_f32(1695654580u,1695654580u,1695654580u,1695654580u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(1376887476,1376887476,1376887476,1376887476))->to_v128() == make_v128_f32(1376887476u,1376887476u,1376887476u,1376887476u));
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(2143289344,2143289344,2143289344,2143289344))->to_v128() == v128_matcher{nan_canonical_t{},nan_canonical_t{},nan_canonical_t{},nan_canonical_t{}});
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(4290772992,4290772992,4290772992,4290772992))->to_v128() == v128_matcher{nan_canonical_t{},nan_canonical_t{},nan_canonical_t{},nan_canonical_t{}});
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(2141192192,2141192192,2141192192,2141192192))->to_v128() == v128_matcher{nan_arithmetic_t{},nan_arithmetic_t{},nan_arithmetic_t{},nan_arithmetic_t{}});
   CHECK(bkend.call_with_return("env", "f32x4.trunc", make_v128_f32(4288675840,4288675840,4288675840,4288675840))->to_v128() == v128_matcher{nan_arithmetic_t{},nan_arithmetic_t{},nan_arithmetic_t{},nan_arithmetic_t{}});
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(0,0,0,0))->to_v128() == make_v128_f32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(2147483648,2147483648,2147483648,2147483648))->to_v128() == make_v128_f32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(1,1,1,1))->to_v128() == make_v128_f32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(2147483649,2147483649,2147483649,2147483649))->to_v128() == make_v128_f32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(8388608,8388608,8388608,8388608))->to_v128() == make_v128_f32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(2155872256,2155872256,2155872256,2155872256))->to_v128() == make_v128_f32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(1056964608,1056964608,1056964608,1056964608))->to_v128() == make_v128_f32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(3204448256,3204448256,3204448256,3204448256))->to_v128() == make_v128_f32(2147483648u,2147483648u,2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(1065353216,1065353216,1065353216,1065353216))->to_v128() == make_v128_f32(1065353216u,1065353216u,1065353216u,1065353216u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(3212836864,3212836864,3212836864,3212836864))->to_v128() == make_v128_f32(3212836864u,3212836864u,3212836864u,3212836864u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(1086918619,1086918619,1086918619,1086918619))->to_v128() == make_v128_f32(1086324736u,1086324736u,1086324736u,1086324736u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(3234402267,3234402267,3234402267,3234402267))->to_v128() == make_v128_f32(3233808384u,3233808384u,3233808384u,3233808384u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(2139095039,2139095039,2139095039,2139095039))->to_v128() == make_v128_f32(2139095039u,2139095039u,2139095039u,2139095039u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(4286578687,4286578687,4286578687,4286578687))->to_v128() == make_v128_f32(4286578687u,4286578687u,4286578687u,4286578687u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(2139095040,2139095040,2139095040,2139095040))->to_v128() == make_v128_f32(2139095040u,2139095040u,2139095040u,2139095040u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(4286578688,4286578688,4286578688,4286578688))->to_v128() == make_v128_f32(4286578688u,4286578688u,4286578688u,4286578688u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(1290500515,1290500515,1290500515,1290500515))->to_v128() == make_v128_f32(1290500515u,1290500515u,1290500515u,1290500515u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(1820282235,1820282235,1820282235,1820282235))->to_v128() == make_v128_f32(1820282235u,1820282235u,1820282235u,1820282235u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(1820282235,1820282235,1820282235,1820282235))->to_v128() == make_v128_f32(1820282235u,1820282235u,1820282235u,1820282235u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(760819711,760819711,760819711,760819711))->to_v128() == make_v128_f32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(1290500515,1290500515,1290500515,1290500515))->to_v128() == make_v128_f32(1290500515u,1290500515u,1290500515u,1290500515u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(1820282235,1820282235,1820282235,1820282235))->to_v128() == make_v128_f32(1820282235u,1820282235u,1820282235u,1820282235u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(1820282235,1820282235,1820282235,1820282235))->to_v128() == make_v128_f32(1820282235u,1820282235u,1820282235u,1820282235u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(760819711,760819711,760819711,760819711))->to_v128() == make_v128_f32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(1290500515,1290500515,1290500515,1290500515))->to_v128() == make_v128_f32(1290500515u,1290500515u,1290500515u,1290500515u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(1820282235,1820282235,1820282235,1820282235))->to_v128() == make_v128_f32(1820282235u,1820282235u,1820282235u,1820282235u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(1820282235,1820282235,1820282235,1820282235))->to_v128() == make_v128_f32(1820282235u,1820282235u,1820282235u,1820282235u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(760819711,760819711,760819711,760819711))->to_v128() == make_v128_f32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(1536271028,1536271028,1536271028,1536271028))->to_v128() == make_v128_f32(1536271028u,1536271028u,1536271028u,1536271028u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(1695654580,1695654580,1695654580,1695654580))->to_v128() == make_v128_f32(1695654580u,1695654580u,1695654580u,1695654580u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(1695654580,1695654580,1695654580,1695654580))->to_v128() == make_v128_f32(1695654580u,1695654580u,1695654580u,1695654580u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(1376887476,1376887476,1376887476,1376887476))->to_v128() == make_v128_f32(1376887476u,1376887476u,1376887476u,1376887476u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(1536271028,1536271028,1536271028,1536271028))->to_v128() == make_v128_f32(1536271028u,1536271028u,1536271028u,1536271028u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(1695654580,1695654580,1695654580,1695654580))->to_v128() == make_v128_f32(1695654580u,1695654580u,1695654580u,1695654580u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(1695654580,1695654580,1695654580,1695654580))->to_v128() == make_v128_f32(1695654580u,1695654580u,1695654580u,1695654580u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(1376887476,1376887476,1376887476,1376887476))->to_v128() == make_v128_f32(1376887476u,1376887476u,1376887476u,1376887476u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(1536271028,1536271028,1536271028,1536271028))->to_v128() == make_v128_f32(1536271028u,1536271028u,1536271028u,1536271028u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(1695654580,1695654580,1695654580,1695654580))->to_v128() == make_v128_f32(1695654580u,1695654580u,1695654580u,1695654580u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(1695654580,1695654580,1695654580,1695654580))->to_v128() == make_v128_f32(1695654580u,1695654580u,1695654580u,1695654580u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(1376887476,1376887476,1376887476,1376887476))->to_v128() == make_v128_f32(1376887476u,1376887476u,1376887476u,1376887476u));
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(2143289344,2143289344,2143289344,2143289344))->to_v128() == v128_matcher{nan_canonical_t{},nan_canonical_t{},nan_canonical_t{},nan_canonical_t{}});
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(4290772992,4290772992,4290772992,4290772992))->to_v128() == v128_matcher{nan_canonical_t{},nan_canonical_t{},nan_canonical_t{},nan_canonical_t{}});
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(2141192192,2141192192,2141192192,2141192192))->to_v128() == v128_matcher{nan_arithmetic_t{},nan_arithmetic_t{},nan_arithmetic_t{},nan_arithmetic_t{}});
   CHECK(bkend.call_with_return("env", "f32x4.nearest", make_v128_f32(4288675840,4288675840,4288675840,4288675840))->to_v128() == v128_matcher{nan_arithmetic_t{},nan_arithmetic_t{},nan_arithmetic_t{},nan_arithmetic_t{}});
}

BACKEND_TEST_CASE( "Testing wasm <simd_f32x4_rounding_17_wasm>", "[simd_f32x4_rounding_17_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_f32x4_rounding.17.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_f32x4_rounding_18_wasm>", "[simd_f32x4_rounding_18_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_f32x4_rounding.18.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_f32x4_rounding_19_wasm>", "[simd_f32x4_rounding_19_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_f32x4_rounding.19.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_f32x4_rounding_20_wasm>", "[simd_f32x4_rounding_20_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_f32x4_rounding.20.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_f32x4_rounding_21_wasm>", "[simd_f32x4_rounding_21_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_f32x4_rounding.21.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_f32x4_rounding_22_wasm>", "[simd_f32x4_rounding_22_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_f32x4_rounding.22.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_f32x4_rounding_23_wasm>", "[simd_f32x4_rounding_23_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_f32x4_rounding.23.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_f32x4_rounding_24_wasm>", "[simd_f32x4_rounding_24_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_f32x4_rounding.24.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

