// Generated by spec_test_generator.  DO NOT MODIFY THIS FILE.

#include <algorithm>
#include <vector>
#include <iostream>
#include <iterator>
#include <cmath>
#include <cstdlib>
#include <catch2/catch.hpp>
#include <utils.hpp>
#include <wasm_config.hpp>
#include <eosio/vm/backend.hpp>

using namespace eosio;
using namespace eosio::vm;
extern wasm_allocator wa;

BACKEND_TEST_CASE( "Testing wasm <simd_boolean_0_wasm>", "[simd_boolean_0_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_boolean.0.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "i8x16.any_true", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i8x16.any_true", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,1u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i8x16.any_true", make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,0u,1u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i8x16.any_true", make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i8x16.any_true", make_v128_i8(255u,0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,15u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i8x16.any_true", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i8x16.any_true", make_v128_i8(255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i8x16.any_true", make_v128_i8(171u,171u,171u,171u,171u,171u,171u,171u,171u,171u,171u,171u,171u,171u,171u,171u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i8x16.any_true", make_v128_i8(85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i8x16.all_true", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i8x16.all_true", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,1u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i8x16.all_true", make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,0u,1u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i8x16.all_true", make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i8x16.all_true", make_v128_i8(255u,0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,15u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i8x16.all_true", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i8x16.all_true", make_v128_i8(255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i8x16.all_true", make_v128_i8(171u,171u,171u,171u,171u,171u,171u,171u,171u,171u,171u,171u,171u,171u,171u,171u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i8x16.all_true", make_v128_i8(85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i8x16.bitmask", make_v128_i8(255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u))->to_ui32() == UINT32_C(65535));
   CHECK(bkend.call_with_return("env", "i8x16.bitmask", make_v128_i8(255u,0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,15u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8.any_true", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i16x8.any_true", make_v128_i16(0u,0u,0u,0u,0u,0u,1u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8.any_true", make_v128_i16(1u,1u,1u,1u,1u,1u,0u,1u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8.any_true", make_v128_i16(1u,1u,1u,1u,1u,1u,1u,1u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8.any_true", make_v128_i16(65535u,0u,1u,2u,11u,12u,13u,15u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8.any_true", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i16x8.any_true", make_v128_i16(255u,255u,255u,255u,255u,255u,255u,255u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8.any_true", make_v128_i16(171u,171u,171u,171u,171u,171u,171u,171u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8.any_true", make_v128_i16(85u,85u,85u,85u,85u,85u,85u,85u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8.any_true", make_v128_i16(12345u,12345u,12345u,12345u,12345u,12345u,12345u,12345u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8.any_true", make_v128_i16(4660u,4660u,4660u,4660u,4660u,4660u,4660u,4660u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8.all_true", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i16x8.all_true", make_v128_i16(0u,0u,0u,0u,0u,0u,1u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i16x8.all_true", make_v128_i16(1u,1u,1u,1u,1u,1u,0u,1u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i16x8.all_true", make_v128_i16(1u,1u,1u,1u,1u,1u,1u,1u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8.all_true", make_v128_i16(65535u,0u,1u,2u,11u,12u,13u,15u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i16x8.all_true", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i16x8.all_true", make_v128_i16(255u,255u,255u,255u,255u,255u,255u,255u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8.all_true", make_v128_i16(171u,171u,171u,171u,171u,171u,171u,171u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8.all_true", make_v128_i16(85u,85u,85u,85u,85u,85u,85u,85u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8.all_true", make_v128_i16(12345u,12345u,12345u,12345u,12345u,12345u,12345u,12345u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8.all_true", make_v128_i16(4660u,4660u,4660u,4660u,4660u,4660u,4660u,4660u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8.bitmask", make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u))->to_ui32() == UINT32_C(255));
   CHECK(bkend.call_with_return("env", "i16x8.bitmask", make_v128_i16(65535u,0u,1u,2u,11u,12u,13u,15u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4.any_true", make_v128_i32(0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i32x4.any_true", make_v128_i32(0u,0u,1u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4.any_true", make_v128_i32(1u,1u,0u,1u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4.any_true", make_v128_i32(1u,1u,1u,1u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4.any_true", make_v128_i32(4294967295u,0u,1u,15u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4.any_true", make_v128_i32(0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i32x4.any_true", make_v128_i32(255u,255u,255u,255u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4.any_true", make_v128_i32(171u,171u,171u,171u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4.any_true", make_v128_i32(85u,85u,85u,85u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4.any_true", make_v128_i32(1234567890u,1234567890u,1234567890u,1234567890u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4.any_true", make_v128_i32(305419896u,305419896u,305419896u,305419896u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4.all_true", make_v128_i32(0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i32x4.all_true", make_v128_i32(0u,0u,1u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i32x4.all_true", make_v128_i32(1u,1u,0u,1u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i32x4.all_true", make_v128_i32(1u,1u,1u,1u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4.all_true", make_v128_i32(4294967295u,0u,1u,15u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i32x4.all_true", make_v128_i32(0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i32x4.all_true", make_v128_i32(255u,255u,255u,255u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4.all_true", make_v128_i32(171u,171u,171u,171u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4.all_true", make_v128_i32(85u,85u,85u,85u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4.all_true", make_v128_i32(1234567890u,1234567890u,1234567890u,1234567890u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4.all_true", make_v128_i32(305419896u,305419896u,305419896u,305419896u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4.bitmask", make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u))->to_ui32() == UINT32_C(15));
   CHECK(bkend.call_with_return("env", "i32x4.bitmask", make_v128_i32(4294967295u,0u,1u,15u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i64x2.all_true", make_v128_i64(0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i64x2.all_true", make_v128_i64(0u,1u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i64x2.all_true", make_v128_i64(1u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i64x2.all_true", make_v128_i64(1u,1u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i64x2.all_true", make_v128_i64(18446744073709551615u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i64x2.all_true", make_v128_i64(0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i64x2.all_true", make_v128_i64(255u,255u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i64x2.all_true", make_v128_i64(171u,171u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i64x2.all_true", make_v128_i64(85u,85u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i64x2.bitmask", make_v128_i64(18446744073709551615u,18446744073709551615u))->to_ui32() == UINT32_C(3));
   CHECK(bkend.call_with_return("env", "i64x2.bitmask", make_v128_i64(18446744073709551615u,15u))->to_ui32() == UINT32_C(1));
}

BACKEND_TEST_CASE( "Testing wasm <simd_boolean_1_wasm>", "[simd_boolean_1_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_boolean.1.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "i8x16_any_true_as_if_cond", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i8x16_any_true_as_if_cond", make_v128_i8(0u,0u,1u,0u,0u,0u,1u,0u,0u,0u,1u,0u,0u,0u,1u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i8x16_any_true_as_if_cond", make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8_any_true_as_if_cond", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i16x8_any_true_as_if_cond", make_v128_i16(0u,0u,1u,0u,0u,0u,1u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8_any_true_as_if_cond", make_v128_i16(1u,1u,1u,1u,1u,1u,1u,1u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4_any_true_as_if_cond", make_v128_i32(0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i32x4_any_true_as_if_cond", make_v128_i32(0u,0u,1u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4_any_true_as_if_cond", make_v128_i32(1u,1u,1u,1u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i8x16_all_true_as_if_cond", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i8x16_all_true_as_if_cond", make_v128_i8(1u,1u,1u,0u,1u,1u,1u,0u,1u,1u,1u,0u,1u,1u,1u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i8x16_all_true_as_if_cond", make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8_all_true_as_if_cond", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i16x8_all_true_as_if_cond", make_v128_i16(1u,1u,1u,0u,1u,1u,1u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i16x8_all_true_as_if_cond", make_v128_i16(1u,1u,1u,1u,1u,1u,1u,1u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4_all_true_as_if_cond", make_v128_i32(0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i32x4_all_true_as_if_cond", make_v128_i32(1u,1u,1u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i32x4_all_true_as_if_cond", make_v128_i32(1u,1u,1u,1u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i8x16_any_true_as_select_cond", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i8x16_any_true_as_select_cond", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,1u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8_any_true_as_select_cond", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i16x8_any_true_as_select_cond", make_v128_i16(0u,0u,0u,0u,0u,0u,1u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4_any_true_as_select_cond", make_v128_i32(0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i32x4_any_true_as_select_cond", make_v128_i32(0u,0u,1u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i8x16_all_true_as_select_cond", make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i8x16_all_true_as_select_cond", make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,0u,1u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i16x8_all_true_as_select_cond", make_v128_i16(1u,1u,1u,1u,1u,1u,1u,1u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8_all_true_as_select_cond", make_v128_i16(1u,1u,1u,1u,1u,1u,0u,1u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i32x4_all_true_as_select_cond", make_v128_i32(1u,1u,1u,1u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4_all_true_as_select_cond", make_v128_i32(1u,1u,0u,1u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i8x16_any_true_as_br_if_cond", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i8x16_any_true_as_br_if_cond", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,1u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8_any_true_as_br_if_cond", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i16x8_any_true_as_br_if_cond", make_v128_i16(0u,0u,0u,0u,0u,0u,1u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4_any_true_as_br_if_cond", make_v128_i32(0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i32x4_any_true_as_br_if_cond", make_v128_i32(0u,0u,1u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i8x16_all_true_as_br_if_cond", make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i8x16_all_true_as_br_if_cond", make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,0u,1u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i16x8_all_true_as_br_if_cond", make_v128_i16(1u,1u,1u,1u,1u,1u,1u,1u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8_all_true_as_br_if_cond", make_v128_i16(1u,1u,1u,1u,1u,1u,0u,1u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i32x4_all_true_as_br_if_cond", make_v128_i32(1u,1u,1u,1u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4_all_true_as_br_if_cond", make_v128_i32(1u,1u,0u,1u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i8x16_any_true_as_i32.and_operand", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u), make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i8x16_any_true_as_i32.and_operand", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u), make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,1u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i8x16_any_true_as_i32.and_operand", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,1u,0u), make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,1u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8_any_true_as_i32.and_operand", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u), make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i16x8_any_true_as_i32.and_operand", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u), make_v128_i16(0u,0u,0u,0u,0u,0u,1u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i16x8_any_true_as_i32.and_operand", make_v128_i16(0u,0u,0u,0u,0u,0u,1u,0u), make_v128_i16(0u,0u,0u,0u,0u,0u,1u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4_any_true_as_i32.and_operand", make_v128_i32(0u,0u,0u,0u), make_v128_i32(0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i32x4_any_true_as_i32.and_operand", make_v128_i32(0u,0u,0u,0u), make_v128_i32(0u,0u,1u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i32x4_any_true_as_i32.and_operand", make_v128_i32(0u,0u,1u,0u), make_v128_i32(0u,0u,1u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i8x16_any_true_as_i32.or_operand", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u), make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i8x16_any_true_as_i32.or_operand", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u), make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,1u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i8x16_any_true_as_i32.or_operand", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,1u,0u), make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,1u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8_any_true_as_i32.or_operand", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u), make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i16x8_any_true_as_i32.or_operand", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u), make_v128_i16(0u,0u,0u,0u,0u,0u,1u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8_any_true_as_i32.or_operand", make_v128_i16(0u,0u,0u,0u,0u,0u,1u,0u), make_v128_i16(0u,0u,0u,0u,0u,0u,1u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4_any_true_as_i32.or_operand", make_v128_i32(0u,0u,0u,0u), make_v128_i32(0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i32x4_any_true_as_i32.or_operand", make_v128_i32(0u,0u,0u,0u), make_v128_i32(0u,0u,1u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4_any_true_as_i32.or_operand", make_v128_i32(0u,0u,1u,0u), make_v128_i32(0u,0u,1u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i8x16_any_true_as_i32.xor_operand", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u), make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i8x16_any_true_as_i32.xor_operand", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u), make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,1u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i8x16_any_true_as_i32.xor_operand", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,1u,0u), make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,1u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i16x8_any_true_as_i32.xor_operand", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u), make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i16x8_any_true_as_i32.xor_operand", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u), make_v128_i16(0u,0u,0u,0u,0u,0u,1u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8_any_true_as_i32.xor_operand", make_v128_i16(0u,0u,0u,0u,0u,0u,1u,0u), make_v128_i16(0u,0u,0u,0u,0u,0u,1u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i32x4_any_true_as_i32.xor_operand", make_v128_i32(0u,0u,0u,0u), make_v128_i32(0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i32x4_any_true_as_i32.xor_operand", make_v128_i32(0u,0u,0u,0u), make_v128_i32(0u,0u,1u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4_any_true_as_i32.xor_operand", make_v128_i32(0u,0u,1u,0u), make_v128_i32(0u,0u,1u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i8x16_all_true_as_i32.and_operand", make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u), make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i8x16_all_true_as_i32.and_operand", make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u), make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,0u,1u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i8x16_all_true_as_i32.and_operand", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u), make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i16x8_all_true_as_i32.and_operand", make_v128_i16(1u,1u,1u,1u,1u,1u,1u,1u), make_v128_i16(1u,1u,1u,1u,1u,1u,1u,1u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8_all_true_as_i32.and_operand", make_v128_i16(1u,1u,1u,1u,1u,1u,1u,1u), make_v128_i16(1u,1u,1u,1u,1u,1u,0u,1u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i16x8_all_true_as_i32.and_operand", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u), make_v128_i16(0u,0u,0u,0u,0u,0u,1u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i32x4_all_true_as_i32.and_operand", make_v128_i32(1u,1u,1u,1u), make_v128_i32(1u,1u,1u,1u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4_all_true_as_i32.and_operand", make_v128_i32(1u,1u,1u,1u), make_v128_i32(1u,1u,0u,1u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i32x4_all_true_as_i32.and_operand", make_v128_i32(0u,0u,0u,0u), make_v128_i32(0u,0u,1u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i8x16_all_true_as_i32.or_operand", make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u), make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i8x16_all_true_as_i32.or_operand", make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u), make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,0u,1u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i8x16_all_true_as_i32.or_operand", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u), make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i16x8_all_true_as_i32.or_operand", make_v128_i16(1u,1u,1u,1u,1u,1u,1u,1u), make_v128_i16(1u,1u,1u,1u,1u,1u,1u,1u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8_all_true_as_i32.or_operand", make_v128_i16(1u,1u,1u,1u,1u,1u,1u,1u), make_v128_i16(1u,1u,1u,1u,1u,1u,0u,1u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8_all_true_as_i32.or_operand", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u), make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i32x4_all_true_as_i32.or_operand", make_v128_i32(1u,1u,1u,1u), make_v128_i32(1u,1u,1u,1u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4_all_true_as_i32.or_operand", make_v128_i32(1u,1u,1u,1u), make_v128_i32(1u,1u,0u,1u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4_all_true_as_i32.or_operand", make_v128_i32(0u,0u,0u,0u), make_v128_i32(0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i8x16_all_true_as_i32.xor_operand", make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u), make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i8x16_all_true_as_i32.xor_operand", make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u), make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,0u,1u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i8x16_all_true_as_i32.xor_operand", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u), make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i16x8_all_true_as_i32.xor_operand", make_v128_i16(1u,1u,1u,1u,1u,1u,1u,1u), make_v128_i16(1u,1u,1u,1u,1u,1u,1u,1u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i16x8_all_true_as_i32.xor_operand", make_v128_i16(1u,1u,1u,1u,1u,1u,1u,1u), make_v128_i16(1u,1u,1u,1u,1u,1u,0u,1u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8_all_true_as_i32.xor_operand", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u), make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i32x4_all_true_as_i32.xor_operand", make_v128_i32(1u,1u,1u,1u), make_v128_i32(1u,1u,1u,1u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i32x4_all_true_as_i32.xor_operand", make_v128_i32(1u,1u,1u,1u), make_v128_i32(1u,1u,0u,1u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4_all_true_as_i32.xor_operand", make_v128_i32(0u,0u,0u,0u), make_v128_i32(0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i8x16_any_true_with_v128.not", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i8x16_any_true_with_v128.not", make_v128_i8(255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i8x16_any_true_with_v128.not", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,255u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8_any_true_with_v128.not", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8_any_true_with_v128.not", make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i16x8_any_true_with_v128.not", make_v128_i16(0u,0u,0u,0u,0u,0u,65535u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4_any_true_with_v128.not", make_v128_i32(0u,0u,0u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4_any_true_with_v128.not", make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i32x4_any_true_with_v128.not", make_v128_i32(0u,0u,4294967295u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i8x16_any_true_with_v128.and", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u), make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i8x16_any_true_with_v128.and", make_v128_i8(255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u), make_v128_i8(255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i8x16_any_true_with_v128.and", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,255u,0u), make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,255u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8_any_true_with_v128.and", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u), make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i16x8_any_true_with_v128.and", make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u), make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8_any_true_with_v128.and", make_v128_i16(0u,0u,0u,0u,0u,0u,65535u,0u), make_v128_i16(0u,0u,0u,0u,0u,0u,65535u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4_any_true_with_v128.and", make_v128_i32(0u,0u,0u,0u), make_v128_i32(0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i32x4_any_true_with_v128.and", make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u), make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4_any_true_with_v128.and", make_v128_i32(0u,0u,4294967295u,0u), make_v128_i32(0u,0u,4294967295u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i8x16_any_true_with_v128.or", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u), make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i8x16_any_true_with_v128.or", make_v128_i8(255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u), make_v128_i8(255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i8x16_any_true_with_v128.or", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,255u,0u), make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,255u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8_any_true_with_v128.or", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u), make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i16x8_any_true_with_v128.or", make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u), make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8_any_true_with_v128.or", make_v128_i16(0u,0u,0u,0u,0u,0u,65535u,0u), make_v128_i16(0u,0u,0u,0u,0u,0u,65535u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4_any_true_with_v128.or", make_v128_i32(0u,0u,0u,0u), make_v128_i32(0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i32x4_any_true_with_v128.or", make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u), make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4_any_true_with_v128.or", make_v128_i32(0u,0u,4294967295u,0u), make_v128_i32(0u,0u,4294967295u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i8x16_any_true_with_v128.xor", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u), make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i8x16_any_true_with_v128.xor", make_v128_i8(255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u), make_v128_i8(255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i8x16_any_true_with_v128.xor", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u), make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,255u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8_any_true_with_v128.xor", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u), make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i16x8_any_true_with_v128.xor", make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u), make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i16x8_any_true_with_v128.xor", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u), make_v128_i16(0u,0u,0u,0u,0u,0u,65535u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4_any_true_with_v128.xor", make_v128_i32(0u,0u,0u,0u), make_v128_i32(0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i32x4_any_true_with_v128.xor", make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u), make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i32x4_any_true_with_v128.xor", make_v128_i32(0u,0u,0u,0u), make_v128_i32(0u,0u,4294967295u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i8x16_any_true_with_v128.bitselect", make_v128_i8(170u,170u,170u,170u,170u,170u,170u,170u,170u,170u,170u,170u,170u,170u,170u,170u), make_v128_i8(85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u), make_v128_i8(85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i8x16_any_true_with_v128.bitselect", make_v128_i8(170u,170u,170u,170u,170u,170u,170u,170u,170u,170u,170u,170u,170u,170u,170u,170u), make_v128_i8(85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u), make_v128_i8(85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,255u,85u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8_any_true_with_v128.bitselect", make_v128_i16(170u,170u,170u,170u,170u,170u,170u,170u), make_v128_i16(85u,85u,85u,85u,85u,85u,85u,85u), make_v128_i16(85u,85u,85u,85u,85u,85u,85u,85u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i16x8_any_true_with_v128.bitselect", make_v128_i16(170u,170u,170u,170u,170u,170u,170u,170u), make_v128_i16(85u,85u,85u,85u,85u,85u,85u,85u), make_v128_i16(85u,85u,85u,85u,85u,85u,255u,85u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4_any_true_with_v128.bitselect", make_v128_i32(170u,170u,170u,170u), make_v128_i32(85u,85u,85u,85u), make_v128_i32(85u,85u,85u,85u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i32x4_any_true_with_v128.bitselect", make_v128_i32(170u,170u,170u,170u), make_v128_i32(85u,85u,85u,85u), make_v128_i32(85u,85u,255u,85u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i8x16_all_true_with_v128.not", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i8x16_all_true_with_v128.not", make_v128_i8(255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i8x16_all_true_with_v128.not", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,255u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i16x8_all_true_with_v128.not", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8_all_true_with_v128.not", make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i16x8_all_true_with_v128.not", make_v128_i16(0u,0u,0u,0u,0u,0u,65535u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i32x4_all_true_with_v128.not", make_v128_i32(0u,0u,0u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4_all_true_with_v128.not", make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i32x4_all_true_with_v128.not", make_v128_i32(0u,0u,4294967295u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i8x16_all_true_with_v128.and", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u), make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i8x16_all_true_with_v128.and", make_v128_i8(255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u), make_v128_i8(255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i8x16_all_true_with_v128.and", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,255u,0u), make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,255u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i16x8_all_true_with_v128.and", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u), make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i16x8_all_true_with_v128.and", make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u), make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8_all_true_with_v128.and", make_v128_i16(0u,0u,0u,0u,0u,0u,65535u,0u), make_v128_i16(0u,0u,0u,0u,0u,0u,65535u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i32x4_all_true_with_v128.and", make_v128_i32(0u,0u,0u,0u), make_v128_i32(0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i32x4_all_true_with_v128.and", make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u), make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4_all_true_with_v128.and", make_v128_i32(0u,0u,4294967295u,0u), make_v128_i32(0u,0u,4294967295u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i8x16_all_true_with_v128.or", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u), make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i8x16_all_true_with_v128.or", make_v128_i8(255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u), make_v128_i8(255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i8x16_all_true_with_v128.or", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,255u,0u), make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,255u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i16x8_all_true_with_v128.or", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u), make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i16x8_all_true_with_v128.or", make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u), make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8_all_true_with_v128.or", make_v128_i16(0u,0u,0u,0u,0u,0u,65535u,0u), make_v128_i16(0u,0u,0u,0u,0u,0u,65535u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i32x4_all_true_with_v128.or", make_v128_i32(0u,0u,0u,0u), make_v128_i32(0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i32x4_all_true_with_v128.or", make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u), make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4_all_true_with_v128.or", make_v128_i32(0u,0u,4294967295u,0u), make_v128_i32(0u,0u,4294967295u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i8x16_all_true_with_v128.xor", make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u), make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i8x16_all_true_with_v128.xor", make_v128_i8(255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u), make_v128_i8(255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i8x16_all_true_with_v128.xor", make_v128_i8(0u,255u,0u,255u,0u,255u,0u,255u,0u,255u,0u,255u,0u,255u,0u,255u), make_v128_i8(255u,0u,255u,0u,255u,0u,255u,0u,255u,0u,255u,0u,255u,0u,255u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8_all_true_with_v128.xor", make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u), make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i16x8_all_true_with_v128.xor", make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u), make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i16x8_all_true_with_v128.xor", make_v128_i16(0u,65535u,0u,65535u,0u,65535u,0u,65535u), make_v128_i16(65535u,0u,65535u,0u,65535u,0u,65535u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4_all_true_with_v128.xor", make_v128_i32(0u,0u,0u,0u), make_v128_i32(0u,0u,0u,0u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i32x4_all_true_with_v128.xor", make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u), make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i32x4_all_true_with_v128.xor", make_v128_i32(0u,4294967295u,0u,4294967295u), make_v128_i32(4294967295u,0u,4294967295u,0u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i8x16_all_true_with_v128.bitselect", make_v128_i8(170u,170u,170u,170u,170u,170u,170u,170u,170u,170u,170u,170u,170u,170u,170u,170u), make_v128_i8(85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u), make_v128_i8(85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i8x16_all_true_with_v128.bitselect", make_v128_i8(170u,170u,170u,170u,170u,170u,170u,170u,170u,170u,170u,170u,170u,170u,170u,170u), make_v128_i8(85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u,85u), make_v128_i8(170u,170u,170u,170u,170u,170u,170u,170u,170u,170u,170u,170u,170u,170u,170u,170u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i16x8_all_true_with_v128.bitselect", make_v128_i16(170u,170u,170u,170u,170u,170u,170u,170u), make_v128_i16(85u,85u,85u,85u,85u,85u,85u,85u), make_v128_i16(85u,85u,85u,85u,85u,85u,85u,85u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i16x8_all_true_with_v128.bitselect", make_v128_i16(170u,170u,170u,170u,170u,170u,170u,170u), make_v128_i16(85u,85u,85u,85u,85u,85u,85u,85u), make_v128_i16(170u,170u,170u,170u,170u,170u,170u,170u))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "i32x4_all_true_with_v128.bitselect", make_v128_i32(170u,170u,170u,170u), make_v128_i32(85u,85u,85u,85u), make_v128_i32(85u,85u,85u,85u))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "i32x4_all_true_with_v128.bitselect", make_v128_i32(170u,170u,170u,170u), make_v128_i32(85u,85u,85u,85u), make_v128_i32(170u,170u,170u,170u))->to_ui32() == UINT32_C(1));
}

BACKEND_TEST_CASE( "Testing wasm <simd_boolean_12_wasm>", "[simd_boolean_12_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_boolean.12.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_boolean_13_wasm>", "[simd_boolean_13_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_boolean.13.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_boolean_14_wasm>", "[simd_boolean_14_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_boolean.14.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_boolean_15_wasm>", "[simd_boolean_15_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_boolean.15.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_boolean_16_wasm>", "[simd_boolean_16_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_boolean.16.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_boolean_17_wasm>", "[simd_boolean_17_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_boolean.17.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_boolean_2_wasm>", "[simd_boolean_2_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_boolean.2.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_boolean_3_wasm>", "[simd_boolean_3_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_boolean.3.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_boolean_4_wasm>", "[simd_boolean_4_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_boolean.4.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_boolean_5_wasm>", "[simd_boolean_5_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_boolean.5.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_boolean_6_wasm>", "[simd_boolean_6_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_boolean.6.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_boolean_7_wasm>", "[simd_boolean_7_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_boolean.7.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

