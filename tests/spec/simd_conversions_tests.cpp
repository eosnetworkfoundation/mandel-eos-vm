// Generated by spec_test_generator.  DO NOT MODIFY THIS FILE.

#include <algorithm>
#include <vector>
#include <iostream>
#include <iterator>
#include <cmath>
#include <cstdlib>
#include <catch2/catch.hpp>
#include <utils.hpp>
#include <wasm_config.hpp>
#include <eosio/vm/backend.hpp>

using namespace eosio;
using namespace eosio::vm;
extern wasm_allocator wa;

BACKEND_TEST_CASE( "Testing wasm <simd_conversions_0_wasm>", "[simd_conversions_0_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_conversions.0.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f64x2.promote_low_f32x4", make_v128_f32(0,0,0,0))->to_v128() == make_v128_f64(0u,0u));
   CHECK(bkend.call_with_return("env", "f64x2.promote_low_f32x4", make_v128_f32(2147483648,2147483648,2147483648,2147483648))->to_v128() == make_v128_f64(9223372036854775808u,9223372036854775808u));
   CHECK(bkend.call_with_return("env", "f64x2.promote_low_f32x4", make_v128_f32(1,1,1,1))->to_v128() == make_v128_f64(3936146074321813504u,3936146074321813504u));
   CHECK(bkend.call_with_return("env", "f64x2.promote_low_f32x4", make_v128_f32(2147483649,2147483649,2147483649,2147483649))->to_v128() == make_v128_f64(13159518111176589312u,13159518111176589312u));
   CHECK(bkend.call_with_return("env", "f64x2.promote_low_f32x4", make_v128_f32(1065353216,1065353216,1065353216,1065353216))->to_v128() == make_v128_f64(4607182418800017408u,4607182418800017408u));
   CHECK(bkend.call_with_return("env", "f64x2.promote_low_f32x4", make_v128_f32(3212836864,3212836864,3212836864,3212836864))->to_v128() == make_v128_f64(13830554455654793216u,13830554455654793216u));
   CHECK(bkend.call_with_return("env", "f64x2.promote_low_f32x4", make_v128_f32(4286578687,4286578687,4286578687,4286578687))->to_v128() == make_v128_f64(14407015207421345792u,14407015207421345792u));
   CHECK(bkend.call_with_return("env", "f64x2.promote_low_f32x4", make_v128_f32(2139095039,2139095039,2139095039,2139095039))->to_v128() == make_v128_f64(5183643170566569984u,5183643170566569984u));
   CHECK(bkend.call_with_return("env", "f64x2.promote_low_f32x4", make_v128_f32(67108864,67108864,67108864,67108864))->to_v128() == make_v128_f64(4071254063142928384u,4071254063142928384u));
   CHECK(bkend.call_with_return("env", "f64x2.promote_low_f32x4", make_v128_f32(2118632255,2118632255,2118632255,2118632255))->to_v128() == make_v128_f64(5172657297058430976u,5172657297058430976u));
   CHECK(bkend.call_with_return("env", "f64x2.promote_low_f32x4", make_v128_f32(2139095040,2139095040,2139095040,2139095040))->to_v128() == make_v128_f64(9218868437227405312u,9218868437227405312u));
   CHECK(bkend.call_with_return("env", "f64x2.promote_low_f32x4", make_v128_f32(4286578688,4286578688,4286578688,4286578688))->to_v128() == make_v128_f64(18442240474082181120u,18442240474082181120u));
   CHECK(bkend.call_with_return("env", "f64x2.promote_low_f32x4", make_v128_f32(2143289344,2143289344,2143289344,2143289344))->to_v128() == v128_matcher{nan_canonical_t{},nan_canonical_t{}});
   CHECK(bkend.call_with_return("env", "f64x2.promote_low_f32x4", make_v128_f32(2141192192,2141192192,2141192192,2141192192))->to_v128() == v128_matcher{nan_arithmetic_t{},nan_arithmetic_t{}});
   CHECK(bkend.call_with_return("env", "f64x2.promote_low_f32x4", make_v128_f32(4290772992,4290772992,4290772992,4290772992))->to_v128() == v128_matcher{nan_canonical_t{},nan_canonical_t{}});
   CHECK(bkend.call_with_return("env", "f64x2.promote_low_f32x4", make_v128_f32(4288675840,4288675840,4288675840,4288675840))->to_v128() == v128_matcher{nan_arithmetic_t{},nan_arithmetic_t{}});
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(0,0))->to_v128() == make_v128_f32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(9223372036854775808,9223372036854775808))->to_v128() == make_v128_f32(2147483648u,2147483648u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(1,1))->to_v128() == make_v128_f32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(9223372036854775809,9223372036854775809))->to_v128() == make_v128_f32(2147483648u,2147483648u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(4607182418800017408,4607182418800017408))->to_v128() == make_v128_f32(1065353216u,1065353216u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(13830554455654793216,13830554455654793216))->to_v128() == make_v128_f32(3212836864u,3212836864u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(4039728865214464000,4039728865214464000))->to_v128() == make_v128_f32(8388608u,8388608u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(13263100902069239808,13263100902069239808))->to_v128() == make_v128_f32(2155872256u,2155872256u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(4039728865214463999,4039728865214463999))->to_v128() == make_v128_f32(8388607u,8388607u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(13263100902069239807,13263100902069239807))->to_v128() == make_v128_f32(2155872255u,2155872255u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(3936146074321813504,3936146074321813504))->to_v128() == make_v128_f32(1u,1u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(13159518111176589312,13159518111176589312))->to_v128() == make_v128_f32(2147483649u,2147483649u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(5183643170298134528,5183643170298134528))->to_v128() == make_v128_f32(2139095038u,2139095038u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(14407015207152910336,14407015207152910336))->to_v128() == make_v128_f32(4286578686u,4286578686u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(5183643170298134529,5183643170298134529))->to_v128() == make_v128_f32(2139095039u,2139095039u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(14407015207152910337,14407015207152910337))->to_v128() == make_v128_f32(4286578687u,4286578687u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(5183643170566569984,5183643170566569984))->to_v128() == make_v128_f32(2139095039u,2139095039u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(14407015207421345792,14407015207421345792))->to_v128() == make_v128_f32(4286578687u,4286578687u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(5183643170835005439,5183643170835005439))->to_v128() == make_v128_f32(2139095039u,2139095039u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(14407015207689781247,14407015207689781247))->to_v128() == make_v128_f32(4286578687u,4286578687u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(5183643170835005440,5183643170835005440))->to_v128() == make_v128_f32(2139095040u,2139095040u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(14407015207689781248,14407015207689781248))->to_v128() == make_v128_f32(4286578688u,4286578688u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(4071254063142928384,4071254063142928384))->to_v128() == make_v128_f32(67108864u,67108864u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(5172657297058430976,5172657297058430976))->to_v128() == make_v128_f32(2118632255u,2118632255u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(9218868437227405312,9218868437227405312))->to_v128() == make_v128_f32(2139095040u,2139095040u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(18442240474082181120,18442240474082181120))->to_v128() == make_v128_f32(4286578688u,4286578688u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(4607182418800017409,4607182418800017409))->to_v128() == make_v128_f32(1065353216u,1065353216u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(4607182418800017407,4607182418800017407))->to_v128() == make_v128_f32(1065353216u,1065353216u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(4607182419068452864,4607182419068452864))->to_v128() == make_v128_f32(1065353216u,1065353216u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(4607182419068452865,4607182419068452865))->to_v128() == make_v128_f32(1065353217u,1065353217u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(4607182419605323775,4607182419605323775))->to_v128() == make_v128_f32(1065353217u,1065353217u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(4607182419605323776,4607182419605323776))->to_v128() == make_v128_f32(1065353218u,1065353218u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(4607182420142194688,4607182420142194688))->to_v128() == make_v128_f32(1065353218u,1065353218u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(4715268810125344768,4715268810125344768))->to_v128() == make_v128_f32(1266679808u,1266679808u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(4715268810125344769,4715268810125344769))->to_v128() == make_v128_f32(1266679809u,1266679809u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(4715268810662215679,4715268810662215679))->to_v128() == make_v128_f32(1266679809u,1266679809u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(4715268810662215680,4715268810662215680))->to_v128() == make_v128_f32(1266679810u,1266679810u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(5094955347580439664,5094955347580439664))->to_v128() == make_v128_f32(1973901096u,1973901096u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(4101111194527827589,4101111194527827589))->to_v128() == make_v128_f32(122722105u,122722105u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(4038806939559600639,4038806939559600639))->to_v128() == make_v128_f32(7529997u,7529997u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(13836913116900734306,13836913116900734306))->to_v128() == make_v128_f32(3224680794u,3224680794u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(14338315240173327556,14338315240173327556))->to_v128() == make_v128_f32(4158615026u,4158615026u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(9221120237041090560,9221120237041090560))->to_v128() == v128_matcher{nan_canonical_t{},nan_canonical_t{},0u,0u});
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(9219994337134247936,9219994337134247936))->to_v128() == v128_matcher{nan_arithmetic_t{},nan_arithmetic_t{},0u,0u});
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(18444492273895866368,18444492273895866368))->to_v128() == v128_matcher{nan_canonical_t{},nan_canonical_t{},0u,0u});
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(18443366373989023744,18443366373989023744))->to_v128() == v128_matcher{nan_arithmetic_t{},nan_arithmetic_t{},0u,0u});
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(4503599627370496,4503599627370496))->to_v128() == make_v128_f32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(9227875636482146304,9227875636482146304))->to_v128() == make_v128_f32(2147483648u,2147483648u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(3931642474694443008,3931642474694443008))->to_v128() == make_v128_f32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(13155014511549218816,13155014511549218816))->to_v128() == make_v128_f32(2147483648u,2147483648u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(3931642474694443009,3931642474694443009))->to_v128() == make_v128_f32(1u,1u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.demote_f64x2_zero", make_v128_f64(13155014511549218817,13155014511549218817))->to_v128() == make_v128_f32(2147483649u,2147483649u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.convert_i32x4_s", make_v128_i32(0,0,0,0))->to_v128() == make_v128_f32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.convert_i32x4_s", make_v128_i32(1,1,1,1))->to_v128() == make_v128_f32(1065353216u,1065353216u,1065353216u,1065353216u));
   CHECK(bkend.call_with_return("env", "f32x4.convert_i32x4_s", make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_f32(3212836864u,3212836864u,3212836864u,3212836864u));
   CHECK(bkend.call_with_return("env", "f32x4.convert_i32x4_s", make_v128_i32(2147483647,2147483647,2147483647,2147483647))->to_v128() == make_v128_f32(1325400064u,1325400064u,1325400064u,1325400064u));
   CHECK(bkend.call_with_return("env", "f32x4.convert_i32x4_s", make_v128_i32(2147483648,2147483648,2147483648,2147483648))->to_v128() == make_v128_f32(3472883712u,3472883712u,3472883712u,3472883712u));
   CHECK(bkend.call_with_return("env", "f32x4.convert_i32x4_s", make_v128_i32(1234567890,1234567890,1234567890,1234567890))->to_v128() == make_v128_f32(1318267910u,1318267910u,1318267910u,1318267910u));
   CHECK(bkend.call_with_return("env", "f32x4.convert_i32x4_s", make_v128_i32(123456792,123456792,123456792,123456792))->to_v128() == make_v128_f32(1290500515u,1290500515u,1290500515u,1290500515u));
   CHECK(bkend.call_with_return("env", "f32x4.convert_i32x4_s", make_v128_i32(305419904,305419904,305419904,305419904))->to_v128() == make_v128_f32(1301390004u,1301390004u,1301390004u,1301390004u));
   CHECK(bkend.call_with_return("env", "f32x4.convert_i32x4_s", make_v128_i32(16777217,16777217,16777217,16777217))->to_v128() == make_v128_f32(1266679808u,1266679808u,1266679808u,1266679808u));
   CHECK(bkend.call_with_return("env", "f32x4.convert_i32x4_s", make_v128_i32(4278190079,4278190079,4278190079,4278190079))->to_v128() == make_v128_f32(3414163456u,3414163456u,3414163456u,3414163456u));
   CHECK(bkend.call_with_return("env", "f32x4.convert_i32x4_s", make_v128_i32(16777219,16777219,16777219,16777219))->to_v128() == make_v128_f32(1266679810u,1266679810u,1266679810u,1266679810u));
   CHECK(bkend.call_with_return("env", "f32x4.convert_i32x4_s", make_v128_i32(4278190077,4278190077,4278190077,4278190077))->to_v128() == make_v128_f32(3414163458u,3414163458u,3414163458u,3414163458u));
   CHECK(bkend.call_with_return("env", "f32x4.convert_i32x4_s", make_v128_i32(0,4294967295,2147483647,2147483648))->to_v128() == make_v128_f32(0u,3212836864u,1325400064u,3472883712u));
   CHECK(bkend.call_with_return("env", "f32x4.convert_i32x4_u", make_v128_i32(0,0,0,0))->to_v128() == make_v128_f32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "f32x4.convert_i32x4_u", make_v128_i32(1,1,1,1))->to_v128() == make_v128_f32(1065353216u,1065353216u,1065353216u,1065353216u));
   CHECK(bkend.call_with_return("env", "f32x4.convert_i32x4_u", make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_f32(1333788672u,1333788672u,1333788672u,1333788672u));
   CHECK(bkend.call_with_return("env", "f32x4.convert_i32x4_u", make_v128_i32(2147483647,2147483647,2147483647,2147483647))->to_v128() == make_v128_f32(1325400064u,1325400064u,1325400064u,1325400064u));
   CHECK(bkend.call_with_return("env", "f32x4.convert_i32x4_u", make_v128_i32(2147483648,2147483648,2147483648,2147483648))->to_v128() == make_v128_f32(1325400064u,1325400064u,1325400064u,1325400064u));
   CHECK(bkend.call_with_return("env", "f32x4.convert_i32x4_u", make_v128_i32(305419896,305419896,305419896,305419896))->to_v128() == make_v128_f32(1301390004u,1301390004u,1301390004u,1301390004u));
   CHECK(bkend.call_with_return("env", "f32x4.convert_i32x4_u", make_v128_i32(2147483776,2147483776,2147483776,2147483776))->to_v128() == make_v128_f32(1325400064u,1325400064u,1325400064u,1325400064u));
   CHECK(bkend.call_with_return("env", "f32x4.convert_i32x4_u", make_v128_i32(2147483777,2147483777,2147483777,2147483777))->to_v128() == make_v128_f32(1325400065u,1325400065u,1325400065u,1325400065u));
   CHECK(bkend.call_with_return("env", "f32x4.convert_i32x4_u", make_v128_i32(2147483778,2147483778,2147483778,2147483778))->to_v128() == make_v128_f32(1325400065u,1325400065u,1325400065u,1325400065u));
   CHECK(bkend.call_with_return("env", "f32x4.convert_i32x4_u", make_v128_i32(4294966912,4294966912,4294966912,4294966912))->to_v128() == make_v128_f32(1333788670u,1333788670u,1333788670u,1333788670u));
   CHECK(bkend.call_with_return("env", "f32x4.convert_i32x4_u", make_v128_i32(4294966913,4294966913,4294966913,4294966913))->to_v128() == make_v128_f32(1333788671u,1333788671u,1333788671u,1333788671u));
   CHECK(bkend.call_with_return("env", "f32x4.convert_i32x4_u", make_v128_i32(4294966914,4294966914,4294966914,4294966914))->to_v128() == make_v128_f32(1333788671u,1333788671u,1333788671u,1333788671u));
   CHECK(bkend.call_with_return("env", "f32x4.convert_i32x4_u", make_v128_i32(123456792,123456792,123456792,123456792))->to_v128() == make_v128_f32(1290500515u,1290500515u,1290500515u,1290500515u));
   CHECK(bkend.call_with_return("env", "f32x4.convert_i32x4_u", make_v128_i32(2427178479,2427178479,2427178479,2427178479))->to_v128() == make_v128_f32(1326492622u,1326492622u,1326492622u,1326492622u));
   CHECK(bkend.call_with_return("env", "f32x4.convert_i32x4_u", make_v128_i32(16777217,16777217,16777217,16777217))->to_v128() == make_v128_f32(1266679808u,1266679808u,1266679808u,1266679808u));
   CHECK(bkend.call_with_return("env", "f32x4.convert_i32x4_u", make_v128_i32(16777219,16777219,16777219,16777219))->to_v128() == make_v128_f32(1266679810u,1266679810u,1266679810u,1266679810u));
   CHECK(bkend.call_with_return("env", "f32x4.convert_i32x4_u", make_v128_i32(0,4294967295,2147483647,2147483648))->to_v128() == make_v128_f32(0u,1333788672u,1325400064u,1325400064u));
   CHECK(bkend.call_with_return("env", "f64x2.convert_low_i32x4_s", make_v128_i32(1,1,0,0))->to_v128() == make_v128_f64(4607182418800017408u,4607182418800017408u));
   CHECK(bkend.call_with_return("env", "f64x2.convert_low_i32x4_s", make_v128_i32(4294967295,4294967295,0,0))->to_v128() == make_v128_f64(13830554455654793216u,13830554455654793216u));
   CHECK(bkend.call_with_return("env", "f64x2.convert_low_i32x4_s", make_v128_i32(0,0,0,0))->to_v128() == make_v128_f64(0u,0u));
   CHECK(bkend.call_with_return("env", "f64x2.convert_low_i32x4_s", make_v128_i32(2147483647,2147483647,0,0))->to_v128() == make_v128_f64(4746794007244308480u,4746794007244308480u));
   CHECK(bkend.call_with_return("env", "f64x2.convert_low_i32x4_s", make_v128_i32(2147483648,2147483648,0,0))->to_v128() == make_v128_f64(13970166044103278592u,13970166044103278592u));
   CHECK(bkend.call_with_return("env", "f64x2.convert_low_i32x4_s", make_v128_i32(987654321,987654321,0,0))->to_v128() == make_v128_f64(4741568253304766464u,4741568253304766464u));
   CHECK(bkend.call_with_return("env", "f64x2.convert_low_i32x4_u", make_v128_i32(1,1,0,0))->to_v128() == make_v128_f64(4607182418800017408u,4607182418800017408u));
   CHECK(bkend.call_with_return("env", "f64x2.convert_low_i32x4_u", make_v128_i32(0,0,0,0))->to_v128() == make_v128_f64(0u,0u));
   CHECK(bkend.call_with_return("env", "f64x2.convert_low_i32x4_u", make_v128_i32(2147483647,2147483647,0,0))->to_v128() == make_v128_f64(4746794007244308480u,4746794007244308480u));
   CHECK(bkend.call_with_return("env", "f64x2.convert_low_i32x4_u", make_v128_i32(2147483648,2147483648,0,0))->to_v128() == make_v128_f64(4746794007248502784u,4746794007248502784u));
   CHECK(bkend.call_with_return("env", "f64x2.convert_low_i32x4_u", make_v128_i32(4294967295,4294967295,0,0))->to_v128() == make_v128_f64(4751297606873776128u,4751297606873776128u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_s", make_v128_i16(0,0,0,0,0,0,0,0), make_v128_i16(0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_s", make_v128_i16(0,0,0,0,0,0,0,0), make_v128_i16(1,1,1,1,1,1,1,1))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_s", make_v128_i16(1,1,1,1,1,1,1,1), make_v128_i16(0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_s", make_v128_i16(0,0,0,0,0,0,0,0), make_v128_i16(65535,65535,65535,65535,65535,65535,65535,65535))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,255u,255u,255u,255u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_s", make_v128_i16(65535,65535,65535,65535,65535,65535,65535,65535), make_v128_i16(0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(255u,255u,255u,255u,255u,255u,255u,255u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_s", make_v128_i16(1,1,1,1,1,1,1,1), make_v128_i16(65535,65535,65535,65535,65535,65535,65535,65535))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,255u,255u,255u,255u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_s", make_v128_i16(65535,65535,65535,65535,65535,65535,65535,65535), make_v128_i16(1,1,1,1,1,1,1,1))->to_v128() == make_v128_i8(255u,255u,255u,255u,255u,255u,255u,255u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_s", make_v128_i16(126,126,126,126,126,126,126,126), make_v128_i16(127,127,127,127,127,127,127,127))->to_v128() == make_v128_i8(126u,126u,126u,126u,126u,126u,126u,126u,127u,127u,127u,127u,127u,127u,127u,127u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_s", make_v128_i16(127,127,127,127,127,127,127,127), make_v128_i16(126,126,126,126,126,126,126,126))->to_v128() == make_v128_i8(127u,127u,127u,127u,127u,127u,127u,127u,126u,126u,126u,126u,126u,126u,126u,126u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_s", make_v128_i16(127,127,127,127,127,127,127,127), make_v128_i16(127,127,127,127,127,127,127,127))->to_v128() == make_v128_i8(127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_s", make_v128_i16(128,128,128,128,128,128,128,128), make_v128_i16(128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_s", make_v128_i16(127,127,127,127,127,127,127,127), make_v128_i16(128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_s", make_v128_i16(128,128,128,128,128,128,128,128), make_v128_i16(127,127,127,127,127,127,127,127))->to_v128() == make_v128_i8(127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_s", make_v128_i16(127,127,127,127,127,127,127,127), make_v128_i16(255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_s", make_v128_i16(255,255,255,255,255,255,255,255), make_v128_i16(127,127,127,127,127,127,127,127))->to_v128() == make_v128_i8(127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_s", make_v128_i16(65409,65409,65409,65409,65409,65409,65409,65409), make_v128_i16(65408,65408,65408,65408,65408,65408,65408,65408))->to_v128() == make_v128_i8(129u,129u,129u,129u,129u,129u,129u,129u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_s", make_v128_i16(65408,65408,65408,65408,65408,65408,65408,65408), make_v128_i16(65409,65409,65409,65409,65409,65409,65409,65409))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,129u,129u,129u,129u,129u,129u,129u,129u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_s", make_v128_i16(65408,65408,65408,65408,65408,65408,65408,65408), make_v128_i16(65408,65408,65408,65408,65408,65408,65408,65408))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_s", make_v128_i16(65407,65407,65407,65407,65407,65407,65407,65407), make_v128_i16(65407,65407,65407,65407,65407,65407,65407,65407))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_s", make_v128_i16(65407,65407,65407,65407,65407,65407,65407,65407), make_v128_i16(65408,65408,65408,65408,65408,65408,65408,65408))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_s", make_v128_i16(65408,65408,65408,65408,65408,65408,65408,65408), make_v128_i16(65407,65407,65407,65407,65407,65407,65407,65407))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_s", make_v128_i16(65408,65408,65408,65408,65408,65408,65408,65408), make_v128_i16(127,127,127,127,127,127,127,127))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,127u,127u,127u,127u,127u,127u,127u,127u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_s", make_v128_i16(65408,65408,65408,65408,65408,65408,65408,65408), make_v128_i16(128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,127u,127u,127u,127u,127u,127u,127u,127u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_s", make_v128_i16(65407,65407,65407,65407,65407,65407,65407,65407), make_v128_i16(127,127,127,127,127,127,127,127))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,127u,127u,127u,127u,127u,127u,127u,127u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_s", make_v128_i16(65408,65408,65408,65408,65408,65408,65408,65408), make_v128_i16(255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,127u,127u,127u,127u,127u,127u,127u,127u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_s", make_v128_i16(65407,65407,65407,65407,65407,65407,65407,65407), make_v128_i16(256,256,256,256,256,256,256,256))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,127u,127u,127u,127u,127u,127u,127u,127u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_s", make_v128_i16(32768,32768,32768,32768,32768,32768,32768,32768), make_v128_i16(65535,65535,65535,65535,65535,65535,65535,65535))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,255u,255u,255u,255u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_s", make_v128_i16(12345,12345,12345,12345,12345,12345,12345,12345), make_v128_i16(56789,56789,56789,56789,56789,56789,56789,56789))->to_v128() == make_v128_i8(127u,127u,127u,127u,127u,127u,127u,127u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_s", make_v128_i16(4660,4660,4660,4660,4660,4660,4660,4660), make_v128_i16(22136,22136,22136,22136,22136,22136,22136,22136))->to_v128() == make_v128_i8(127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_u", make_v128_i16(0,0,0,0,0,0,0,0), make_v128_i16(0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_u", make_v128_i16(0,0,0,0,0,0,0,0), make_v128_i16(1,1,1,1,1,1,1,1))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_u", make_v128_i16(1,1,1,1,1,1,1,1), make_v128_i16(0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_u", make_v128_i16(0,0,0,0,0,0,0,0), make_v128_i16(65535,65535,65535,65535,65535,65535,65535,65535))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_u", make_v128_i16(65535,65535,65535,65535,65535,65535,65535,65535), make_v128_i16(0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_u", make_v128_i16(1,1,1,1,1,1,1,1), make_v128_i16(65535,65535,65535,65535,65535,65535,65535,65535))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_u", make_v128_i16(65535,65535,65535,65535,65535,65535,65535,65535), make_v128_i16(1,1,1,1,1,1,1,1))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_u", make_v128_i16(126,126,126,126,126,126,126,126), make_v128_i16(127,127,127,127,127,127,127,127))->to_v128() == make_v128_i8(126u,126u,126u,126u,126u,126u,126u,126u,127u,127u,127u,127u,127u,127u,127u,127u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_u", make_v128_i16(127,127,127,127,127,127,127,127), make_v128_i16(126,126,126,126,126,126,126,126))->to_v128() == make_v128_i8(127u,127u,127u,127u,127u,127u,127u,127u,126u,126u,126u,126u,126u,126u,126u,126u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_u", make_v128_i16(127,127,127,127,127,127,127,127), make_v128_i16(127,127,127,127,127,127,127,127))->to_v128() == make_v128_i8(127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u,127u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_u", make_v128_i16(128,128,128,128,128,128,128,128), make_v128_i16(128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_u", make_v128_i16(127,127,127,127,127,127,127,127), make_v128_i16(128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(127u,127u,127u,127u,127u,127u,127u,127u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_u", make_v128_i16(128,128,128,128,128,128,128,128), make_v128_i16(127,127,127,127,127,127,127,127))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,127u,127u,127u,127u,127u,127u,127u,127u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_u", make_v128_i16(254,254,254,254,254,254,254,254), make_v128_i16(255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(254u,254u,254u,254u,254u,254u,254u,254u,255u,255u,255u,255u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_u", make_v128_i16(255,255,255,255,255,255,255,255), make_v128_i16(254,254,254,254,254,254,254,254))->to_v128() == make_v128_i8(255u,255u,255u,255u,255u,255u,255u,255u,254u,254u,254u,254u,254u,254u,254u,254u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_u", make_v128_i16(255,255,255,255,255,255,255,255), make_v128_i16(255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_u", make_v128_i16(256,256,256,256,256,256,256,256), make_v128_i16(256,256,256,256,256,256,256,256))->to_v128() == make_v128_i8(255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_u", make_v128_i16(255,255,255,255,255,255,255,255), make_v128_i16(256,256,256,256,256,256,256,256))->to_v128() == make_v128_i8(255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_u", make_v128_i16(256,256,256,256,256,256,256,256), make_v128_i16(255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_u", make_v128_i16(0,0,0,0,0,0,0,0), make_v128_i16(255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,255u,255u,255u,255u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_u", make_v128_i16(0,0,0,0,0,0,0,0), make_v128_i16(256,256,256,256,256,256,256,256))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,255u,255u,255u,255u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_u", make_v128_i16(65535,65535,65535,65535,65535,65535,65535,65535), make_v128_i16(255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,255u,255u,255u,255u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_u", make_v128_i16(65535,65535,65535,65535,65535,65535,65535,65535), make_v128_i16(256,256,256,256,256,256,256,256))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,255u,255u,255u,255u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_u", make_v128_i16(32768,32768,32768,32768,32768,32768,32768,32768), make_v128_i16(65535,65535,65535,65535,65535,65535,65535,65535))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_u", make_v128_i16(56789,56789,56789,56789,56789,56789,56789,56789), make_v128_i16(12345,12345,12345,12345,12345,12345,12345,12345))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,255u,255u,255u,255u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i8x16.narrow_i16x8_u", make_v128_i16(37035,37035,37035,37035,37035,37035,37035,37035), make_v128_i16(4660,4660,4660,4660,4660,4660,4660,4660))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,255u,255u,255u,255u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_s", make_v128_i32(0,0,0,0), make_v128_i32(0,0,0,0))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_s", make_v128_i32(0,0,0,0), make_v128_i32(1,1,1,1))->to_v128() == make_v128_i16(0u,0u,0u,0u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_s", make_v128_i32(1,1,1,1), make_v128_i32(0,0,0,0))->to_v128() == make_v128_i16(1u,1u,1u,1u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_s", make_v128_i32(0,0,0,0), make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i16(0u,0u,0u,0u,65535u,65535u,65535u,65535u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_s", make_v128_i32(4294967295,4294967295,4294967295,4294967295), make_v128_i32(0,0,0,0))->to_v128() == make_v128_i16(65535u,65535u,65535u,65535u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_s", make_v128_i32(1,1,1,1), make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i16(1u,1u,1u,1u,65535u,65535u,65535u,65535u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_s", make_v128_i32(4294967295,4294967295,4294967295,4294967295), make_v128_i32(1,1,1,1))->to_v128() == make_v128_i16(65535u,65535u,65535u,65535u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_s", make_v128_i32(32766,32766,32766,32766), make_v128_i32(32767,32767,32767,32767))->to_v128() == make_v128_i16(32766u,32766u,32766u,32766u,32767u,32767u,32767u,32767u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_s", make_v128_i32(32767,32767,32767,32767), make_v128_i32(32766,32766,32766,32766))->to_v128() == make_v128_i16(32767u,32767u,32767u,32767u,32766u,32766u,32766u,32766u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_s", make_v128_i32(32767,32767,32767,32767), make_v128_i32(32767,32767,32767,32767))->to_v128() == make_v128_i16(32767u,32767u,32767u,32767u,32767u,32767u,32767u,32767u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_s", make_v128_i32(32768,32768,32768,32768), make_v128_i32(32768,32768,32768,32768))->to_v128() == make_v128_i16(32767u,32767u,32767u,32767u,32767u,32767u,32767u,32767u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_s", make_v128_i32(32767,32767,32767,32767), make_v128_i32(32768,32768,32768,32768))->to_v128() == make_v128_i16(32767u,32767u,32767u,32767u,32767u,32767u,32767u,32767u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_s", make_v128_i32(32768,32768,32768,32768), make_v128_i32(32767,32767,32767,32767))->to_v128() == make_v128_i16(32767u,32767u,32767u,32767u,32767u,32767u,32767u,32767u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_s", make_v128_i32(32767,32767,32767,32767), make_v128_i32(65535,65535,65535,65535))->to_v128() == make_v128_i16(32767u,32767u,32767u,32767u,32767u,32767u,32767u,32767u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_s", make_v128_i32(65535,65535,65535,65535), make_v128_i32(32767,32767,32767,32767))->to_v128() == make_v128_i16(32767u,32767u,32767u,32767u,32767u,32767u,32767u,32767u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_s", make_v128_i32(4294934529,4294934529,4294934529,4294934529), make_v128_i32(4294934528,4294934528,4294934528,4294934528))->to_v128() == make_v128_i16(32769u,32769u,32769u,32769u,32768u,32768u,32768u,32768u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_s", make_v128_i32(4294934528,4294934528,4294934528,4294934528), make_v128_i32(4294934529,4294934529,4294934529,4294934529))->to_v128() == make_v128_i16(32768u,32768u,32768u,32768u,32769u,32769u,32769u,32769u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_s", make_v128_i32(4294934528,4294934528,4294934528,4294934528), make_v128_i32(4294934528,4294934528,4294934528,4294934528))->to_v128() == make_v128_i16(32768u,32768u,32768u,32768u,32768u,32768u,32768u,32768u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_s", make_v128_i32(4294934527,4294934527,4294934527,4294934527), make_v128_i32(4294934527,4294934527,4294934527,4294934527))->to_v128() == make_v128_i16(32768u,32768u,32768u,32768u,32768u,32768u,32768u,32768u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_s", make_v128_i32(4294934527,4294934527,4294934527,4294934527), make_v128_i32(4294934528,4294934528,4294934528,4294934528))->to_v128() == make_v128_i16(32768u,32768u,32768u,32768u,32768u,32768u,32768u,32768u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_s", make_v128_i32(4294934528,4294934528,4294934528,4294934528), make_v128_i32(4294934527,4294934527,4294934527,4294934527))->to_v128() == make_v128_i16(32768u,32768u,32768u,32768u,32768u,32768u,32768u,32768u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_s", make_v128_i32(4294934528,4294934528,4294934528,4294934528), make_v128_i32(32767,32767,32767,32767))->to_v128() == make_v128_i16(32768u,32768u,32768u,32768u,32767u,32767u,32767u,32767u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_s", make_v128_i32(4294934528,4294934528,4294934528,4294934528), make_v128_i32(32768,32768,32768,32768))->to_v128() == make_v128_i16(32768u,32768u,32768u,32768u,32767u,32767u,32767u,32767u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_s", make_v128_i32(4294934527,4294934527,4294934527,4294934527), make_v128_i32(32767,32767,32767,32767))->to_v128() == make_v128_i16(32768u,32768u,32768u,32768u,32767u,32767u,32767u,32767u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_s", make_v128_i32(4294934528,4294934528,4294934528,4294934528), make_v128_i32(65535,65535,65535,65535))->to_v128() == make_v128_i16(32768u,32768u,32768u,32768u,32767u,32767u,32767u,32767u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_s", make_v128_i32(4294934527,4294934527,4294934527,4294934527), make_v128_i32(65536,65536,65536,65536))->to_v128() == make_v128_i16(32768u,32768u,32768u,32768u,32767u,32767u,32767u,32767u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_s", make_v128_i32(4160749568,4160749568,4160749568,4160749568), make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i16(32768u,32768u,32768u,32768u,65535u,65535u,65535u,65535u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_s", make_v128_i32(123456789,123456789,123456789,123456789), make_v128_i32(1234567890,1234567890,1234567890,1234567890))->to_v128() == make_v128_i16(32767u,32767u,32767u,32767u,32767u,32767u,32767u,32767u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_s", make_v128_i32(2427178479,2427178479,2427178479,2427178479), make_v128_i32(305419896,305419896,305419896,305419896))->to_v128() == make_v128_i16(32768u,32768u,32768u,32768u,32767u,32767u,32767u,32767u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_u", make_v128_i32(0,0,0,0), make_v128_i32(0,0,0,0))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_u", make_v128_i32(0,0,0,0), make_v128_i32(1,1,1,1))->to_v128() == make_v128_i16(0u,0u,0u,0u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_u", make_v128_i32(1,1,1,1), make_v128_i32(0,0,0,0))->to_v128() == make_v128_i16(1u,1u,1u,1u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_u", make_v128_i32(0,0,0,0), make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_u", make_v128_i32(4294967295,4294967295,4294967295,4294967295), make_v128_i32(0,0,0,0))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_u", make_v128_i32(1,1,1,1), make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i16(1u,1u,1u,1u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_u", make_v128_i32(4294967295,4294967295,4294967295,4294967295), make_v128_i32(1,1,1,1))->to_v128() == make_v128_i16(0u,0u,0u,0u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_u", make_v128_i32(65534,65534,65534,65534), make_v128_i32(65535,65535,65535,65535))->to_v128() == make_v128_i16(65534u,65534u,65534u,65534u,65535u,65535u,65535u,65535u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_u", make_v128_i32(65535,65535,65535,65535), make_v128_i32(65534,65534,65534,65534))->to_v128() == make_v128_i16(65535u,65535u,65535u,65535u,65534u,65534u,65534u,65534u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_u", make_v128_i32(65535,65535,65535,65535), make_v128_i32(65535,65535,65535,65535))->to_v128() == make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_u", make_v128_i32(65536,65536,65536,65536), make_v128_i32(65536,65536,65536,65536))->to_v128() == make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_u", make_v128_i32(65535,65535,65535,65535), make_v128_i32(65536,65536,65536,65536))->to_v128() == make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_u", make_v128_i32(65536,65536,65536,65536), make_v128_i32(65535,65535,65535,65535))->to_v128() == make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_u", make_v128_i32(0,0,0,0), make_v128_i32(65535,65535,65535,65535))->to_v128() == make_v128_i16(0u,0u,0u,0u,65535u,65535u,65535u,65535u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_u", make_v128_i32(0,0,0,0), make_v128_i32(65536,65536,65536,65536))->to_v128() == make_v128_i16(0u,0u,0u,0u,65535u,65535u,65535u,65535u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_u", make_v128_i32(4294967295,4294967295,4294967295,4294967295), make_v128_i32(65535,65535,65535,65535))->to_v128() == make_v128_i16(0u,0u,0u,0u,65535u,65535u,65535u,65535u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_u", make_v128_i32(4294967295,4294967295,4294967295,4294967295), make_v128_i32(65536,65536,65536,65536))->to_v128() == make_v128_i16(0u,0u,0u,0u,65535u,65535u,65535u,65535u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_u", make_v128_i32(2147483648,2147483648,2147483648,2147483648), make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_u", make_v128_i32(123456789,123456789,123456789,123456789), make_v128_i32(1234567890,1234567890,1234567890,1234567890))->to_v128() == make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u));
   CHECK(bkend.call_with_return("env", "i16x8.narrow_i32x4_u", make_v128_i32(2427178479,2427178479,2427178479,2427178479), make_v128_i32(305419896,305419896,305419896,305419896))->to_v128() == make_v128_i16(0u,0u,0u,0u,65535u,65535u,65535u,65535u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_conversions_31_wasm>", "[simd_conversions_31_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_conversions.31.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_conversions_32_wasm>", "[simd_conversions_32_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_conversions.32.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_conversions_33_wasm>", "[simd_conversions_33_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_conversions.33.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_conversions_34_wasm>", "[simd_conversions_34_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_conversions.34.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_conversions_35_wasm>", "[simd_conversions_35_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_conversions.35.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_conversions_36_wasm>", "[simd_conversions_36_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_conversions.36.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_conversions_37_wasm>", "[simd_conversions_37_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_conversions.37.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_conversions_38_wasm>", "[simd_conversions_38_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_conversions.38.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_conversions_39_wasm>", "[simd_conversions_39_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_conversions.39.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f32x4_convert_i32x4_s_add", make_v128_i32(1,2,3,4), make_v128_i32(2,3,4,5))->to_v128() == make_v128_f32(1077936128u,1084227584u,1088421888u,1091567616u));
   CHECK(bkend.call_with_return("env", "f32x4_convert_i32x4_s_sub", make_v128_i32(0,1,2,3), make_v128_i32(1,1,1,1))->to_v128() == make_v128_f32(3212836864u,0u,1065353216u,1073741824u));
   CHECK(bkend.call_with_return("env", "f32x4_convert_i32x4_u_mul", make_v128_i32(1,2,3,4), make_v128_i32(1,2,3,4))->to_v128() == make_v128_f32(1065353216u,1082130432u,1091567616u,1098907648u));
   CHECK(bkend.call_with_return("env", "i16x8_low_extend_narrow_ss", make_v128_i16(32768,32769,32767,32768,32768,32769,32767,32768), make_v128_i16(32768,32769,32767,32768,32768,32769,32767,32768))->to_v128() == make_v128_i16(65408u,65408u,127u,65408u,65408u,65408u,127u,65408u));
   CHECK(bkend.call_with_return("env", "i16x8_low_extend_narrow_su", make_v128_i16(32768,32769,32767,65535,32768,32769,32767,65535), make_v128_i16(32768,32769,32767,65535,32768,32769,32767,65535))->to_v128() == make_v128_i16(0u,0u,65535u,0u,0u,0u,65535u,0u));
   CHECK(bkend.call_with_return("env", "i16x8_high_extend_narrow_ss", make_v128_i16(32768,32769,32767,32768,32768,32769,32767,32768), make_v128_i16(32768,32769,32767,32768,32768,32769,32767,32768))->to_v128() == make_v128_i16(65408u,65408u,127u,65408u,65408u,65408u,127u,65408u));
   CHECK(bkend.call_with_return("env", "i16x8_high_extend_narrow_su", make_v128_i16(32768,32769,32767,65535,32768,32769,32767,65535), make_v128_i16(32768,32769,32767,65535,32768,32769,32767,65535))->to_v128() == make_v128_i16(0u,0u,65535u,0u,0u,0u,65535u,0u));
   CHECK(bkend.call_with_return("env", "i16x8_low_extend_narrow_uu", make_v128_i16(32768,32769,32768,65535,32768,32769,32768,65535), make_v128_i16(32768,32769,32768,65535,32768,32769,32768,65535))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8_low_extend_narrow_us", make_v128_i16(32768,32769,32767,32768,32768,32769,32767,32768), make_v128_i16(32768,32769,32767,32768,32768,32769,32767,32768))->to_v128() == make_v128_i16(128u,128u,127u,128u,128u,128u,127u,128u));
   CHECK(bkend.call_with_return("env", "i16x8_high_extend_narrow_uu", make_v128_i16(32768,32769,32767,65535,32768,32769,32767,65535), make_v128_i16(32768,32769,32767,65535,32768,32769,32767,65535))->to_v128() == make_v128_i16(0u,0u,255u,0u,0u,0u,255u,0u));
   CHECK(bkend.call_with_return("env", "i16x8_high_extend_narrow_us", make_v128_i16(32768,32769,32767,32768,32768,32769,32767,32768), make_v128_i16(32768,32769,32767,32768,32768,32769,32767,32768))->to_v128() == make_v128_i16(128u,128u,127u,128u,128u,128u,127u,128u));
   CHECK(bkend.call_with_return("env", "i32x4_low_extend_narrow_ss", make_v128_i32(2147483648,2147483649,2147483647,134217728), make_v128_i32(2147483648,2147483649,2147483647,134217728))->to_v128() == make_v128_i32(4294934528u,4294934528u,32767u,32767u));
   CHECK(bkend.call_with_return("env", "i32x4_low_extend_narrow_su", make_v128_i32(2147483648,2147483649,2147483647,4294967295), make_v128_i32(2147483648,2147483649,2147483647,4294967295))->to_v128() == make_v128_i32(0u,0u,4294967295u,0u));
   CHECK(bkend.call_with_return("env", "i32x4_high_extend_narrow_ss", make_v128_i32(2147483648,2147483649,2147483647,134217728), make_v128_i32(2147483648,2147483649,2147483647,134217728))->to_v128() == make_v128_i32(4294934528u,4294934528u,32767u,32767u));
   CHECK(bkend.call_with_return("env", "i32x4_high_extend_narrow_su", make_v128_i32(2147483648,2147483649,2147483647,4294967295), make_v128_i32(2147483648,2147483649,2147483647,4294967295))->to_v128() == make_v128_i32(0u,0u,4294967295u,0u));
   CHECK(bkend.call_with_return("env", "i32x4_low_extend_narrow_uu", make_v128_i32(2147483648,2147483649,2147483647,4294967295), make_v128_i32(2147483648,2147483649,2147483647,4294967295))->to_v128() == make_v128_i32(0u,0u,65535u,0u));
   CHECK(bkend.call_with_return("env", "i32x4_low_extend_narrow_us", make_v128_i32(2147483648,2147483649,2147483647,134217728), make_v128_i32(2147483648,2147483649,2147483647,134217728))->to_v128() == make_v128_i32(32768u,32768u,32767u,32767u));
   CHECK(bkend.call_with_return("env", "i32x4_high_extend_narrow_uu", make_v128_i32(2147483648,2147483649,2147483647,4294967295), make_v128_i32(2147483648,2147483649,2147483647,4294967295))->to_v128() == make_v128_i32(0u,0u,65535u,0u));
   CHECK(bkend.call_with_return("env", "i32x4_high_extend_narrow_us", make_v128_i32(2147483648,2147483649,2147483647,134217728), make_v128_i32(2147483648,2147483649,2147483647,134217728))->to_v128() == make_v128_i32(32768u,32768u,32767u,32767u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_conversions_40_wasm>", "[simd_conversions_40_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_conversions.40.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_conversions_41_wasm>", "[simd_conversions_41_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_conversions.41.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_conversions_42_wasm>", "[simd_conversions_42_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_conversions.42.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_conversions_43_wasm>", "[simd_conversions_43_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_conversions.43.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_conversions_44_wasm>", "[simd_conversions_44_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_conversions.44.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_conversions_45_wasm>", "[simd_conversions_45_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_conversions.45.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_conversions_46_wasm>", "[simd_conversions_46_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_conversions.46.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_conversions_47_wasm>", "[simd_conversions_47_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_conversions.47.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_conversions_48_wasm>", "[simd_conversions_48_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_conversions.48.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_conversions_49_wasm>", "[simd_conversions_49_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_conversions.49.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

