// Generated by spec_test_generator.  DO NOT MODIFY THIS FILE.

#include <algorithm>
#include <vector>
#include <iostream>
#include <iterator>
#include <cmath>
#include <cstdlib>
#include <catch2/catch.hpp>
#include <utils.hpp>
#include <wasm_config.hpp>
#include <eosio/vm/backend.hpp>

using namespace eosio;
using namespace eosio::vm;
extern wasm_allocator wa;

BACKEND_TEST_CASE( "Testing wasm <simd_address_0_wasm>", "[simd_address_0_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_address.0.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "load_data_1", UINT32_C(0))->to_v128() == make_v128_i32(50462976u,117835012u,286263560u,353637138u));
   CHECK(bkend.call_with_return("env", "load_data_2", UINT32_C(0))->to_v128() == make_v128_i32(50462976u,117835012u,286263560u,353637138u));
   CHECK(bkend.call_with_return("env", "load_data_3", UINT32_C(0))->to_v128() == make_v128_i32(67305985u,134678021u,303108105u,1381395u));
   CHECK(bkend.call_with_return("env", "load_data_4", UINT32_C(0))->to_v128() == make_v128_i32(84148994u,151521030u,319951120u,5396u));
   CHECK(bkend.call_with_return("env", "load_data_5", UINT32_C(0))->to_v128() == make_v128_i32(21u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "load_data_1", UINT32_C(0))->to_v128() == make_v128_i16(256u,770u,1284u,1798u,2312u,4368u,4882u,5396u));
   CHECK(bkend.call_with_return("env", "load_data_2", UINT32_C(0))->to_v128() == make_v128_i16(256u,770u,1284u,1798u,2312u,4368u,4882u,5396u));
   CHECK(bkend.call_with_return("env", "load_data_3", UINT32_C(0))->to_v128() == make_v128_i16(513u,1027u,1541u,2055u,4105u,4625u,5139u,21u));
   CHECK(bkend.call_with_return("env", "load_data_4", UINT32_C(0))->to_v128() == make_v128_i16(770u,1284u,1798u,2312u,4368u,4882u,5396u,0u));
   CHECK(bkend.call_with_return("env", "load_data_5", UINT32_C(0))->to_v128() == make_v128_i16(21u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "load_data_1", UINT32_C(0))->to_v128() == make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,16u,17u,18u,19u,20u,21u));
   CHECK(bkend.call_with_return("env", "load_data_2", UINT32_C(0))->to_v128() == make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,16u,17u,18u,19u,20u,21u));
   CHECK(bkend.call_with_return("env", "load_data_3", UINT32_C(0))->to_v128() == make_v128_i8(1u,2u,3u,4u,5u,6u,7u,8u,9u,16u,17u,18u,19u,20u,21u,0u));
   CHECK(bkend.call_with_return("env", "load_data_4", UINT32_C(0))->to_v128() == make_v128_i8(2u,3u,4u,5u,6u,7u,8u,9u,16u,17u,18u,19u,20u,21u,0u,0u));
   CHECK(bkend.call_with_return("env", "load_data_5", UINT32_C(0))->to_v128() == make_v128_i8(21u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "load_data_1", UINT32_C(65505))->to_v128() == make_v128_i32(421009174u,589439264u,656811300u,825239848u));
   CHECK(bkend.call_with_return("env", "load_data_2", UINT32_C(65505))->to_v128() == make_v128_i32(421009174u,589439264u,656811300u,825239848u));
   CHECK(bkend.call_with_return("env", "load_data_3", UINT32_C(65505))->to_v128() == make_v128_i32(538515479u,606282273u,673654309u,3223593u));
   CHECK(bkend.call_with_return("env", "load_data_4", UINT32_C(65505))->to_v128() == make_v128_i32(555751704u,623125282u,690497318u,12592u));
   CHECK(bkend.call_with_return("env", "load_data_5", UINT32_C(65505))->to_v128() == make_v128_i32(49u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "load_data_1", UINT32_C(65505))->to_v128() == make_v128_i16(5910u,6424u,8480u,8994u,9508u,10022u,10536u,12592u));
   CHECK(bkend.call_with_return("env", "load_data_2", UINT32_C(65505))->to_v128() == make_v128_i16(5910u,6424u,8480u,8994u,9508u,10022u,10536u,12592u));
   CHECK(bkend.call_with_return("env", "load_data_3", UINT32_C(65505))->to_v128() == make_v128_i16(6167u,8217u,8737u,9251u,9765u,10279u,12329u,49u));
   CHECK(bkend.call_with_return("env", "load_data_4", UINT32_C(65505))->to_v128() == make_v128_i16(6424u,8480u,8994u,9508u,10022u,10536u,12592u,0u));
   CHECK(bkend.call_with_return("env", "load_data_5", UINT32_C(65505))->to_v128() == make_v128_i16(49u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "load_data_1", UINT32_C(65505))->to_v128() == make_v128_i8(22u,23u,24u,25u,32u,33u,34u,35u,36u,37u,38u,39u,40u,41u,48u,49u));
   CHECK(bkend.call_with_return("env", "load_data_2", UINT32_C(65505))->to_v128() == make_v128_i8(22u,23u,24u,25u,32u,33u,34u,35u,36u,37u,38u,39u,40u,41u,48u,49u));
   CHECK(bkend.call_with_return("env", "load_data_3", UINT32_C(65505))->to_v128() == make_v128_i8(23u,24u,25u,32u,33u,34u,35u,36u,37u,38u,39u,40u,41u,48u,49u,0u));
   CHECK(bkend.call_with_return("env", "load_data_4", UINT32_C(65505))->to_v128() == make_v128_i8(24u,25u,32u,33u,34u,35u,36u,37u,38u,39u,40u,41u,48u,49u,0u,0u));
   CHECK(bkend.call_with_return("env", "load_data_5", UINT32_C(65505))->to_v128() == make_v128_i8(49u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK_THROWS_AS(bkend("env", "load_data_3", UINT32_C(4294967295)), std::exception);
   CHECK_THROWS_AS(bkend("env", "load_data_5", UINT32_C(65506)), std::exception);
   CHECK(bkend.call_with_return("env", "store_data_0")->to_v128() == make_v128_f32(0u,1065353216u,1073741824u,1077936128u));
   CHECK(bkend.call_with_return("env", "store_data_1")->to_v128() == make_v128_i32(0u,1u,2u,3u));
   CHECK(bkend.call_with_return("env", "store_data_2")->to_v128() == make_v128_i16(0u,1u,2u,3u,4u,5u,6u,7u));
   CHECK(bkend.call_with_return("env", "store_data_3")->to_v128() == make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u));
   CHECK(bkend.call_with_return("env", "store_data_4")->to_v128() == make_v128_i32(0u,1u,2u,3u));
   CHECK(bkend.call_with_return("env", "store_data_5")->to_v128() == make_v128_i32(0u,1u,2u,3u));
   CHECK_THROWS_AS(bkend("env", "store_data_6", UINT32_C(4294967295)), std::exception);
   CHECK_THROWS_AS(bkend("env", "store_data_6", UINT32_C(65535)), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_address_1_wasm>", "[simd_address_1_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_address.1.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "v128.load_offset_65521"), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_address_3_wasm>", "[simd_address_3_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_address.3.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "v128.store_offset_65521"), std::exception);
}

