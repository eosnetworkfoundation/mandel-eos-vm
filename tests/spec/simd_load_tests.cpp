// Generated by spec_test_generator.  DO NOT MODIFY THIS FILE.

#include <algorithm>
#include <vector>
#include <iostream>
#include <iterator>
#include <cmath>
#include <cstdlib>
#include <catch2/catch.hpp>
#include <utils.hpp>
#include <wasm_config.hpp>
#include <eosio/vm/backend.hpp>

using namespace eosio;
using namespace eosio::vm;
extern wasm_allocator wa;

BACKEND_TEST_CASE( "Testing wasm <simd_load_0_wasm>", "[simd_load_0_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load.0.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "v128.load")->to_v128() == make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u));
   CHECK(bkend.call_with_return("env", "v128.load")->to_v128() == make_v128_i16(256u,770u,1284u,1798u,2312u,2826u,3340u,3854u));
   CHECK(bkend.call_with_return("env", "v128.load")->to_v128() == make_v128_i32(50462976u,117835012u,185207048u,252579084u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_1_wasm>", "[simd_load_1_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load.1.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "as-i8x16_extract_lane_s-value/0")->to_ui32() == UINT32_C(0));
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_10_wasm>", "[simd_load_10_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load.10.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "as-i32x4.trunc_sat_f32x4_s-operand")->to_v128() == make_v128_i32(128u,1u,1u,4294967295u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_11_wasm>", "[simd_load_11_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load.11.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "as-f32x4.convert_i32x4_u-operand")->to_v128() == make_v128_f32(1073741824u,1073741824u,1073741824u,1073741824u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_12_wasm>", "[simd_load_12_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load.12.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "as-i8x16.swizzle-operand")->to_v128() == make_v128_i8(115u,114u,113u,112u,111u,110u,109u,108u,107u,106u,105u,104u,103u,102u,101u,100u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_13_wasm>", "[simd_load_13_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load.13.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "as-br-value")->to_v128() == make_v128_i32(50462976u,117835012u,185207048u,252579084u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_17_wasm>", "[simd_load_17_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load.17.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_18_wasm>", "[simd_load_18_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load.18.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_19_wasm>", "[simd_load_19_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load.19.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_2_wasm>", "[simd_load_2_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load.2.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "as-i8x16.eq-operand")->to_v128() == make_v128_i32(4294967295u,0u,0u,0u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_20_wasm>", "[simd_load_20_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load.20.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_21_wasm>", "[simd_load_21_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load.21.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_3_wasm>", "[simd_load_3_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load.3.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "as-v128.not-operand")->to_v128() == make_v128_i32(4244504319u,4177132283u,4109760247u,4042388211u));
   CHECK(bkend.call_with_return("env", "as-i8x16.all_true-operand")->to_ui32() == UINT32_C(0));
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_4_wasm>", "[simd_load_4_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load.4.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "as-v128.bitselect-operand")->to_v128() == make_v128_i32(2880154539u,2863311530u,3149642683u,3148528554u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_5_wasm>", "[simd_load_5_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load.5.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "as-i8x16.shl-operand")->to_v128() == make_v128_i32(1414812756u,1414812756u,1414812756u,1414812756u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_6_wasm>", "[simd_load_6_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load.6.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "as-add/sub-operand")->to_v128() == make_v128_i32(2u,2u,2u,2u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_7_wasm>", "[simd_load_7_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load.7.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "as-f32x4.mul-operand")->to_v128() == make_v128_f32(1132462080u,1073741824u,1080452710u,3221225472u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_8_wasm>", "[simd_load_8_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load.8.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "as-f32x4.abs-operand")->to_v128() == make_v128_i32(2147483647u,2147483647u,2147483647u,2147483647u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_load_9_wasm>", "[simd_load_9_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_load.9.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "as-f32x4.min-operand")->to_v128() == make_v128_i32(2863311530u,2863311530u,2863311530u,2863311530u));
}

