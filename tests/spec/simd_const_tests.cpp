// Generated by spec_test_generator.  DO NOT MODIFY THIS FILE.

#include <algorithm>
#include <vector>
#include <iostream>
#include <iterator>
#include <cmath>
#include <cstdlib>
#include <catch2/catch.hpp>
#include <utils.hpp>
#include <wasm_config.hpp>
#include <eosio/vm/backend.hpp>

using namespace eosio;
using namespace eosio::vm;
extern wasm_allocator wa;

BACKEND_TEST_CASE( "Testing wasm <simd_const_0_wasm>", "[simd_const_0_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.0.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_1_wasm>", "[simd_const_1_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.1.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_10_wasm>", "[simd_const_10_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.10.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_100_wasm>", "[simd_const_100_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.100.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_101_wasm>", "[simd_const_101_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.101.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_102_wasm>", "[simd_const_102_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.102.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_103_wasm>", "[simd_const_103_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.103.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_104_wasm>", "[simd_const_104_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.104.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_105_wasm>", "[simd_const_105_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.105.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_106_wasm>", "[simd_const_106_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.106.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_107_wasm>", "[simd_const_107_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.107.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_108_wasm>", "[simd_const_108_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.108.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_109_wasm>", "[simd_const_109_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.109.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_11_wasm>", "[simd_const_11_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.11.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_110_wasm>", "[simd_const_110_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.110.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_111_wasm>", "[simd_const_111_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.111.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_112_wasm>", "[simd_const_112_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.112.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_12_wasm>", "[simd_const_12_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.12.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_13_wasm>", "[simd_const_13_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.13.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_14_wasm>", "[simd_const_14_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.14.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_15_wasm>", "[simd_const_15_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.15.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_16_wasm>", "[simd_const_16_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.16.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_17_wasm>", "[simd_const_17_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.17.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_18_wasm>", "[simd_const_18_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.18.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_19_wasm>", "[simd_const_19_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.19.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_197_wasm>", "[simd_const_197_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.197.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f32(645922816u,645922816u,645922816u,645922816u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_198_wasm>", "[simd_const_198_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.198.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f32(2793406464u,2793406464u,2793406464u,2793406464u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_199_wasm>", "[simd_const_199_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.199.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f32(645922819u,645922819u,645922819u,645922819u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_2_wasm>", "[simd_const_2_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.2.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_20_wasm>", "[simd_const_20_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.20.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_200_wasm>", "[simd_const_200_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.200.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f32(2793406467u,2793406467u,2793406467u,2793406467u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_201_wasm>", "[simd_const_201_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.201.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f32(645922816u,645922816u,645922816u,645922816u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_202_wasm>", "[simd_const_202_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.202.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f32(2793406464u,2793406464u,2793406464u,2793406464u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_203_wasm>", "[simd_const_203_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.203.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f32(645922819u,645922819u,645922819u,645922819u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_204_wasm>", "[simd_const_204_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.204.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f32(2793406467u,2793406467u,2793406467u,2793406467u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_205_wasm>", "[simd_const_205_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.205.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f32(645922816u,645922816u,645922816u,645922816u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_206_wasm>", "[simd_const_206_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.206.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f32(2793406464u,2793406464u,2793406464u,2793406464u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_207_wasm>", "[simd_const_207_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.207.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f32(645922818u,645922818u,645922818u,645922818u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_208_wasm>", "[simd_const_208_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.208.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f32(2793406466u,2793406466u,2793406466u,2793406466u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_209_wasm>", "[simd_const_209_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.209.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f32(1484783616u,1484783616u,1484783616u,1484783616u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_21_wasm>", "[simd_const_21_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.21.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_210_wasm>", "[simd_const_210_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.210.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f32(3632267264u,3632267264u,3632267264u,3632267264u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_211_wasm>", "[simd_const_211_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.211.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f32(1484783619u,1484783619u,1484783619u,1484783619u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_212_wasm>", "[simd_const_212_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.212.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f32(3632267267u,3632267267u,3632267267u,3632267267u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_213_wasm>", "[simd_const_213_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.213.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f32(1484783616u,1484783616u,1484783616u,1484783616u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_214_wasm>", "[simd_const_214_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.214.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f32(3632267264u,3632267264u,3632267264u,3632267264u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_215_wasm>", "[simd_const_215_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.215.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f32(1484783618u,1484783618u,1484783618u,1484783618u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_216_wasm>", "[simd_const_216_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.216.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f32(3632267266u,3632267266u,3632267266u,3632267266u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_217_wasm>", "[simd_const_217_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.217.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f32(1484783616u,1484783616u,1484783616u,1484783616u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_218_wasm>", "[simd_const_218_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.218.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f32(3632267264u,3632267264u,3632267264u,3632267264u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_219_wasm>", "[simd_const_219_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.219.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f32(1484783618u,1484783618u,1484783618u,1484783618u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_22_wasm>", "[simd_const_22_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.22.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_220_wasm>", "[simd_const_220_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.220.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f32(3632267266u,3632267266u,3632267266u,3632267266u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_221_wasm>", "[simd_const_221_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.221.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f32(0u,0u,0u,0u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_222_wasm>", "[simd_const_222_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.222.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f32(2147483648u,2147483648u,2147483648u,2147483648u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_223_wasm>", "[simd_const_223_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.223.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f32(3u,3u,3u,3u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_224_wasm>", "[simd_const_224_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.224.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f32(2147483651u,2147483651u,2147483651u,2147483651u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_225_wasm>", "[simd_const_225_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.225.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f32(2139095039u,2139095039u,2139095039u,2139095039u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_226_wasm>", "[simd_const_226_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.226.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f32(4286578687u,4286578687u,4286578687u,4286578687u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_227_wasm>", "[simd_const_227_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.227.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f32(2139095039u,2139095039u,2139095039u,2139095039u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_228_wasm>", "[simd_const_228_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.228.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f32(4286578687u,4286578687u,4286578687u,4286578687u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_229_wasm>", "[simd_const_229_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.229.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(1905022642377719808));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_23_wasm>", "[simd_const_23_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.23.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_230_wasm>", "[simd_const_230_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.230.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(11128394679232495616));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_231_wasm>", "[simd_const_231_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.231.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(1905022642377719809));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_232_wasm>", "[simd_const_232_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.232.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(11128394679232495617));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_233_wasm>", "[simd_const_233_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.233.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(1905022642377719809));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_234_wasm>", "[simd_const_234_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.234.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(11128394679232495617));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_235_wasm>", "[simd_const_235_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.235.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(1905022642377719809));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_236_wasm>", "[simd_const_236_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.236.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(11128394679232495617));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_237_wasm>", "[simd_const_237_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.237.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(1905022642377719809));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_238_wasm>", "[simd_const_238_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.238.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(11128394679232495617));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_239_wasm>", "[simd_const_239_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.239.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(1905022642377719809));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_24_wasm>", "[simd_const_24_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.24.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_240_wasm>", "[simd_const_240_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.240.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(11128394679232495617));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_241_wasm>", "[simd_const_241_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.241.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(1905022642377719810));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_242_wasm>", "[simd_const_242_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.242.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(11128394679232495618));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_243_wasm>", "[simd_const_243_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.243.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(1905022642377719810));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_244_wasm>", "[simd_const_244_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.244.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(11128394679232495618));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_245_wasm>", "[simd_const_245_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.245.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(1905022642377719810));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_246_wasm>", "[simd_const_246_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.246.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(11128394679232495618));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_247_wasm>", "[simd_const_247_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.247.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(1905022642377719810));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_248_wasm>", "[simd_const_248_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.248.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(11128394679232495618));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_249_wasm>", "[simd_const_249_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.249.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(1905022642377719810));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_25_wasm>", "[simd_const_25_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.25.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_250_wasm>", "[simd_const_250_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.250.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(11128394679232495618));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_251_wasm>", "[simd_const_251_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.251.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(1905022642377719810));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_252_wasm>", "[simd_const_252_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.252.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(11128394679232495618));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_253_wasm>", "[simd_const_253_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.253.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(1905022642377719811));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_254_wasm>", "[simd_const_254_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.254.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(11128394679232495619));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_255_wasm>", "[simd_const_255_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.255.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(1905022642377719808));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_256_wasm>", "[simd_const_256_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.256.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(11128394679232495616));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_257_wasm>", "[simd_const_257_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.257.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(1905022642377719809));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_258_wasm>", "[simd_const_258_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.258.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(11128394679232495617));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_259_wasm>", "[simd_const_259_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.259.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(1905022642377719809));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_26_wasm>", "[simd_const_26_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.26.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_260_wasm>", "[simd_const_260_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.260.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(11128394679232495617));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_261_wasm>", "[simd_const_261_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.261.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(1905022642377719809));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_262_wasm>", "[simd_const_262_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.262.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(11128394679232495617));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_263_wasm>", "[simd_const_263_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.263.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(1905022642377719809));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_264_wasm>", "[simd_const_264_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.264.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(11128394679232495617));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_265_wasm>", "[simd_const_265_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.265.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(1905022642377719809));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_266_wasm>", "[simd_const_266_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.266.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(11128394679232495617));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_267_wasm>", "[simd_const_267_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.267.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(1905022642377719810));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_268_wasm>", "[simd_const_268_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.268.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(11128394679232495618));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_269_wasm>", "[simd_const_269_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.269.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(1905022642377719810));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_27_wasm>", "[simd_const_27_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.27.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_270_wasm>", "[simd_const_270_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.270.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(11128394679232495618));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_271_wasm>", "[simd_const_271_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.271.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(1905022642377719810));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_272_wasm>", "[simd_const_272_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.272.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(11128394679232495618));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_273_wasm>", "[simd_const_273_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.273.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(1905022642377719810));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_274_wasm>", "[simd_const_274_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.274.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(11128394679232495618));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_275_wasm>", "[simd_const_275_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.275.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(1905022642377719810));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_276_wasm>", "[simd_const_276_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.276.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(11128394679232495618));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_277_wasm>", "[simd_const_277_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.277.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(1905022642377719810));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_278_wasm>", "[simd_const_278_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.278.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(11128394679232495618));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_279_wasm>", "[simd_const_279_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.279.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(1905022642377719811));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_28_wasm>", "[simd_const_28_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.28.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_280_wasm>", "[simd_const_280_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.280.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(11128394679232495619));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_281_wasm>", "[simd_const_281_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.281.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(9106278446543142912));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_282_wasm>", "[simd_const_282_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.282.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(18329650483397918720));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_283_wasm>", "[simd_const_283_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.283.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(9106278446543142913));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_284_wasm>", "[simd_const_284_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.284.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(18329650483397918721));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_285_wasm>", "[simd_const_285_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.285.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(9106278446543142913));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_286_wasm>", "[simd_const_286_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.286.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(18329650483397918721));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_287_wasm>", "[simd_const_287_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.287.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(9106278446543142914));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_288_wasm>", "[simd_const_288_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.288.wasm");
   backend_t bkend( code, &wa );

   CHECK(bit_cast<uint64_t>(bkend.call_with_return("env", "f")->to_f64()) == UINT64_C(18329650483397918722));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_289_wasm>", "[simd_const_289_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.289.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(7309342195222315008u,7309342195222315008u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_29_wasm>", "[simd_const_29_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.29.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_290_wasm>", "[simd_const_290_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.290.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(16532714232077090816u,16532714232077090816u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_291_wasm>", "[simd_const_291_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.291.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(7309342195222315009u,7309342195222315009u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_292_wasm>", "[simd_const_292_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.292.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(16532714232077090817u,16532714232077090817u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_293_wasm>", "[simd_const_293_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.293.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(7309342195222315009u,7309342195222315009u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_294_wasm>", "[simd_const_294_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.294.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(16532714232077090817u,16532714232077090817u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_295_wasm>", "[simd_const_295_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.295.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(7309342195222315009u,7309342195222315009u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_296_wasm>", "[simd_const_296_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.296.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(16532714232077090817u,16532714232077090817u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_297_wasm>", "[simd_const_297_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.297.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(7309342195222315009u,7309342195222315009u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_298_wasm>", "[simd_const_298_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.298.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(16532714232077090817u,16532714232077090817u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_299_wasm>", "[simd_const_299_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.299.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(7309342195222315009u,7309342195222315009u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_3_wasm>", "[simd_const_3_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.3.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_30_wasm>", "[simd_const_30_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.30.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_300_wasm>", "[simd_const_300_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.300.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(16532714232077090817u,16532714232077090817u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_301_wasm>", "[simd_const_301_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.301.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(7309342195222315010u,7309342195222315010u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_302_wasm>", "[simd_const_302_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.302.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(16532714232077090818u,16532714232077090818u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_303_wasm>", "[simd_const_303_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.303.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(7309342195222315010u,7309342195222315010u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_304_wasm>", "[simd_const_304_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.304.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(16532714232077090818u,16532714232077090818u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_305_wasm>", "[simd_const_305_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.305.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(7309342195222315010u,7309342195222315010u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_306_wasm>", "[simd_const_306_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.306.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(16532714232077090818u,16532714232077090818u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_307_wasm>", "[simd_const_307_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.307.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(7309342195222315010u,7309342195222315010u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_308_wasm>", "[simd_const_308_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.308.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(16532714232077090818u,16532714232077090818u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_309_wasm>", "[simd_const_309_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.309.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(7309342195222315010u,7309342195222315010u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_31_wasm>", "[simd_const_31_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.31.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_310_wasm>", "[simd_const_310_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.310.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(16532714232077090818u,16532714232077090818u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_311_wasm>", "[simd_const_311_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.311.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(7309342195222315010u,7309342195222315010u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_312_wasm>", "[simd_const_312_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.312.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(16532714232077090818u,16532714232077090818u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_313_wasm>", "[simd_const_313_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.313.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(7309342195222315010u,7309342195222315010u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_314_wasm>", "[simd_const_314_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.314.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(16532714232077090818u,16532714232077090818u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_315_wasm>", "[simd_const_315_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.315.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(7309342195222315011u,7309342195222315011u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_316_wasm>", "[simd_const_316_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.316.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(16532714232077090819u,16532714232077090819u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_317_wasm>", "[simd_const_317_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.317.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(5044031582654955520u,5044031582654955520u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_318_wasm>", "[simd_const_318_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.318.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(14267403619509731328u,14267403619509731328u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_319_wasm>", "[simd_const_319_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.319.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(5044031582654955521u,5044031582654955521u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_32_wasm>", "[simd_const_32_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.32.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_320_wasm>", "[simd_const_320_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.320.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(14267403619509731329u,14267403619509731329u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_321_wasm>", "[simd_const_321_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.321.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(5044031582654955521u,5044031582654955521u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_322_wasm>", "[simd_const_322_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.322.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(14267403619509731329u,14267403619509731329u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_323_wasm>", "[simd_const_323_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.323.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(5044031582654955521u,5044031582654955521u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_324_wasm>", "[simd_const_324_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.324.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(14267403619509731329u,14267403619509731329u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_325_wasm>", "[simd_const_325_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.325.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(5044031582654955521u,5044031582654955521u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_326_wasm>", "[simd_const_326_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.326.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(14267403619509731329u,14267403619509731329u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_327_wasm>", "[simd_const_327_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.327.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(5044031582654955521u,5044031582654955521u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_328_wasm>", "[simd_const_328_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.328.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(14267403619509731329u,14267403619509731329u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_329_wasm>", "[simd_const_329_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.329.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(5044031582654955522u,5044031582654955522u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_33_wasm>", "[simd_const_33_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.33.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_330_wasm>", "[simd_const_330_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.330.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(14267403619509731330u,14267403619509731330u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_331_wasm>", "[simd_const_331_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.331.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(5044031582654955522u,5044031582654955522u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_332_wasm>", "[simd_const_332_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.332.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(14267403619509731330u,14267403619509731330u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_333_wasm>", "[simd_const_333_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.333.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(5044031582654955522u,5044031582654955522u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_334_wasm>", "[simd_const_334_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.334.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(14267403619509731330u,14267403619509731330u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_335_wasm>", "[simd_const_335_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.335.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(5044031582654955522u,5044031582654955522u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_336_wasm>", "[simd_const_336_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.336.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(14267403619509731330u,14267403619509731330u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_337_wasm>", "[simd_const_337_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.337.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(5044031582654955522u,5044031582654955522u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_338_wasm>", "[simd_const_338_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.338.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(14267403619509731330u,14267403619509731330u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_339_wasm>", "[simd_const_339_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.339.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(5044031582654955522u,5044031582654955522u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_34_wasm>", "[simd_const_34_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.34.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_340_wasm>", "[simd_const_340_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.340.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(14267403619509731330u,14267403619509731330u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_341_wasm>", "[simd_const_341_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.341.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(5044031582654955522u,5044031582654955522u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_342_wasm>", "[simd_const_342_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.342.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(14267403619509731330u,14267403619509731330u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_343_wasm>", "[simd_const_343_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.343.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(5044031582654955523u,5044031582654955523u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_344_wasm>", "[simd_const_344_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.344.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(14267403619509731331u,14267403619509731331u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_345_wasm>", "[simd_const_345_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.345.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(4877398396442247168u,4877398396442247168u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_346_wasm>", "[simd_const_346_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.346.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(14100770433297022976u,14100770433297022976u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_347_wasm>", "[simd_const_347_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.347.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(4877398396442247169u,4877398396442247169u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_348_wasm>", "[simd_const_348_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.348.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(14100770433297022977u,14100770433297022977u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_349_wasm>", "[simd_const_349_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.349.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(4877398396442247169u,4877398396442247169u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_35_wasm>", "[simd_const_35_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.35.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_350_wasm>", "[simd_const_350_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.350.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(14100770433297022977u,14100770433297022977u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_351_wasm>", "[simd_const_351_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.351.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(4877398396442247170u,4877398396442247170u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_352_wasm>", "[simd_const_352_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.352.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(14100770433297022978u,14100770433297022978u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_353_wasm>", "[simd_const_353_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.353.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(0u,0u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_354_wasm>", "[simd_const_354_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.354.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(9223372036854775808u,9223372036854775808u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_355_wasm>", "[simd_const_355_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.355.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(1u,1u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_356_wasm>", "[simd_const_356_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.356.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(9223372036854775809u,9223372036854775809u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_357_wasm>", "[simd_const_357_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.357.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(1u,1u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_358_wasm>", "[simd_const_358_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.358.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(9223372036854775809u,9223372036854775809u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_359_wasm>", "[simd_const_359_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.359.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(1u,1u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_36_wasm>", "[simd_const_36_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.36.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_360_wasm>", "[simd_const_360_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.360.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(9223372036854775809u,9223372036854775809u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_361_wasm>", "[simd_const_361_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.361.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(1u,1u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_362_wasm>", "[simd_const_362_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.362.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(9223372036854775809u,9223372036854775809u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_363_wasm>", "[simd_const_363_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.363.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(1u,1u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_364_wasm>", "[simd_const_364_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.364.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(9223372036854775809u,9223372036854775809u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_365_wasm>", "[simd_const_365_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.365.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(2u,2u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_366_wasm>", "[simd_const_366_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.366.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(9223372036854775810u,9223372036854775810u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_367_wasm>", "[simd_const_367_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.367.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(2u,2u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_368_wasm>", "[simd_const_368_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.368.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(9223372036854775810u,9223372036854775810u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_369_wasm>", "[simd_const_369_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.369.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(2u,2u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_37_wasm>", "[simd_const_37_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.37.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_370_wasm>", "[simd_const_370_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.370.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(9223372036854775810u,9223372036854775810u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_371_wasm>", "[simd_const_371_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.371.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(2u,2u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_372_wasm>", "[simd_const_372_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.372.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(9223372036854775810u,9223372036854775810u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_373_wasm>", "[simd_const_373_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.373.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(2u,2u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_374_wasm>", "[simd_const_374_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.374.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(9223372036854775810u,9223372036854775810u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_375_wasm>", "[simd_const_375_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.375.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(2u,2u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_376_wasm>", "[simd_const_376_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.376.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(9223372036854775810u,9223372036854775810u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_377_wasm>", "[simd_const_377_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.377.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(2u,2u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_378_wasm>", "[simd_const_378_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.378.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(9223372036854775810u,9223372036854775810u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_379_wasm>", "[simd_const_379_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.379.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(4503599627370499u,4503599627370499u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_38_wasm>", "[simd_const_38_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.38.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_380_wasm>", "[simd_const_380_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.380.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(9227875636482146307u,9227875636482146307u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_381_wasm>", "[simd_const_381_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.381.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(9218868437227405311u,9218868437227405311u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_382_wasm>", "[simd_const_382_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.382.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(18442240474082181119u,18442240474082181119u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_383_wasm>", "[simd_const_383_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.383.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(9218868437227405311u,9218868437227405311u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_384_wasm>", "[simd_const_384_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.384.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f")->to_v128() == make_v128_f64(18442240474082181119u,18442240474082181119u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_385_wasm>", "[simd_const_385_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.385.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "as-br-retval")->to_v128() == make_v128_i32(50462976u,117835012u,185207048u,252579084u));
   CHECK(bkend.call_with_return("env", "as-br_if-retval")->to_v128() == make_v128_i32(0u,1u,2u,3u));
   CHECK(bkend.call_with_return("env", "as-return-retval")->to_v128() == make_v128_i32(0u,1u,2u,3u));
   CHECK(bkend.call_with_return("env", "as-if-then-retval")->to_v128() == make_v128_i32(0u,1u,2u,3u));
   CHECK(bkend.call_with_return("env", "as-if-else-retval")->to_v128() == make_v128_i32(3u,2u,1u,0u));
   CHECK(bkend.call_with_return("env", "as-call-param")->to_v128() == make_v128_i32(0u,1u,2u,3u));
   CHECK(bkend.call_with_return("env", "as-call_indirect-param")->to_v128() == make_v128_i32(0u,1u,2u,3u));
   CHECK(bkend.call_with_return("env", "as-block-retval")->to_v128() == make_v128_i32(0u,1u,2u,3u));
   CHECK(bkend.call_with_return("env", "as-loop-retval")->to_v128() == make_v128_i32(0u,1u,2u,3u));
   CHECK(!bkend.call_with_return("env", "as-drop-operand"));
   CHECK(bkend.call_with_return("env", "as-br-retval2")->to_v128() == make_v128_i64(216736831696667908u,795458214401281292u));
   CHECK(bkend.call_with_return("env", "as-br_if-retval2")->to_v128() == make_v128_i64(0u,1u));
   CHECK(bkend.call_with_return("env", "as-return-retval2")->to_v128() == make_v128_i64(0u,1u));
   CHECK(bkend.call_with_return("env", "as-if-then-retval2")->to_v128() == make_v128_i64(0u,1u));
   CHECK(bkend.call_with_return("env", "as-if-else-retval2")->to_v128() == make_v128_i64(1u,0u));
   CHECK(bkend.call_with_return("env", "as-call-param2")->to_v128() == make_v128_i64(0u,1u));
   CHECK(bkend.call_with_return("env", "as-call_indirect-param2")->to_v128() == make_v128_i64(0u,1u));
   CHECK(bkend.call_with_return("env", "as-block-retval2")->to_v128() == make_v128_i64(0u,1u));
   CHECK(bkend.call_with_return("env", "as-loop-retval2")->to_v128() == make_v128_i64(0u,1u));
   CHECK(!bkend.call_with_return("env", "as-drop-operand2"));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_386_wasm>", "[simd_const_386_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.386.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "as-local.set/get-value_0_0", make_v128_i32(0,0,0,0))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "as-local.set/get-value_0_1", make_v128_i32(1,1,1,1))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "as-local.set/get-value_3_0", make_v128_i32(2,2,2,2))->to_v128() == make_v128_i32(2u,2u,2u,2u));
   CHECK(bkend.call_with_return("env", "as-local.tee-value")->to_v128() == make_v128_i32(0u,1u,2u,3u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_387_wasm>", "[simd_const_387_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.387.wasm");
   backend_t bkend( code, &wa );

   CHECK(!bkend.call_with_return("env", "as-global.set_value_$g0_$g1_$g2_$g3", make_v128_i32(1,1,1,1), make_v128_i32(2,2,2,2), make_v128_i32(3,3,3,3), make_v128_i32(4,4,4,4)));
   CHECK(bkend.call_with_return("env", "global.get_g0")->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "global.get_g1")->to_v128() == make_v128_i32(2u,2u,2u,2u));
   CHECK(bkend.call_with_return("env", "global.get_g2")->to_v128() == make_v128_i32(3u,3u,3u,3u));
   CHECK(bkend.call_with_return("env", "global.get_g3")->to_v128() == make_v128_i32(4u,4u,4u,4u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_388_wasm>", "[simd_const_388_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.388.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "i32x4.test")->to_v128() == make_v128_i32(195940365u,195940365u,195940365u,195940365u));
   CHECK(bkend.call_with_return("env", "i32x4.smax")->to_v128() == make_v128_i32(2147483647u,2147483647u,2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i32x4.neg_smax")->to_v128() == make_v128_i32(2147483649u,2147483649u,2147483649u,2147483649u));
   CHECK(bkend.call_with_return("env", "i32x4.inc_smin")->to_v128() == make_v128_i32(2147483649u,2147483649u,2147483649u,2147483649u));
   CHECK(bkend.call_with_return("env", "i32x4.neg_zero")->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.not_octal")->to_v128() == make_v128_i32(10u,10u,10u,10u));
   CHECK(bkend.call_with_return("env", "i32x4.plus_sign")->to_v128() == make_v128_i32(42u,42u,42u,42u));
   CHECK(bkend.call_with_return("env", "i32x4-dec-sep1")->to_v128() == make_v128_i32(1000000u,1000000u,1000000u,1000000u));
   CHECK(bkend.call_with_return("env", "i32x4-dec-sep2")->to_v128() == make_v128_i32(1000u,1000u,1000u,1000u));
   CHECK(bkend.call_with_return("env", "i32x4-hex-sep1")->to_v128() == make_v128_i32(168755353u,168755353u,168755353u,168755353u));
   CHECK(bkend.call_with_return("env", "i32x4-hex-sep2")->to_v128() == make_v128_i32(109071u,109071u,109071u,109071u));
   CHECK(bkend.call_with_return("env", "i64x2.test")->to_v128() == make_v128_i64(841557459837243405u,841557459837243405u));
   CHECK(bkend.call_with_return("env", "i64x2.smax")->to_v128() == make_v128_i64(9223372036854775807u,9223372036854775807u));
   CHECK(bkend.call_with_return("env", "i64x2.neg_smax")->to_v128() == make_v128_i64(9223372036854775809u,9223372036854775809u));
   CHECK(bkend.call_with_return("env", "i64x2.inc_smin")->to_v128() == make_v128_i64(9223372036854775809u,9223372036854775809u));
   CHECK(bkend.call_with_return("env", "i64x2.neg_zero")->to_v128() == make_v128_i64(0u,0u));
   CHECK(bkend.call_with_return("env", "i64x2.not_octal")->to_v128() == make_v128_i64(10010u,10010u));
   CHECK(bkend.call_with_return("env", "i64x2.plus_sign")->to_v128() == make_v128_i64(42u,42u));
   CHECK(bkend.call_with_return("env", "i64x2-dec-sep1")->to_v128() == make_v128_i64(10000000000000u,10000000000000u));
   CHECK(bkend.call_with_return("env", "i64x2-dec-sep2")->to_v128() == make_v128_i64(10000000u,10000000u));
   CHECK(bkend.call_with_return("env", "i64x2-hex-sep1")->to_v128() == make_v128_i64(724798722328690841u,724798722328690841u));
   CHECK(bkend.call_with_return("env", "i64x2-hex-sep2")->to_v128() == make_v128_i64(114369341967u,114369341967u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_39_wasm>", "[simd_const_39_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.39.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_4_wasm>", "[simd_const_4_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.4.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_40_wasm>", "[simd_const_40_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.40.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_409_wasm>", "[simd_const_409_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.409.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "f32-dec-sep1")->to_v128() == make_v128_f32(1232348160u,1232348160u,1232348160u,1232348160u));
   CHECK(bkend.call_with_return("env", "f32-dec-sep2")->to_v128() == make_v128_f32(1148846080u,1148846080u,1148846080u,1148846080u));
   CHECK(bkend.call_with_return("env", "f32-dec-sep3")->to_v128() == make_v128_f32(1148897552u,1148897552u,1148897552u,1148897552u));
   CHECK(bkend.call_with_return("env", "f32-dec-sep4")->to_v128() == make_v128_f32(1482758550u,1482758550u,1482758550u,1482758550u));
   CHECK(bkend.call_with_return("env", "f32-dec-sep5")->to_v128() == make_v128_f32(1847438964u,1847438964u,1847438964u,1847438964u));
   CHECK(bkend.call_with_return("env", "f32-hex-sep1")->to_v128() == make_v128_f32(1294004234u,1294004234u,1294004234u,1294004234u));
   CHECK(bkend.call_with_return("env", "f32-hex-sep2")->to_v128() == make_v128_f32(1205143424u,1205143424u,1205143424u,1205143424u));
   CHECK(bkend.call_with_return("env", "f32-hex-sep3")->to_v128() == make_v128_f32(1193345009u,1193345009u,1193345009u,1193345009u));
   CHECK(bkend.call_with_return("env", "f32-hex-sep4")->to_v128() == make_v128_f32(1240465408u,1240465408u,1240465408u,1240465408u));
   CHECK(bkend.call_with_return("env", "f32-hex-sep5")->to_v128() == make_v128_f32(1437319208u,1437319208u,1437319208u,1437319208u));
   CHECK(bkend.call_with_return("env", "f64-dec-sep1")->to_v128() == make_v128_f64(4696837146684686336u,4696837146684686336u));
   CHECK(bkend.call_with_return("env", "f64-dec-sep2")->to_v128() == make_v128_f64(4652007308841189376u,4652007308841189376u));
   CHECK(bkend.call_with_return("env", "f64-dec-sep3")->to_v128() == make_v128_f64(4652034942576659200u,4652034942576659200u));
   CHECK(bkend.call_with_return("env", "f64-dec-sep4")->to_v128() == make_v128_f64(4831275200913801216u,4831275200913801216u));
   CHECK(bkend.call_with_return("env", "f64-dec-sep5")->to_v128() == make_v128_f64(5027061507362119324u,5027061507362119324u));
   CHECK(bkend.call_with_return("env", "f64-hex-sep1")->to_v128() == make_v128_f64(4729938499128524800u,4729938499128524800u));
   CHECK(bkend.call_with_return("env", "f64-hex-sep2")->to_v128() == make_v128_f64(4682231715257647104u,4682231715257647104u));
   CHECK(bkend.call_with_return("env", "f64-hex-sep3")->to_v128() == make_v128_f64(4675897489574114112u,4675897489574114112u));
   CHECK(bkend.call_with_return("env", "f64-hex-sep4")->to_v128() == make_v128_f64(4701195061021376512u,4701195061021376512u));
   CHECK(bkend.call_with_return("env", "f64-hex-sep5")->to_v128() == make_v128_f64(4806880140420149248u,4806880140420149248u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_41_wasm>", "[simd_const_41_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.41.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_42_wasm>", "[simd_const_42_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.42.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_43_wasm>", "[simd_const_43_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.43.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_44_wasm>", "[simd_const_44_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.44.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_45_wasm>", "[simd_const_45_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.45.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_46_wasm>", "[simd_const_46_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.46.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_47_wasm>", "[simd_const_47_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.47.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_48_wasm>", "[simd_const_48_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.48.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_486_wasm>", "[simd_const_486_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.486.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "parse_i8x16")->to_v128() == make_v128_i8(0u,0u,0u,0u,128u,128u,128u,128u,255u,255u,255u,255u,255u,255u,255u,255u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_487_wasm>", "[simd_const_487_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.487.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "parse_i16x8")->to_v128() == make_v128_i16(0u,0u,32768u,32768u,65535u,65535u,65535u,65535u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_488_wasm>", "[simd_const_488_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.488.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "parse_i32x4")->to_v128() == make_v128_i32(4294967249u,4294967249u,4294967249u,4294967249u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_489_wasm>", "[simd_const_489_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.489.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "parse_i64x2")->to_v128() == make_v128_i64(9223372036854775807u,9223372036854775807u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_49_wasm>", "[simd_const_49_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.49.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_490_wasm>", "[simd_const_490_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.490.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "parse_f32x4")->to_v128() == make_v128_f32(1333788672u,1333788672u,1333788672u,1333788672u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_491_wasm>", "[simd_const_491_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.491.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "parse_f64x2")->to_v128() == make_v128_f64(9218868437227405311u,9218868437227405311u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_const_5_wasm>", "[simd_const_5_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.5.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_50_wasm>", "[simd_const_50_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.50.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_51_wasm>", "[simd_const_51_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.51.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_52_wasm>", "[simd_const_52_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.52.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_53_wasm>", "[simd_const_53_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.53.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_54_wasm>", "[simd_const_54_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.54.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_55_wasm>", "[simd_const_55_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.55.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_56_wasm>", "[simd_const_56_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.56.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_57_wasm>", "[simd_const_57_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.57.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_58_wasm>", "[simd_const_58_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.58.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_59_wasm>", "[simd_const_59_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.59.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_6_wasm>", "[simd_const_6_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.6.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_60_wasm>", "[simd_const_60_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.60.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_61_wasm>", "[simd_const_61_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.61.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_62_wasm>", "[simd_const_62_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.62.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_63_wasm>", "[simd_const_63_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.63.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_64_wasm>", "[simd_const_64_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.64.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_65_wasm>", "[simd_const_65_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.65.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_66_wasm>", "[simd_const_66_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.66.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_67_wasm>", "[simd_const_67_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.67.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_68_wasm>", "[simd_const_68_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.68.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_69_wasm>", "[simd_const_69_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.69.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_7_wasm>", "[simd_const_7_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.7.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_70_wasm>", "[simd_const_70_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.70.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_71_wasm>", "[simd_const_71_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.71.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_72_wasm>", "[simd_const_72_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.72.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_73_wasm>", "[simd_const_73_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.73.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_74_wasm>", "[simd_const_74_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.74.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_75_wasm>", "[simd_const_75_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.75.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_76_wasm>", "[simd_const_76_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.76.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_77_wasm>", "[simd_const_77_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.77.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_78_wasm>", "[simd_const_78_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.78.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_79_wasm>", "[simd_const_79_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.79.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_8_wasm>", "[simd_const_8_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.8.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_80_wasm>", "[simd_const_80_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.80.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_81_wasm>", "[simd_const_81_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.81.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_82_wasm>", "[simd_const_82_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.82.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_83_wasm>", "[simd_const_83_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.83.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_84_wasm>", "[simd_const_84_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.84.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_85_wasm>", "[simd_const_85_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.85.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_86_wasm>", "[simd_const_86_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.86.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_87_wasm>", "[simd_const_87_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.87.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_88_wasm>", "[simd_const_88_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.88.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_89_wasm>", "[simd_const_89_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.89.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_9_wasm>", "[simd_const_9_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.9.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_90_wasm>", "[simd_const_90_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.90.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_91_wasm>", "[simd_const_91_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.91.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_92_wasm>", "[simd_const_92_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.92.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_93_wasm>", "[simd_const_93_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.93.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_94_wasm>", "[simd_const_94_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.94.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_95_wasm>", "[simd_const_95_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.95.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_96_wasm>", "[simd_const_96_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.96.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_97_wasm>", "[simd_const_97_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.97.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_98_wasm>", "[simd_const_98_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.98.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <simd_const_99_wasm>", "[simd_const_99_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_const.99.wasm");
   backend_t bkend( code, &wa );

}

