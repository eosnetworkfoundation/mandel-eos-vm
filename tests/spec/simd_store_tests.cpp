// Generated by spec_test_generator.  DO NOT MODIFY THIS FILE.

#include <algorithm>
#include <vector>
#include <iostream>
#include <iterator>
#include <cmath>
#include <cstdlib>
#include <catch2/catch.hpp>
#include <utils.hpp>
#include <wasm_config.hpp>
#include <eosio/vm/backend.hpp>

using namespace eosio;
using namespace eosio::vm;
extern wasm_allocator wa;

BACKEND_TEST_CASE( "Testing wasm <simd_store_0_wasm>", "[simd_store_0_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_store.0.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "v128.store_i8x16")->to_v128() == make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u));
   CHECK(bkend.call_with_return("env", "v128.store_i16x8")->to_v128() == make_v128_i16(0u,1u,2u,3u,4u,5u,6u,7u));
   CHECK(bkend.call_with_return("env", "v128.store_i16x8_2")->to_v128() == make_v128_i16(12345u,12345u,12345u,12345u,12345u,12345u,12345u,12345u));
   CHECK(bkend.call_with_return("env", "v128.store_i16x8_3")->to_v128() == make_v128_i16(4660u,4660u,4660u,4660u,4660u,4660u,4660u,4660u));
   CHECK(bkend.call_with_return("env", "v128.store_i32x4")->to_v128() == make_v128_i32(0u,1u,2u,3u));
   CHECK(bkend.call_with_return("env", "v128.store_i32x4_2")->to_v128() == make_v128_i32(123456789u,123456789u,123456789u,123456789u));
   CHECK(bkend.call_with_return("env", "v128.store_i32x4_3")->to_v128() == make_v128_i32(305419896u,305419896u,305419896u,305419896u));
   CHECK(bkend.call_with_return("env", "v128.store_f32x4")->to_v128() == make_v128_f32(0u,1065353216u,1073741824u,1077936128u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_store_1_wasm>", "[simd_store_1_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_store.1.wasm");
   backend_t bkend( code, &wa );

   CHECK(!bkend.call_with_return("env", "as-block-value"));
   CHECK(!bkend.call_with_return("env", "as-loop-value"));
   CHECK(!bkend.call_with_return("env", "as-br-value"));
   CHECK(!bkend.call_with_return("env", "as-br_if-value"));
   CHECK(!bkend.call_with_return("env", "as-br_if-value-cond"));
   CHECK(!bkend.call_with_return("env", "as-br_table-value"));
   CHECK(!bkend.call_with_return("env", "as-return-value"));
   CHECK(!bkend.call_with_return("env", "as-if-then"));
   CHECK(!bkend.call_with_return("env", "as-if-else"));
}

BACKEND_TEST_CASE( "Testing wasm <simd_store_10_wasm>", "[simd_store_10_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_store.10.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_store_5_wasm>", "[simd_store_5_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_store.5.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_store_6_wasm>", "[simd_store_6_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_store.6.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_store_7_wasm>", "[simd_store_7_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_store.7.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_store_8_wasm>", "[simd_store_8_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_store.8.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_store_9_wasm>", "[simd_store_9_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_store.9.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

