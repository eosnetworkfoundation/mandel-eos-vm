// Generated by spec_test_generator.  DO NOT MODIFY THIS FILE.

#include <algorithm>
#include <vector>
#include <iostream>
#include <iterator>
#include <cmath>
#include <cstdlib>
#include <catch2/catch.hpp>
#include <utils.hpp>
#include <wasm_config.hpp>
#include <eosio/vm/backend.hpp>

using namespace eosio;
using namespace eosio::vm;
extern wasm_allocator wa;

BACKEND_TEST_CASE( "Testing wasm <simd_i8x16_arith_0_wasm>", "[simd_i8x16_arith_0_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i8x16_arith.0.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))->to_v128() == make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))->to_v128() == make_v128_i8(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63), make_v128_i8(64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64))->to_v128() == make_v128_i8(127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64), make_v128_i8(64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64))->to_v128() == make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193), make_v128_i8(192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192))->to_v128() == make_v128_i8(129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192), make_v128_i8(192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192))->to_v128() == make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191), make_v128_i8(192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192))->to_v128() == make_v128_i8(127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))->to_v128() == make_v128_i8(126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))->to_v128() == make_v128_i8(127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))->to_v128() == make_v128_i8(129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127), make_v128_i8(127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127))->to_v128() == make_v128_i8(254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128), make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128), make_v128_i8(129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129))->to_v128() == make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255), make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))->to_v128() == make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255), make_v128_i8(127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127))->to_v128() == make_v128_i8(126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255), make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63), make_v128_i8(64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64))->to_v128() == make_v128_i8(127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64), make_v128_i8(64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64))->to_v128() == make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193), make_v128_i8(192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192))->to_v128() == make_v128_i8(129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192), make_v128_i8(192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192))->to_v128() == make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192), make_v128_i8(191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191))->to_v128() == make_v128_i8(127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127), make_v128_i8(127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127))->to_v128() == make_v128_i8(254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))->to_v128() == make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127), make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128), make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))->to_v128() == make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127), make_v128_i16(32896,32896,32896,32896,32896,32896,32896,32896))->to_v128() == make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_i16(65535,65535,65535,65535,65535,65535,65535,65535))->to_v128() == make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127), make_v128_i32(2155905152,2155905152,2155905152,2155905152))->to_v128() == make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128), make_v128_f32(0,0,0,0))->to_v128() == make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128), make_v128_f32(2147483648,2147483648,2147483648,2147483648))->to_v128() == make_v128_i8(128,128,128,0,128,128,128,0,128,128,128,0,128,128,128,0));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128), make_v128_f32(1065353216,1065353216,1065353216,1065353216))->to_v128() == make_v128_i8(128,128,0,191,128,128,0,191,128,128,0,191,128,128,0,191));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128), make_v128_f32(3212836864,3212836864,3212836864,3212836864))->to_v128() == make_v128_i8(128,128,0,63,128,128,0,63,128,128,0,63,128,128,0,63));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_f32(2139095040,2139095040,2139095040,2139095040))->to_v128() == make_v128_i8(1,1,129,128,1,1,129,128,1,1,129,128,1,1,129,128));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_f32(4286578688,4286578688,4286578688,4286578688))->to_v128() == make_v128_i8(1,1,129,0,1,1,129,0,1,1,129,0,1,1,129,0));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_f32(2143289344,2143289344,2143289344,2143289344))->to_v128() == make_v128_i8(1,1,193,128,1,1,193,128,1,1,193,128,1,1,193,128));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), make_v128_i8(0,255,254,253,252,251,250,249,248,247,246,245,244,243,242,241))->to_v128() == make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));
   CHECK(bkend.call_with_return("env", "i8x16.add", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), make_v128_i8(0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30))->to_v128() == make_v128_i8(0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))->to_v128() == make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))->to_v128() == make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63), make_v128_i8(64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64))->to_v128() == make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64), make_v128_i8(64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64))->to_v128() == make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193), make_v128_i8(192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192))->to_v128() == make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192), make_v128_i8(192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192))->to_v128() == make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191), make_v128_i8(192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192))->to_v128() == make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))->to_v128() == make_v128_i8(124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))->to_v128() == make_v128_i8(125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))->to_v128() == make_v128_i8(127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127), make_v128_i8(127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127))->to_v128() == make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128), make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128), make_v128_i8(129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129))->to_v128() == make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255), make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))->to_v128() == make_v128_i8(254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255), make_v128_i8(127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127))->to_v128() == make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255), make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63), make_v128_i8(64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64))->to_v128() == make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64), make_v128_i8(64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64))->to_v128() == make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193), make_v128_i8(192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192))->to_v128() == make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192), make_v128_i8(192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192))->to_v128() == make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192), make_v128_i8(191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191))->to_v128() == make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127), make_v128_i8(127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127))->to_v128() == make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))->to_v128() == make_v128_i8(126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127), make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128), make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))->to_v128() == make_v128_i8(254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127), make_v128_i16(32896,32896,32896,32896,32896,32896,32896,32896))->to_v128() == make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_i16(65535,65535,65535,65535,65535,65535,65535,65535))->to_v128() == make_v128_i8(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127), make_v128_i32(2155905152,2155905152,2155905152,2155905152))->to_v128() == make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_i32(4294967295,4294967295,4294967295,4294967295))->to_v128() == make_v128_i8(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128), make_v128_f32(0,0,0,0))->to_v128() == make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128), make_v128_f32(2147483648,2147483648,2147483648,2147483648))->to_v128() == make_v128_i8(128,128,128,0,128,128,128,0,128,128,128,0,128,128,128,0));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128), make_v128_f32(1065353216,1065353216,1065353216,1065353216))->to_v128() == make_v128_i8(128,128,0,65,128,128,0,65,128,128,0,65,128,128,0,65));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128), make_v128_f32(3212836864,3212836864,3212836864,3212836864))->to_v128() == make_v128_i8(128,128,0,193,128,128,0,193,128,128,0,193,128,128,0,193));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_f32(2139095040,2139095040,2139095040,2139095040))->to_v128() == make_v128_i8(1,1,129,130,1,1,129,130,1,1,129,130,1,1,129,130));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_f32(4286578688,4286578688,4286578688,4286578688))->to_v128() == make_v128_i8(1,1,129,2,1,1,129,2,1,1,129,2,1,1,129,2));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_f32(2143289344,2143289344,2143289344,2143289344))->to_v128() == make_v128_i8(1,1,65,130,1,1,65,130,1,1,65,130,1,1,65,130));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), make_v128_i8(0,255,254,253,252,251,250,249,248,247,246,245,244,243,242,241))->to_v128() == make_v128_i8(0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30));
   CHECK(bkend.call_with_return("env", "i8x16.sub", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), make_v128_i8(0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30))->to_v128() == make_v128_i8(0,255,254,253,252,251,250,249,248,247,246,245,244,243,242,241));
   CHECK(bkend.call_with_return("env", "i8x16.neg", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));
   CHECK(bkend.call_with_return("env", "i8x16.neg", make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))->to_v128() == make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255));
   CHECK(bkend.call_with_return("env", "i8x16.neg", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1));
   CHECK(bkend.call_with_return("env", "i8x16.neg", make_v128_i8(126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126))->to_v128() == make_v128_i8(130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130));
   CHECK(bkend.call_with_return("env", "i8x16.neg", make_v128_i8(129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129))->to_v128() == make_v128_i8(127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127));
   CHECK(bkend.call_with_return("env", "i8x16.neg", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128));
   CHECK(bkend.call_with_return("env", "i8x16.neg", make_v128_i8(127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127))->to_v128() == make_v128_i8(129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129));
   CHECK(bkend.call_with_return("env", "i8x16.neg", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1));
   CHECK(bkend.call_with_return("env", "i8x16.neg", make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))->to_v128() == make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255));
   CHECK(bkend.call_with_return("env", "i8x16.neg", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1));
   CHECK(bkend.call_with_return("env", "i8x16.neg", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128));
   CHECK(bkend.call_with_return("env", "i8x16.neg", make_v128_i8(129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129))->to_v128() == make_v128_i8(127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127));
   CHECK(bkend.call_with_return("env", "i8x16.neg", make_v128_i8(127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127))->to_v128() == make_v128_i8(129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129));
   CHECK(bkend.call_with_return("env", "i8x16.neg", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128));
   CHECK(bkend.call_with_return("env", "i8x16.neg", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1));
}

BACKEND_TEST_CASE( "Testing wasm <simd_i8x16_arith_1_wasm>", "[simd_i8x16_arith_1_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i8x16_arith.1.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i8x16_arith_2_wasm>", "[simd_i8x16_arith_2_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i8x16_arith.2.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i8x16_arith_3_wasm>", "[simd_i8x16_arith_3_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i8x16_arith.3.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i8x16_arith_4_wasm>", "[simd_i8x16_arith_4_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i8x16_arith.4.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i8x16_arith_5_wasm>", "[simd_i8x16_arith_5_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i8x16_arith.5.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i8x16_arith_6_wasm>", "[simd_i8x16_arith_6_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i8x16_arith.6.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i8x16_arith_7_wasm>", "[simd_i8x16_arith_7_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i8x16_arith.7.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i8x16_arith_8_wasm>", "[simd_i8x16_arith_8_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i8x16_arith.8.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i8x16_arith_9_wasm>", "[simd_i8x16_arith_9_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i8x16_arith.9.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "add-sub", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), make_v128_i8(0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30), make_v128_i8(0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30))->to_v128() == make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15));
   CHECK(bkend.call_with_return("env", "sub-add", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), make_v128_i8(0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30), make_v128_i8(0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30))->to_v128() == make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15));
   CHECK(bkend.call_with_return("env", "add-neg", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15))->to_v128() == make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));
   CHECK(bkend.call_with_return("env", "sub-neg", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15))->to_v128() == make_v128_i8(0,254,252,250,248,246,244,242,240,238,236,234,232,230,228,226));
}

