// Generated by spec_test_generator.  DO NOT MODIFY THIS FILE.

#include <algorithm>
#include <vector>
#include <iostream>
#include <iterator>
#include <cmath>
#include <cstdlib>
#include <catch2/catch.hpp>
#include <utils.hpp>
#include <wasm_config.hpp>
#include <eosio/vm/backend.hpp>

using namespace eosio;
using namespace eosio::vm;
extern wasm_allocator wa;

BACKEND_TEST_CASE( "Testing wasm <simd_int_to_int_extend_0_wasm>", "[simd_int_to_int_extend_0_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_int_to_int_extend.0.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "i16x8.extend_high_i8x16_s", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_high_i8x16_s", make_v128_i8(0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1))->to_v128() == make_v128_i16(1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_high_i8x16_s", make_v128_i8(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_high_i8x16_s", make_v128_i8(1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_high_i8x16_s", make_v128_i8(255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_high_i8x16_s", make_v128_i8(1,1,1,1,1,1,1,1,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_high_i8x16_s", make_v128_i8(255,255,255,255,255,255,255,255,1,1,1,1,1,1,1,1))->to_v128() == make_v128_i16(1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_high_i8x16_s", make_v128_i8(126,126,126,126,126,126,126,126,127,127,127,127,127,127,127,127))->to_v128() == make_v128_i16(127u,127u,127u,127u,127u,127u,127u,127u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_high_i8x16_s", make_v128_i8(127,127,127,127,127,127,127,127,126,126,126,126,126,126,126,126))->to_v128() == make_v128_i16(126u,126u,126u,126u,126u,126u,126u,126u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_high_i8x16_s", make_v128_i8(127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127))->to_v128() == make_v128_i16(127u,127u,127u,127u,127u,127u,127u,127u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_high_i8x16_s", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i16(65408u,65408u,65408u,65408u,65408u,65408u,65408u,65408u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_high_i8x16_s", make_v128_i8(127,127,127,127,127,127,127,127,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i16(65408u,65408u,65408u,65408u,65408u,65408u,65408u,65408u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_high_i8x16_s", make_v128_i8(128,128,128,128,128,128,128,128,127,127,127,127,127,127,127,127))->to_v128() == make_v128_i16(127u,127u,127u,127u,127u,127u,127u,127u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_high_i8x16_s", make_v128_i8(127,127,127,127,127,127,127,127,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_high_i8x16_s", make_v128_i8(255,255,255,255,255,255,255,255,127,127,127,127,127,127,127,127))->to_v128() == make_v128_i16(127u,127u,127u,127u,127u,127u,127u,127u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_high_i8x16_s", make_v128_i8(129,129,129,129,129,129,129,129,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i16(65408u,65408u,65408u,65408u,65408u,65408u,65408u,65408u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_high_i8x16_s", make_v128_i8(128,128,128,128,128,128,128,128,129,129,129,129,129,129,129,129))->to_v128() == make_v128_i16(65409u,65409u,65409u,65409u,65409u,65409u,65409u,65409u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_high_i8x16_s", make_v128_i8(128,128,128,128,128,128,128,128,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_high_i8x16_s", make_v128_i8(255,255,255,255,255,255,255,255,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i16(65408u,65408u,65408u,65408u,65408u,65408u,65408u,65408u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_high_i8x16_u", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_high_i8x16_u", make_v128_i8(0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1))->to_v128() == make_v128_i16(1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_high_i8x16_u", make_v128_i8(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i16(255u,255u,255u,255u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_high_i8x16_u", make_v128_i8(1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_high_i8x16_u", make_v128_i8(255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_high_i8x16_u", make_v128_i8(1,1,1,1,1,1,1,1,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i16(255u,255u,255u,255u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_high_i8x16_u", make_v128_i8(255,255,255,255,255,255,255,255,1,1,1,1,1,1,1,1))->to_v128() == make_v128_i16(1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_high_i8x16_u", make_v128_i8(126,126,126,126,126,126,126,126,127,127,127,127,127,127,127,127))->to_v128() == make_v128_i16(127u,127u,127u,127u,127u,127u,127u,127u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_high_i8x16_u", make_v128_i8(127,127,127,127,127,127,127,127,126,126,126,126,126,126,126,126))->to_v128() == make_v128_i16(126u,126u,126u,126u,126u,126u,126u,126u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_high_i8x16_u", make_v128_i8(127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127))->to_v128() == make_v128_i16(127u,127u,127u,127u,127u,127u,127u,127u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_high_i8x16_u", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i16(128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_high_i8x16_u", make_v128_i8(127,127,127,127,127,127,127,127,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i16(128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_high_i8x16_u", make_v128_i8(128,128,128,128,128,128,128,128,127,127,127,127,127,127,127,127))->to_v128() == make_v128_i16(127u,127u,127u,127u,127u,127u,127u,127u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_high_i8x16_u", make_v128_i8(127,127,127,127,127,127,127,127,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i16(255u,255u,255u,255u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_high_i8x16_u", make_v128_i8(255,255,255,255,255,255,255,255,127,127,127,127,127,127,127,127))->to_v128() == make_v128_i16(127u,127u,127u,127u,127u,127u,127u,127u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_high_i8x16_u", make_v128_i8(129,129,129,129,129,129,129,129,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i16(128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_high_i8x16_u", make_v128_i8(128,128,128,128,128,128,128,128,129,129,129,129,129,129,129,129))->to_v128() == make_v128_i16(129u,129u,129u,129u,129u,129u,129u,129u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_high_i8x16_u", make_v128_i8(128,128,128,128,128,128,128,128,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i16(255u,255u,255u,255u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_high_i8x16_u", make_v128_i8(255,255,255,255,255,255,255,255,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i16(128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_low_i8x16_s", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_low_i8x16_s", make_v128_i8(0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_low_i8x16_s", make_v128_i8(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_low_i8x16_s", make_v128_i8(1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i16(1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_low_i8x16_s", make_v128_i8(255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_low_i8x16_s", make_v128_i8(1,1,1,1,1,1,1,1,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i16(1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_low_i8x16_s", make_v128_i8(255,255,255,255,255,255,255,255,1,1,1,1,1,1,1,1))->to_v128() == make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_low_i8x16_s", make_v128_i8(126,126,126,126,126,126,126,126,127,127,127,127,127,127,127,127))->to_v128() == make_v128_i16(126u,126u,126u,126u,126u,126u,126u,126u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_low_i8x16_s", make_v128_i8(127,127,127,127,127,127,127,127,126,126,126,126,126,126,126,126))->to_v128() == make_v128_i16(127u,127u,127u,127u,127u,127u,127u,127u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_low_i8x16_s", make_v128_i8(127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127))->to_v128() == make_v128_i16(127u,127u,127u,127u,127u,127u,127u,127u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_low_i8x16_s", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i16(65408u,65408u,65408u,65408u,65408u,65408u,65408u,65408u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_low_i8x16_s", make_v128_i8(127,127,127,127,127,127,127,127,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i16(127u,127u,127u,127u,127u,127u,127u,127u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_low_i8x16_s", make_v128_i8(128,128,128,128,128,128,128,128,127,127,127,127,127,127,127,127))->to_v128() == make_v128_i16(65408u,65408u,65408u,65408u,65408u,65408u,65408u,65408u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_low_i8x16_s", make_v128_i8(127,127,127,127,127,127,127,127,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i16(127u,127u,127u,127u,127u,127u,127u,127u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_low_i8x16_s", make_v128_i8(255,255,255,255,255,255,255,255,127,127,127,127,127,127,127,127))->to_v128() == make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_low_i8x16_s", make_v128_i8(129,129,129,129,129,129,129,129,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i16(65409u,65409u,65409u,65409u,65409u,65409u,65409u,65409u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_low_i8x16_s", make_v128_i8(128,128,128,128,128,128,128,128,129,129,129,129,129,129,129,129))->to_v128() == make_v128_i16(65408u,65408u,65408u,65408u,65408u,65408u,65408u,65408u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_low_i8x16_s", make_v128_i8(128,128,128,128,128,128,128,128,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i16(65408u,65408u,65408u,65408u,65408u,65408u,65408u,65408u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_low_i8x16_s", make_v128_i8(255,255,255,255,255,255,255,255,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i16(65535u,65535u,65535u,65535u,65535u,65535u,65535u,65535u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_low_i8x16_u", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_low_i8x16_u", make_v128_i8(0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_low_i8x16_u", make_v128_i8(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_low_i8x16_u", make_v128_i8(1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i16(1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_low_i8x16_u", make_v128_i8(255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i16(255u,255u,255u,255u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_low_i8x16_u", make_v128_i8(1,1,1,1,1,1,1,1,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i16(1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_low_i8x16_u", make_v128_i8(255,255,255,255,255,255,255,255,1,1,1,1,1,1,1,1))->to_v128() == make_v128_i16(255u,255u,255u,255u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_low_i8x16_u", make_v128_i8(126,126,126,126,126,126,126,126,127,127,127,127,127,127,127,127))->to_v128() == make_v128_i16(126u,126u,126u,126u,126u,126u,126u,126u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_low_i8x16_u", make_v128_i8(127,127,127,127,127,127,127,127,126,126,126,126,126,126,126,126))->to_v128() == make_v128_i16(127u,127u,127u,127u,127u,127u,127u,127u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_low_i8x16_u", make_v128_i8(127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127))->to_v128() == make_v128_i16(127u,127u,127u,127u,127u,127u,127u,127u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_low_i8x16_u", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i16(128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_low_i8x16_u", make_v128_i8(127,127,127,127,127,127,127,127,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i16(127u,127u,127u,127u,127u,127u,127u,127u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_low_i8x16_u", make_v128_i8(128,128,128,128,128,128,128,128,127,127,127,127,127,127,127,127))->to_v128() == make_v128_i16(128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_low_i8x16_u", make_v128_i8(127,127,127,127,127,127,127,127,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i16(127u,127u,127u,127u,127u,127u,127u,127u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_low_i8x16_u", make_v128_i8(255,255,255,255,255,255,255,255,127,127,127,127,127,127,127,127))->to_v128() == make_v128_i16(255u,255u,255u,255u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_low_i8x16_u", make_v128_i8(129,129,129,129,129,129,129,129,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i16(129u,129u,129u,129u,129u,129u,129u,129u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_low_i8x16_u", make_v128_i8(128,128,128,128,128,128,128,128,129,129,129,129,129,129,129,129))->to_v128() == make_v128_i16(128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_low_i8x16_u", make_v128_i8(128,128,128,128,128,128,128,128,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i16(128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i16x8.extend_low_i8x16_u", make_v128_i8(255,255,255,255,255,255,255,255,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i16(255u,255u,255u,255u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_high_i16x8_s", make_v128_i16(0,0,0,0,0,0,0,0))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_high_i16x8_s", make_v128_i16(0,0,0,0,1,1,1,1))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_high_i16x8_s", make_v128_i16(0,0,0,0,65535,65535,65535,65535))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_high_i16x8_s", make_v128_i16(1,1,1,1,0,0,0,0))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_high_i16x8_s", make_v128_i16(65535,65535,65535,65535,0,0,0,0))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_high_i16x8_s", make_v128_i16(1,1,1,1,65535,65535,65535,65535))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_high_i16x8_s", make_v128_i16(65535,65535,65535,65535,1,1,1,1))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_high_i16x8_s", make_v128_i16(32766,32766,32766,32766,32767,32767,32767,32767))->to_v128() == make_v128_i32(32767u,32767u,32767u,32767u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_high_i16x8_s", make_v128_i16(32767,32767,32767,32767,32766,32766,32766,32766))->to_v128() == make_v128_i32(32766u,32766u,32766u,32766u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_high_i16x8_s", make_v128_i16(32767,32767,32767,32767,32767,32767,32767,32767))->to_v128() == make_v128_i32(32767u,32767u,32767u,32767u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_high_i16x8_s", make_v128_i16(32768,32768,32768,32768,32768,32768,32768,32768))->to_v128() == make_v128_i32(4294934528u,4294934528u,4294934528u,4294934528u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_high_i16x8_s", make_v128_i16(32767,32767,32767,32767,32768,32768,32768,32768))->to_v128() == make_v128_i32(4294934528u,4294934528u,4294934528u,4294934528u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_high_i16x8_s", make_v128_i16(32768,32768,32768,32768,32767,32767,32767,32767))->to_v128() == make_v128_i32(32767u,32767u,32767u,32767u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_high_i16x8_s", make_v128_i16(32767,32767,32767,32767,65535,65535,65535,65535))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_high_i16x8_s", make_v128_i16(65535,65535,65535,65535,32767,32767,32767,32767))->to_v128() == make_v128_i32(32767u,32767u,32767u,32767u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_high_i16x8_s", make_v128_i16(32769,32769,32769,32769,32768,32768,32768,32768))->to_v128() == make_v128_i32(4294934528u,4294934528u,4294934528u,4294934528u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_high_i16x8_s", make_v128_i16(32768,32768,32768,32768,32769,32769,32769,32769))->to_v128() == make_v128_i32(4294934529u,4294934529u,4294934529u,4294934529u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_high_i16x8_s", make_v128_i16(32768,32768,32768,32768,65535,65535,65535,65535))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_high_i16x8_s", make_v128_i16(65535,65535,65535,65535,32768,32768,32768,32768))->to_v128() == make_v128_i32(4294934528u,4294934528u,4294934528u,4294934528u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_high_i16x8_u", make_v128_i16(0,0,0,0,0,0,0,0))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_high_i16x8_u", make_v128_i16(0,0,0,0,1,1,1,1))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_high_i16x8_u", make_v128_i16(0,0,0,0,65535,65535,65535,65535))->to_v128() == make_v128_i32(65535u,65535u,65535u,65535u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_high_i16x8_u", make_v128_i16(1,1,1,1,0,0,0,0))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_high_i16x8_u", make_v128_i16(65535,65535,65535,65535,0,0,0,0))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_high_i16x8_u", make_v128_i16(1,1,1,1,65535,65535,65535,65535))->to_v128() == make_v128_i32(65535u,65535u,65535u,65535u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_high_i16x8_u", make_v128_i16(65535,65535,65535,65535,1,1,1,1))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_high_i16x8_u", make_v128_i16(32766,32766,32766,32766,32767,32767,32767,32767))->to_v128() == make_v128_i32(32767u,32767u,32767u,32767u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_high_i16x8_u", make_v128_i16(32767,32767,32767,32767,32766,32766,32766,32766))->to_v128() == make_v128_i32(32766u,32766u,32766u,32766u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_high_i16x8_u", make_v128_i16(32767,32767,32767,32767,32767,32767,32767,32767))->to_v128() == make_v128_i32(32767u,32767u,32767u,32767u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_high_i16x8_u", make_v128_i16(32768,32768,32768,32768,32768,32768,32768,32768))->to_v128() == make_v128_i32(32768u,32768u,32768u,32768u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_high_i16x8_u", make_v128_i16(32767,32767,32767,32767,32768,32768,32768,32768))->to_v128() == make_v128_i32(32768u,32768u,32768u,32768u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_high_i16x8_u", make_v128_i16(32768,32768,32768,32768,32767,32767,32767,32767))->to_v128() == make_v128_i32(32767u,32767u,32767u,32767u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_high_i16x8_u", make_v128_i16(32767,32767,32767,32767,65535,65535,65535,65535))->to_v128() == make_v128_i32(65535u,65535u,65535u,65535u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_high_i16x8_u", make_v128_i16(65535,65535,65535,65535,32767,32767,32767,32767))->to_v128() == make_v128_i32(32767u,32767u,32767u,32767u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_high_i16x8_u", make_v128_i16(32769,32769,32769,32769,32768,32768,32768,32768))->to_v128() == make_v128_i32(32768u,32768u,32768u,32768u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_high_i16x8_u", make_v128_i16(32768,32768,32768,32768,32769,32769,32769,32769))->to_v128() == make_v128_i32(32769u,32769u,32769u,32769u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_high_i16x8_u", make_v128_i16(32768,32768,32768,32768,65535,65535,65535,65535))->to_v128() == make_v128_i32(65535u,65535u,65535u,65535u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_high_i16x8_u", make_v128_i16(65535,65535,65535,65535,32768,32768,32768,32768))->to_v128() == make_v128_i32(32768u,32768u,32768u,32768u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_low_i16x8_s", make_v128_i16(0,0,0,0,0,0,0,0))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_low_i16x8_s", make_v128_i16(0,0,0,0,1,1,1,1))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_low_i16x8_s", make_v128_i16(0,0,0,0,65535,65535,65535,65535))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_low_i16x8_s", make_v128_i16(1,1,1,1,0,0,0,0))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_low_i16x8_s", make_v128_i16(65535,65535,65535,65535,0,0,0,0))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_low_i16x8_s", make_v128_i16(1,1,1,1,65535,65535,65535,65535))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_low_i16x8_s", make_v128_i16(65535,65535,65535,65535,1,1,1,1))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_low_i16x8_s", make_v128_i16(32766,32766,32766,32766,32767,32767,32767,32767))->to_v128() == make_v128_i32(32766u,32766u,32766u,32766u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_low_i16x8_s", make_v128_i16(32767,32767,32767,32767,32766,32766,32766,32766))->to_v128() == make_v128_i32(32767u,32767u,32767u,32767u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_low_i16x8_s", make_v128_i16(32767,32767,32767,32767,32767,32767,32767,32767))->to_v128() == make_v128_i32(32767u,32767u,32767u,32767u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_low_i16x8_s", make_v128_i16(32768,32768,32768,32768,32768,32768,32768,32768))->to_v128() == make_v128_i32(4294934528u,4294934528u,4294934528u,4294934528u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_low_i16x8_s", make_v128_i16(32767,32767,32767,32767,32768,32768,32768,32768))->to_v128() == make_v128_i32(32767u,32767u,32767u,32767u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_low_i16x8_s", make_v128_i16(32768,32768,32768,32768,32767,32767,32767,32767))->to_v128() == make_v128_i32(4294934528u,4294934528u,4294934528u,4294934528u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_low_i16x8_s", make_v128_i16(32767,32767,32767,32767,65535,65535,65535,65535))->to_v128() == make_v128_i32(32767u,32767u,32767u,32767u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_low_i16x8_s", make_v128_i16(65535,65535,65535,65535,32767,32767,32767,32767))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_low_i16x8_s", make_v128_i16(32769,32769,32769,32769,32768,32768,32768,32768))->to_v128() == make_v128_i32(4294934529u,4294934529u,4294934529u,4294934529u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_low_i16x8_s", make_v128_i16(32768,32768,32768,32768,32769,32769,32769,32769))->to_v128() == make_v128_i32(4294934528u,4294934528u,4294934528u,4294934528u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_low_i16x8_s", make_v128_i16(32768,32768,32768,32768,65535,65535,65535,65535))->to_v128() == make_v128_i32(4294934528u,4294934528u,4294934528u,4294934528u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_low_i16x8_s", make_v128_i16(65535,65535,65535,65535,32768,32768,32768,32768))->to_v128() == make_v128_i32(4294967295u,4294967295u,4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_low_i16x8_u", make_v128_i16(0,0,0,0,0,0,0,0))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_low_i16x8_u", make_v128_i16(0,0,0,0,1,1,1,1))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_low_i16x8_u", make_v128_i16(0,0,0,0,65535,65535,65535,65535))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_low_i16x8_u", make_v128_i16(1,1,1,1,0,0,0,0))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_low_i16x8_u", make_v128_i16(65535,65535,65535,65535,0,0,0,0))->to_v128() == make_v128_i32(65535u,65535u,65535u,65535u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_low_i16x8_u", make_v128_i16(1,1,1,1,65535,65535,65535,65535))->to_v128() == make_v128_i32(1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_low_i16x8_u", make_v128_i16(65535,65535,65535,65535,1,1,1,1))->to_v128() == make_v128_i32(65535u,65535u,65535u,65535u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_low_i16x8_u", make_v128_i16(32766,32766,32766,32766,32767,32767,32767,32767))->to_v128() == make_v128_i32(32766u,32766u,32766u,32766u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_low_i16x8_u", make_v128_i16(32767,32767,32767,32767,32766,32766,32766,32766))->to_v128() == make_v128_i32(32767u,32767u,32767u,32767u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_low_i16x8_u", make_v128_i16(32767,32767,32767,32767,32767,32767,32767,32767))->to_v128() == make_v128_i32(32767u,32767u,32767u,32767u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_low_i16x8_u", make_v128_i16(32768,32768,32768,32768,32768,32768,32768,32768))->to_v128() == make_v128_i32(32768u,32768u,32768u,32768u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_low_i16x8_u", make_v128_i16(32767,32767,32767,32767,32768,32768,32768,32768))->to_v128() == make_v128_i32(32767u,32767u,32767u,32767u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_low_i16x8_u", make_v128_i16(32768,32768,32768,32768,32767,32767,32767,32767))->to_v128() == make_v128_i32(32768u,32768u,32768u,32768u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_low_i16x8_u", make_v128_i16(32767,32767,32767,32767,65535,65535,65535,65535))->to_v128() == make_v128_i32(32767u,32767u,32767u,32767u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_low_i16x8_u", make_v128_i16(65535,65535,65535,65535,32767,32767,32767,32767))->to_v128() == make_v128_i32(65535u,65535u,65535u,65535u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_low_i16x8_u", make_v128_i16(32769,32769,32769,32769,32768,32768,32768,32768))->to_v128() == make_v128_i32(32769u,32769u,32769u,32769u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_low_i16x8_u", make_v128_i16(32768,32768,32768,32768,32769,32769,32769,32769))->to_v128() == make_v128_i32(32768u,32768u,32768u,32768u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_low_i16x8_u", make_v128_i16(32768,32768,32768,32768,65535,65535,65535,65535))->to_v128() == make_v128_i32(32768u,32768u,32768u,32768u));
   CHECK(bkend.call_with_return("env", "i32x4.extend_low_i16x8_u", make_v128_i16(65535,65535,65535,65535,32768,32768,32768,32768))->to_v128() == make_v128_i32(65535u,65535u,65535u,65535u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_high_i32x4_s", make_v128_i32(0,0,0,0))->to_v128() == make_v128_i64(0u,0u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_high_i32x4_s", make_v128_i32(0,0,1,1))->to_v128() == make_v128_i64(1u,1u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_high_i32x4_s", make_v128_i32(0,0,4294967295,4294967295))->to_v128() == make_v128_i64(18446744073709551615u,18446744073709551615u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_high_i32x4_s", make_v128_i32(1,1,0,0))->to_v128() == make_v128_i64(0u,0u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_high_i32x4_s", make_v128_i32(4294967295,4294967295,0,0))->to_v128() == make_v128_i64(0u,0u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_high_i32x4_s", make_v128_i32(1,1,4294967295,4294967295))->to_v128() == make_v128_i64(18446744073709551615u,18446744073709551615u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_high_i32x4_s", make_v128_i32(4294967295,4294967295,1,1))->to_v128() == make_v128_i64(1u,1u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_high_i32x4_s", make_v128_i32(2147483646,2147483646,2147483647,2147483647))->to_v128() == make_v128_i64(2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_high_i32x4_s", make_v128_i32(2147483647,2147483647,2147483646,2147483646))->to_v128() == make_v128_i64(2147483646u,2147483646u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_high_i32x4_s", make_v128_i32(2147483647,2147483647,2147483647,2147483647))->to_v128() == make_v128_i64(2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_high_i32x4_s", make_v128_i32(2147483648,2147483648,2147483648,2147483648))->to_v128() == make_v128_i64(18446744071562067968u,18446744071562067968u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_high_i32x4_s", make_v128_i32(2147483647,2147483647,2147483648,2147483648))->to_v128() == make_v128_i64(18446744071562067968u,18446744071562067968u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_high_i32x4_s", make_v128_i32(2147483648,2147483648,2147483647,2147483647))->to_v128() == make_v128_i64(2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_high_i32x4_s", make_v128_i32(2147483647,2147483647,4294967295,4294967295))->to_v128() == make_v128_i64(18446744073709551615u,18446744073709551615u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_high_i32x4_s", make_v128_i32(4294967295,4294967295,2147483647,2147483647))->to_v128() == make_v128_i64(2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_high_i32x4_s", make_v128_i32(2147483649,2147483649,2147483648,2147483648))->to_v128() == make_v128_i64(18446744071562067968u,18446744071562067968u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_high_i32x4_s", make_v128_i32(2147483648,2147483648,2147483649,2147483649))->to_v128() == make_v128_i64(18446744071562067969u,18446744071562067969u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_high_i32x4_s", make_v128_i32(2147483648,2147483648,4294967295,4294967295))->to_v128() == make_v128_i64(18446744073709551615u,18446744073709551615u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_high_i32x4_s", make_v128_i32(4294967295,4294967295,2147483648,2147483648))->to_v128() == make_v128_i64(18446744071562067968u,18446744071562067968u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_high_i32x4_u", make_v128_i32(0,0,0,0))->to_v128() == make_v128_i64(0u,0u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_high_i32x4_u", make_v128_i32(0,0,1,1))->to_v128() == make_v128_i64(1u,1u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_high_i32x4_u", make_v128_i32(0,0,4294967295,4294967295))->to_v128() == make_v128_i64(4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_high_i32x4_u", make_v128_i32(1,1,0,0))->to_v128() == make_v128_i64(0u,0u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_high_i32x4_u", make_v128_i32(4294967295,4294967295,0,0))->to_v128() == make_v128_i64(0u,0u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_high_i32x4_u", make_v128_i32(1,1,4294967295,4294967295))->to_v128() == make_v128_i64(4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_high_i32x4_u", make_v128_i32(4294967295,4294967295,1,1))->to_v128() == make_v128_i64(1u,1u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_high_i32x4_u", make_v128_i32(2147483646,2147483646,2147483647,2147483647))->to_v128() == make_v128_i64(2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_high_i32x4_u", make_v128_i32(2147483647,2147483647,2147483646,2147483646))->to_v128() == make_v128_i64(2147483646u,2147483646u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_high_i32x4_u", make_v128_i32(2147483647,2147483647,2147483647,2147483647))->to_v128() == make_v128_i64(2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_high_i32x4_u", make_v128_i32(2147483648,2147483648,2147483648,2147483648))->to_v128() == make_v128_i64(2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_high_i32x4_u", make_v128_i32(2147483647,2147483647,2147483648,2147483648))->to_v128() == make_v128_i64(2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_high_i32x4_u", make_v128_i32(2147483648,2147483648,2147483647,2147483647))->to_v128() == make_v128_i64(2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_high_i32x4_u", make_v128_i32(2147483647,2147483647,4294967295,4294967295))->to_v128() == make_v128_i64(4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_high_i32x4_u", make_v128_i32(4294967295,4294967295,2147483647,2147483647))->to_v128() == make_v128_i64(2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_high_i32x4_u", make_v128_i32(2147483649,2147483649,2147483648,2147483648))->to_v128() == make_v128_i64(2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_high_i32x4_u", make_v128_i32(2147483648,2147483648,2147483649,2147483649))->to_v128() == make_v128_i64(2147483649u,2147483649u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_high_i32x4_u", make_v128_i32(2147483648,2147483648,4294967295,4294967295))->to_v128() == make_v128_i64(4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_high_i32x4_u", make_v128_i32(4294967295,4294967295,2147483648,2147483648))->to_v128() == make_v128_i64(2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_low_i32x4_s", make_v128_i32(0,0,0,0))->to_v128() == make_v128_i64(0u,0u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_low_i32x4_s", make_v128_i32(0,0,1,1))->to_v128() == make_v128_i64(0u,0u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_low_i32x4_s", make_v128_i32(0,0,4294967295,4294967295))->to_v128() == make_v128_i64(0u,0u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_low_i32x4_s", make_v128_i32(1,1,0,0))->to_v128() == make_v128_i64(1u,1u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_low_i32x4_s", make_v128_i32(4294967295,4294967295,0,0))->to_v128() == make_v128_i64(18446744073709551615u,18446744073709551615u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_low_i32x4_s", make_v128_i32(1,1,4294967295,4294967295))->to_v128() == make_v128_i64(1u,1u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_low_i32x4_s", make_v128_i32(4294967295,4294967295,1,1))->to_v128() == make_v128_i64(18446744073709551615u,18446744073709551615u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_low_i32x4_s", make_v128_i32(2147483646,2147483646,2147483647,2147483647))->to_v128() == make_v128_i64(2147483646u,2147483646u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_low_i32x4_s", make_v128_i32(2147483647,2147483647,2147483646,2147483646))->to_v128() == make_v128_i64(2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_low_i32x4_s", make_v128_i32(2147483647,2147483647,2147483647,2147483647))->to_v128() == make_v128_i64(2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_low_i32x4_s", make_v128_i32(2147483648,2147483648,2147483648,2147483648))->to_v128() == make_v128_i64(18446744071562067968u,18446744071562067968u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_low_i32x4_s", make_v128_i32(2147483647,2147483647,2147483648,2147483648))->to_v128() == make_v128_i64(2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_low_i32x4_s", make_v128_i32(2147483648,2147483648,2147483647,2147483647))->to_v128() == make_v128_i64(18446744071562067968u,18446744071562067968u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_low_i32x4_s", make_v128_i32(2147483647,2147483647,4294967295,4294967295))->to_v128() == make_v128_i64(2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_low_i32x4_s", make_v128_i32(4294967295,4294967295,2147483647,2147483647))->to_v128() == make_v128_i64(18446744073709551615u,18446744073709551615u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_low_i32x4_s", make_v128_i32(2147483649,2147483649,2147483648,2147483648))->to_v128() == make_v128_i64(18446744071562067969u,18446744071562067969u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_low_i32x4_s", make_v128_i32(2147483648,2147483648,2147483649,2147483649))->to_v128() == make_v128_i64(18446744071562067968u,18446744071562067968u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_low_i32x4_s", make_v128_i32(2147483648,2147483648,4294967295,4294967295))->to_v128() == make_v128_i64(18446744071562067968u,18446744071562067968u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_low_i32x4_s", make_v128_i32(4294967295,4294967295,2147483648,2147483648))->to_v128() == make_v128_i64(18446744073709551615u,18446744073709551615u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_low_i32x4_u", make_v128_i32(0,0,0,0))->to_v128() == make_v128_i64(0u,0u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_low_i32x4_u", make_v128_i32(0,0,1,1))->to_v128() == make_v128_i64(0u,0u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_low_i32x4_u", make_v128_i32(0,0,4294967295,4294967295))->to_v128() == make_v128_i64(0u,0u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_low_i32x4_u", make_v128_i32(1,1,0,0))->to_v128() == make_v128_i64(1u,1u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_low_i32x4_u", make_v128_i32(4294967295,4294967295,0,0))->to_v128() == make_v128_i64(4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_low_i32x4_u", make_v128_i32(1,1,4294967295,4294967295))->to_v128() == make_v128_i64(1u,1u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_low_i32x4_u", make_v128_i32(4294967295,4294967295,1,1))->to_v128() == make_v128_i64(4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_low_i32x4_u", make_v128_i32(2147483646,2147483646,2147483647,2147483647))->to_v128() == make_v128_i64(2147483646u,2147483646u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_low_i32x4_u", make_v128_i32(2147483647,2147483647,2147483646,2147483646))->to_v128() == make_v128_i64(2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_low_i32x4_u", make_v128_i32(2147483647,2147483647,2147483647,2147483647))->to_v128() == make_v128_i64(2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_low_i32x4_u", make_v128_i32(2147483648,2147483648,2147483648,2147483648))->to_v128() == make_v128_i64(2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_low_i32x4_u", make_v128_i32(2147483647,2147483647,2147483648,2147483648))->to_v128() == make_v128_i64(2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_low_i32x4_u", make_v128_i32(2147483648,2147483648,2147483647,2147483647))->to_v128() == make_v128_i64(2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_low_i32x4_u", make_v128_i32(2147483647,2147483647,4294967295,4294967295))->to_v128() == make_v128_i64(2147483647u,2147483647u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_low_i32x4_u", make_v128_i32(4294967295,4294967295,2147483647,2147483647))->to_v128() == make_v128_i64(4294967295u,4294967295u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_low_i32x4_u", make_v128_i32(2147483649,2147483649,2147483648,2147483648))->to_v128() == make_v128_i64(2147483649u,2147483649u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_low_i32x4_u", make_v128_i32(2147483648,2147483648,2147483649,2147483649))->to_v128() == make_v128_i64(2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_low_i32x4_u", make_v128_i32(2147483648,2147483648,4294967295,4294967295))->to_v128() == make_v128_i64(2147483648u,2147483648u));
   CHECK(bkend.call_with_return("env", "i64x2.extend_low_i32x4_u", make_v128_i32(4294967295,4294967295,2147483648,2147483648))->to_v128() == make_v128_i64(4294967295u,4294967295u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_int_to_int_extend_1_wasm>", "[simd_int_to_int_extend_1_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_int_to_int_extend.1.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_int_to_int_extend_10_wasm>", "[simd_int_to_int_extend_10_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_int_to_int_extend.10.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_int_to_int_extend_11_wasm>", "[simd_int_to_int_extend_11_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_int_to_int_extend.11.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_int_to_int_extend_12_wasm>", "[simd_int_to_int_extend_12_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_int_to_int_extend.12.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_int_to_int_extend_13_wasm>", "[simd_int_to_int_extend_13_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_int_to_int_extend.13.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_int_to_int_extend_14_wasm>", "[simd_int_to_int_extend_14_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_int_to_int_extend.14.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_int_to_int_extend_15_wasm>", "[simd_int_to_int_extend_15_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_int_to_int_extend.15.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_int_to_int_extend_16_wasm>", "[simd_int_to_int_extend_16_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_int_to_int_extend.16.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_int_to_int_extend_17_wasm>", "[simd_int_to_int_extend_17_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_int_to_int_extend.17.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_int_to_int_extend_18_wasm>", "[simd_int_to_int_extend_18_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_int_to_int_extend.18.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_int_to_int_extend_19_wasm>", "[simd_int_to_int_extend_19_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_int_to_int_extend.19.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_int_to_int_extend_2_wasm>", "[simd_int_to_int_extend_2_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_int_to_int_extend.2.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_int_to_int_extend_20_wasm>", "[simd_int_to_int_extend_20_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_int_to_int_extend.20.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_int_to_int_extend_21_wasm>", "[simd_int_to_int_extend_21_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_int_to_int_extend.21.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_int_to_int_extend_22_wasm>", "[simd_int_to_int_extend_22_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_int_to_int_extend.22.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_int_to_int_extend_23_wasm>", "[simd_int_to_int_extend_23_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_int_to_int_extend.23.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_int_to_int_extend_24_wasm>", "[simd_int_to_int_extend_24_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_int_to_int_extend.24.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_int_to_int_extend_3_wasm>", "[simd_int_to_int_extend_3_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_int_to_int_extend.3.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_int_to_int_extend_4_wasm>", "[simd_int_to_int_extend_4_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_int_to_int_extend.4.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_int_to_int_extend_5_wasm>", "[simd_int_to_int_extend_5_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_int_to_int_extend.5.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_int_to_int_extend_6_wasm>", "[simd_int_to_int_extend_6_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_int_to_int_extend.6.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_int_to_int_extend_7_wasm>", "[simd_int_to_int_extend_7_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_int_to_int_extend.7.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_int_to_int_extend_8_wasm>", "[simd_int_to_int_extend_8_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_int_to_int_extend.8.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_int_to_int_extend_9_wasm>", "[simd_int_to_int_extend_9_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_int_to_int_extend.9.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

