// Generated by spec_test_generator.  DO NOT MODIFY THIS FILE.

#include <algorithm>
#include <vector>
#include <iostream>
#include <iterator>
#include <cmath>
#include <cstdlib>
#include <catch2/catch.hpp>
#include <utils.hpp>
#include <wasm_config.hpp>
#include <eosio/vm/backend.hpp>

using namespace eosio;
using namespace eosio::vm;
extern wasm_allocator wa;

BACKEND_TEST_CASE( "Testing wasm <simd_bit_shift_0_wasm>", "[simd_bit_shift_0_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_bit_shift.0.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "i8x16.shl", make_v128_i8(128,192,0,1,2,3,4,5,6,7,8,9,10,11,12,13), UINT32_C(1))->to_v128() == make_v128_i8(0u,128u,0u,2u,4u,6u,8u,10u,12u,14u,16u,18u,20u,22u,24u,26u));
   CHECK(bkend.call_with_return("env", "i8x16.shl", make_v128_i8(170,187,204,221,238,255,160,176,192,208,224,240,10,11,12,13), UINT32_C(4))->to_v128() == make_v128_i8(160u,176u,192u,208u,224u,240u,0u,0u,0u,0u,0u,0u,160u,176u,192u,208u));
   CHECK(bkend.call_with_return("env", "i8x16.shl", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), UINT32_C(8))->to_v128() == make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u));
   CHECK(bkend.call_with_return("env", "i8x16.shl", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), UINT32_C(32))->to_v128() == make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u));
   CHECK(bkend.call_with_return("env", "i8x16.shl", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), UINT32_C(128))->to_v128() == make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u));
   CHECK(bkend.call_with_return("env", "i8x16.shl", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), UINT32_C(256))->to_v128() == make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u));
   CHECK(bkend.call_with_return("env", "i8x16.shl", make_v128_i8(128,192,0,1,2,3,4,5,6,7,8,9,10,11,12,13), UINT32_C(9))->to_v128() == make_v128_i8(0u,128u,0u,2u,4u,6u,8u,10u,12u,14u,16u,18u,20u,22u,24u,26u));
   CHECK(bkend.call_with_return("env", "i8x16.shl", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), UINT32_C(9))->to_v128() == make_v128_i8(0u,2u,4u,6u,8u,10u,12u,14u,16u,18u,20u,22u,24u,26u,28u,30u));
   CHECK(bkend.call_with_return("env", "i8x16.shl", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), UINT32_C(17))->to_v128() == make_v128_i8(0u,2u,4u,6u,8u,10u,12u,14u,16u,18u,20u,22u,24u,26u,28u,30u));
   CHECK(bkend.call_with_return("env", "i8x16.shl", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), UINT32_C(33))->to_v128() == make_v128_i8(0u,2u,4u,6u,8u,10u,12u,14u,16u,18u,20u,22u,24u,26u,28u,30u));
   CHECK(bkend.call_with_return("env", "i8x16.shl", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), UINT32_C(129))->to_v128() == make_v128_i8(0u,2u,4u,6u,8u,10u,12u,14u,16u,18u,20u,22u,24u,26u,28u,30u));
   CHECK(bkend.call_with_return("env", "i8x16.shl", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), UINT32_C(257))->to_v128() == make_v128_i8(0u,2u,4u,6u,8u,10u,12u,14u,16u,18u,20u,22u,24u,26u,28u,30u));
   CHECK(bkend.call_with_return("env", "i8x16.shl", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), UINT32_C(513))->to_v128() == make_v128_i8(0u,2u,4u,6u,8u,10u,12u,14u,16u,18u,20u,22u,24u,26u,28u,30u));
   CHECK(bkend.call_with_return("env", "i8x16.shl", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), UINT32_C(514))->to_v128() == make_v128_i8(0u,4u,8u,12u,16u,20u,24u,28u,32u,36u,40u,44u,48u,52u,56u,60u));
   CHECK(bkend.call_with_return("env", "i8x16.shr_u", make_v128_i8(128,192,0,1,2,3,4,5,6,7,8,9,10,11,12,13), UINT32_C(1))->to_v128() == make_v128_i8(64u,96u,0u,0u,1u,1u,2u,2u,3u,3u,4u,4u,5u,5u,6u,6u));
   CHECK(bkend.call_with_return("env", "i8x16.shr_u", make_v128_i8(170,187,204,221,238,255,160,176,192,208,224,240,10,11,12,13), UINT32_C(4))->to_v128() == make_v128_i8(10u,11u,12u,13u,14u,15u,10u,11u,12u,13u,14u,15u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.shr_u", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), UINT32_C(8))->to_v128() == make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u));
   CHECK(bkend.call_with_return("env", "i8x16.shr_u", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), UINT32_C(32))->to_v128() == make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u));
   CHECK(bkend.call_with_return("env", "i8x16.shr_u", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), UINT32_C(128))->to_v128() == make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u));
   CHECK(bkend.call_with_return("env", "i8x16.shr_u", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), UINT32_C(256))->to_v128() == make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u));
   CHECK(bkend.call_with_return("env", "i8x16.shr_u", make_v128_i8(128,192,0,1,2,3,4,5,6,7,8,9,10,11,12,13), UINT32_C(9))->to_v128() == make_v128_i8(64u,96u,0u,0u,1u,1u,2u,2u,3u,3u,4u,4u,5u,5u,6u,6u));
   CHECK(bkend.call_with_return("env", "i8x16.shr_u", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), UINT32_C(9))->to_v128() == make_v128_i8(0u,0u,1u,1u,2u,2u,3u,3u,4u,4u,5u,5u,6u,6u,7u,7u));
   CHECK(bkend.call_with_return("env", "i8x16.shr_u", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), UINT32_C(17))->to_v128() == make_v128_i8(0u,0u,1u,1u,2u,2u,3u,3u,4u,4u,5u,5u,6u,6u,7u,7u));
   CHECK(bkend.call_with_return("env", "i8x16.shr_u", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), UINT32_C(33))->to_v128() == make_v128_i8(0u,0u,1u,1u,2u,2u,3u,3u,4u,4u,5u,5u,6u,6u,7u,7u));
   CHECK(bkend.call_with_return("env", "i8x16.shr_u", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), UINT32_C(129))->to_v128() == make_v128_i8(0u,0u,1u,1u,2u,2u,3u,3u,4u,4u,5u,5u,6u,6u,7u,7u));
   CHECK(bkend.call_with_return("env", "i8x16.shr_u", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), UINT32_C(257))->to_v128() == make_v128_i8(0u,0u,1u,1u,2u,2u,3u,3u,4u,4u,5u,5u,6u,6u,7u,7u));
   CHECK(bkend.call_with_return("env", "i8x16.shr_u", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), UINT32_C(513))->to_v128() == make_v128_i8(0u,0u,1u,1u,2u,2u,3u,3u,4u,4u,5u,5u,6u,6u,7u,7u));
   CHECK(bkend.call_with_return("env", "i8x16.shr_u", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), UINT32_C(514))->to_v128() == make_v128_i8(0u,0u,0u,0u,1u,1u,1u,1u,2u,2u,2u,2u,3u,3u,3u,3u));
   CHECK(bkend.call_with_return("env", "i8x16.shr_s", make_v128_i8(128,192,0,1,2,3,4,5,6,7,8,9,10,11,12,13), UINT32_C(1))->to_v128() == make_v128_i8(192u,224u,0u,0u,1u,1u,2u,2u,3u,3u,4u,4u,5u,5u,6u,6u));
   CHECK(bkend.call_with_return("env", "i8x16.shr_s", make_v128_i8(170,187,204,221,238,255,160,176,192,208,224,240,10,11,12,13), UINT32_C(4))->to_v128() == make_v128_i8(250u,251u,252u,253u,254u,255u,250u,251u,252u,253u,254u,255u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.shr_s", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), UINT32_C(8))->to_v128() == make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u));
   CHECK(bkend.call_with_return("env", "i8x16.shr_s", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), UINT32_C(32))->to_v128() == make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u));
   CHECK(bkend.call_with_return("env", "i8x16.shr_s", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), UINT32_C(128))->to_v128() == make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u));
   CHECK(bkend.call_with_return("env", "i8x16.shr_s", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), UINT32_C(256))->to_v128() == make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u));
   CHECK(bkend.call_with_return("env", "i8x16.shr_s", make_v128_i8(128,192,0,1,2,3,4,5,6,7,8,9,10,11,12,13), UINT32_C(9))->to_v128() == make_v128_i8(192u,224u,0u,0u,1u,1u,2u,2u,3u,3u,4u,4u,5u,5u,6u,6u));
   CHECK(bkend.call_with_return("env", "i8x16.shr_s", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), UINT32_C(9))->to_v128() == make_v128_i8(0u,0u,1u,1u,2u,2u,3u,3u,4u,4u,5u,5u,6u,6u,7u,7u));
   CHECK(bkend.call_with_return("env", "i8x16.shr_s", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), UINT32_C(17))->to_v128() == make_v128_i8(0u,0u,1u,1u,2u,2u,3u,3u,4u,4u,5u,5u,6u,6u,7u,7u));
   CHECK(bkend.call_with_return("env", "i8x16.shr_s", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), UINT32_C(33))->to_v128() == make_v128_i8(0u,0u,1u,1u,2u,2u,3u,3u,4u,4u,5u,5u,6u,6u,7u,7u));
   CHECK(bkend.call_with_return("env", "i8x16.shr_s", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), UINT32_C(129))->to_v128() == make_v128_i8(0u,0u,1u,1u,2u,2u,3u,3u,4u,4u,5u,5u,6u,6u,7u,7u));
   CHECK(bkend.call_with_return("env", "i8x16.shr_s", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), UINT32_C(257))->to_v128() == make_v128_i8(0u,0u,1u,1u,2u,2u,3u,3u,4u,4u,5u,5u,6u,6u,7u,7u));
   CHECK(bkend.call_with_return("env", "i8x16.shr_s", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), UINT32_C(513))->to_v128() == make_v128_i8(0u,0u,1u,1u,2u,2u,3u,3u,4u,4u,5u,5u,6u,6u,7u,7u));
   CHECK(bkend.call_with_return("env", "i8x16.shr_s", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), UINT32_C(514))->to_v128() == make_v128_i8(0u,0u,0u,0u,1u,1u,1u,1u,2u,2u,2u,2u,3u,3u,3u,3u));
   CHECK(bkend.call_with_return("env", "i8x16.shl_1", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15))->to_v128() == make_v128_i8(0u,2u,4u,6u,8u,10u,12u,14u,16u,18u,20u,22u,24u,26u,28u,30u));
   CHECK(bkend.call_with_return("env", "i8x16.shr_u_8", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15))->to_v128() == make_v128_i8(0u,1u,2u,3u,4u,5u,6u,7u,8u,9u,10u,11u,12u,13u,14u,15u));
   CHECK(bkend.call_with_return("env", "i8x16.shr_s_9", make_v128_i8(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15))->to_v128() == make_v128_i8(0u,0u,1u,1u,2u,2u,3u,3u,4u,4u,5u,5u,6u,6u,7u,7u));
   CHECK(bkend.call_with_return("env", "i16x8.shl", make_v128_i16(65408,65472,0,1,2,3,4,5), UINT32_C(1))->to_v128() == make_v128_i16(65280u,65408u,0u,2u,4u,6u,8u,10u));
   CHECK(bkend.call_with_return("env", "i16x8.shl", make_v128_i16(12345,12345,12345,12345,12345,12345,12345,12345), UINT32_C(2))->to_v128() == make_v128_i16(49380u,49380u,49380u,49380u,49380u,49380u,49380u,49380u));
   CHECK(bkend.call_with_return("env", "i16x8.shl", make_v128_i16(4660,4660,4660,4660,4660,4660,4660,4660), UINT32_C(2))->to_v128() == make_v128_i16(18640u,18640u,18640u,18640u,18640u,18640u,18640u,18640u));
   CHECK(bkend.call_with_return("env", "i16x8.shl", make_v128_i16(43707,52445,61183,41136,49360,57584,2571,3085), UINT32_C(4))->to_v128() == make_v128_i16(43952u,52688u,61424u,2816u,3328u,3840u,41136u,49360u));
   CHECK(bkend.call_with_return("env", "i16x8.shl", make_v128_i16(0,1,2,3,4,5,6,7), UINT32_C(8))->to_v128() == make_v128_i16(0u,256u,512u,768u,1024u,1280u,1536u,1792u));
   CHECK(bkend.call_with_return("env", "i16x8.shl", make_v128_i16(0,1,2,3,4,5,6,7), UINT32_C(32))->to_v128() == make_v128_i16(0u,1u,2u,3u,4u,5u,6u,7u));
   CHECK(bkend.call_with_return("env", "i16x8.shl", make_v128_i16(0,1,2,3,4,5,6,7), UINT32_C(128))->to_v128() == make_v128_i16(0u,1u,2u,3u,4u,5u,6u,7u));
   CHECK(bkend.call_with_return("env", "i16x8.shl", make_v128_i16(0,1,2,3,4,5,6,7), UINT32_C(256))->to_v128() == make_v128_i16(0u,1u,2u,3u,4u,5u,6u,7u));
   CHECK(bkend.call_with_return("env", "i16x8.shl", make_v128_i16(65408,65472,0,1,2,3,4,5), UINT32_C(17))->to_v128() == make_v128_i16(65280u,65408u,0u,2u,4u,6u,8u,10u));
   CHECK(bkend.call_with_return("env", "i16x8.shl", make_v128_i16(0,1,2,3,4,5,6,7), UINT32_C(17))->to_v128() == make_v128_i16(0u,2u,4u,6u,8u,10u,12u,14u));
   CHECK(bkend.call_with_return("env", "i16x8.shl", make_v128_i16(0,1,2,3,4,5,6,7), UINT32_C(33))->to_v128() == make_v128_i16(0u,2u,4u,6u,8u,10u,12u,14u));
   CHECK(bkend.call_with_return("env", "i16x8.shl", make_v128_i16(0,1,2,3,4,5,6,7), UINT32_C(129))->to_v128() == make_v128_i16(0u,2u,4u,6u,8u,10u,12u,14u));
   CHECK(bkend.call_with_return("env", "i16x8.shl", make_v128_i16(0,1,2,3,4,5,6,7), UINT32_C(257))->to_v128() == make_v128_i16(0u,2u,4u,6u,8u,10u,12u,14u));
   CHECK(bkend.call_with_return("env", "i16x8.shl", make_v128_i16(0,1,2,3,4,5,6,7), UINT32_C(513))->to_v128() == make_v128_i16(0u,2u,4u,6u,8u,10u,12u,14u));
   CHECK(bkend.call_with_return("env", "i16x8.shl", make_v128_i16(0,1,2,3,4,5,6,7), UINT32_C(514))->to_v128() == make_v128_i16(0u,4u,8u,12u,16u,20u,24u,28u));
   CHECK(bkend.call_with_return("env", "i16x8.shr_u", make_v128_i16(65408,65472,0,1,2,3,4,5), UINT32_C(1))->to_v128() == make_v128_i16(32704u,32736u,0u,0u,1u,1u,2u,2u));
   CHECK(bkend.call_with_return("env", "i16x8.shr_u", make_v128_i16(12345,12345,12345,12345,12345,12345,12345,12345), UINT32_C(2))->to_v128() == make_v128_i16(3086u,3086u,3086u,3086u,3086u,3086u,3086u,3086u));
   CHECK(bkend.call_with_return("env", "i16x8.shr_u", make_v128_i16(37035,37035,37035,37035,37035,37035,37035,37035), UINT32_C(2))->to_v128() == make_v128_i16(9258u,9258u,9258u,9258u,9258u,9258u,9258u,9258u));
   CHECK(bkend.call_with_return("env", "i16x8.shr_u", make_v128_i16(43707,52445,61183,41136,49360,57584,2571,3085), UINT32_C(4))->to_v128() == make_v128_i16(2731u,3277u,3823u,2571u,3085u,3599u,160u,192u));
   CHECK(bkend.call_with_return("env", "i16x8.shr_u", make_v128_i16(0,1,2,3,4,5,6,7), UINT32_C(8))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8.shr_u", make_v128_i16(0,1,2,3,4,5,6,7), UINT32_C(32))->to_v128() == make_v128_i16(0u,1u,2u,3u,4u,5u,6u,7u));
   CHECK(bkend.call_with_return("env", "i16x8.shr_u", make_v128_i16(0,1,2,3,4,5,6,7), UINT32_C(128))->to_v128() == make_v128_i16(0u,1u,2u,3u,4u,5u,6u,7u));
   CHECK(bkend.call_with_return("env", "i16x8.shr_u", make_v128_i16(0,1,2,3,4,5,6,7), UINT32_C(256))->to_v128() == make_v128_i16(0u,1u,2u,3u,4u,5u,6u,7u));
   CHECK(bkend.call_with_return("env", "i16x8.shr_u", make_v128_i16(65408,65472,0,1,2,3,4,5), UINT32_C(17))->to_v128() == make_v128_i16(32704u,32736u,0u,0u,1u,1u,2u,2u));
   CHECK(bkend.call_with_return("env", "i16x8.shr_u", make_v128_i16(0,1,2,3,4,5,6,7), UINT32_C(17))->to_v128() == make_v128_i16(0u,0u,1u,1u,2u,2u,3u,3u));
   CHECK(bkend.call_with_return("env", "i16x8.shr_u", make_v128_i16(0,1,2,3,4,5,6,7), UINT32_C(33))->to_v128() == make_v128_i16(0u,0u,1u,1u,2u,2u,3u,3u));
   CHECK(bkend.call_with_return("env", "i16x8.shr_u", make_v128_i16(0,1,2,3,4,5,6,7), UINT32_C(129))->to_v128() == make_v128_i16(0u,0u,1u,1u,2u,2u,3u,3u));
   CHECK(bkend.call_with_return("env", "i16x8.shr_u", make_v128_i16(0,1,2,3,4,5,6,7), UINT32_C(257))->to_v128() == make_v128_i16(0u,0u,1u,1u,2u,2u,3u,3u));
   CHECK(bkend.call_with_return("env", "i16x8.shr_u", make_v128_i16(0,1,2,3,4,5,6,7), UINT32_C(513))->to_v128() == make_v128_i16(0u,0u,1u,1u,2u,2u,3u,3u));
   CHECK(bkend.call_with_return("env", "i16x8.shr_u", make_v128_i16(0,1,2,3,4,5,6,7), UINT32_C(514))->to_v128() == make_v128_i16(0u,0u,0u,0u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i16x8.shr_s", make_v128_i16(65408,65472,0,1,2,3,4,5), UINT32_C(1))->to_v128() == make_v128_i16(65472u,65504u,0u,0u,1u,1u,2u,2u));
   CHECK(bkend.call_with_return("env", "i16x8.shr_s", make_v128_i16(12345,12345,12345,12345,12345,12345,12345,12345), UINT32_C(2))->to_v128() == make_v128_i16(3086u,3086u,3086u,3086u,3086u,3086u,3086u,3086u));
   CHECK(bkend.call_with_return("env", "i16x8.shr_s", make_v128_i16(37035,37035,37035,37035,37035,37035,37035,37035), UINT32_C(2))->to_v128() == make_v128_i16(58410u,58410u,58410u,58410u,58410u,58410u,58410u,58410u));
   CHECK(bkend.call_with_return("env", "i16x8.shr_s", make_v128_i16(43707,52445,61183,41136,49360,57584,2571,3085), UINT32_C(4))->to_v128() == make_v128_i16(64171u,64717u,65263u,64011u,64525u,65039u,160u,192u));
   CHECK(bkend.call_with_return("env", "i16x8.shr_s", make_v128_i16(0,1,2,3,4,5,6,7), UINT32_C(8))->to_v128() == make_v128_i16(0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i16x8.shr_s", make_v128_i16(0,1,2,3,4,5,6,7), UINT32_C(32))->to_v128() == make_v128_i16(0u,1u,2u,3u,4u,5u,6u,7u));
   CHECK(bkend.call_with_return("env", "i16x8.shr_s", make_v128_i16(0,1,2,3,4,5,6,7), UINT32_C(128))->to_v128() == make_v128_i16(0u,1u,2u,3u,4u,5u,6u,7u));
   CHECK(bkend.call_with_return("env", "i16x8.shr_s", make_v128_i16(0,1,2,3,4,5,6,7), UINT32_C(256))->to_v128() == make_v128_i16(0u,1u,2u,3u,4u,5u,6u,7u));
   CHECK(bkend.call_with_return("env", "i16x8.shr_s", make_v128_i16(65408,65472,0,1,2,3,4,5), UINT32_C(17))->to_v128() == make_v128_i16(65472u,65504u,0u,0u,1u,1u,2u,2u));
   CHECK(bkend.call_with_return("env", "i16x8.shr_s", make_v128_i16(0,1,2,3,4,5,6,7), UINT32_C(17))->to_v128() == make_v128_i16(0u,0u,1u,1u,2u,2u,3u,3u));
   CHECK(bkend.call_with_return("env", "i16x8.shr_s", make_v128_i16(0,1,2,3,4,5,6,7), UINT32_C(33))->to_v128() == make_v128_i16(0u,0u,1u,1u,2u,2u,3u,3u));
   CHECK(bkend.call_with_return("env", "i16x8.shr_s", make_v128_i16(0,1,2,3,4,5,6,7), UINT32_C(129))->to_v128() == make_v128_i16(0u,0u,1u,1u,2u,2u,3u,3u));
   CHECK(bkend.call_with_return("env", "i16x8.shr_s", make_v128_i16(0,1,2,3,4,5,6,7), UINT32_C(257))->to_v128() == make_v128_i16(0u,0u,1u,1u,2u,2u,3u,3u));
   CHECK(bkend.call_with_return("env", "i16x8.shr_s", make_v128_i16(0,1,2,3,4,5,6,7), UINT32_C(513))->to_v128() == make_v128_i16(0u,0u,1u,1u,2u,2u,3u,3u));
   CHECK(bkend.call_with_return("env", "i16x8.shr_s", make_v128_i16(0,1,2,3,4,5,6,7), UINT32_C(514))->to_v128() == make_v128_i16(0u,0u,0u,0u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i16x8.shl_1", make_v128_i16(0,1,2,3,4,5,6,7))->to_v128() == make_v128_i16(0u,2u,4u,6u,8u,10u,12u,14u));
   CHECK(bkend.call_with_return("env", "i16x8.shr_u_16", make_v128_i16(0,1,2,3,4,5,6,7))->to_v128() == make_v128_i16(0u,1u,2u,3u,4u,5u,6u,7u));
   CHECK(bkend.call_with_return("env", "i16x8.shr_s_17", make_v128_i16(0,1,2,3,4,5,6,7))->to_v128() == make_v128_i16(0u,0u,1u,1u,2u,2u,3u,3u));
   CHECK(bkend.call_with_return("env", "i32x4.shl", make_v128_i32(2147483648,4294934528,0,168496141), UINT32_C(1))->to_v128() == make_v128_i32(0u,4294901760u,0u,336992282u));
   CHECK(bkend.call_with_return("env", "i32x4.shl", make_v128_i32(1234567890,1234567890,1234567890,1234567890), UINT32_C(2))->to_v128() == make_v128_i32(643304264u,643304264u,643304264u,643304264u));
   CHECK(bkend.call_with_return("env", "i32x4.shl", make_v128_i32(305419896,305419896,305419896,305419896), UINT32_C(2))->to_v128() == make_v128_i32(1221679584u,1221679584u,1221679584u,1221679584u));
   CHECK(bkend.call_with_return("env", "i32x4.shl", make_v128_i32(2864434397,4009730224,3234914544,168496141), UINT32_C(4))->to_v128() == make_v128_i32(2881277392u,4026141440u,219025152u,2695938256u));
   CHECK(bkend.call_with_return("env", "i32x4.shl", make_v128_i32(0,1,14,15), UINT32_C(8))->to_v128() == make_v128_i32(0u,256u,3584u,3840u));
   CHECK(bkend.call_with_return("env", "i32x4.shl", make_v128_i32(0,1,14,15), UINT32_C(32))->to_v128() == make_v128_i32(0u,1u,14u,15u));
   CHECK(bkend.call_with_return("env", "i32x4.shl", make_v128_i32(0,1,14,15), UINT32_C(128))->to_v128() == make_v128_i32(0u,1u,14u,15u));
   CHECK(bkend.call_with_return("env", "i32x4.shl", make_v128_i32(0,1,14,15), UINT32_C(256))->to_v128() == make_v128_i32(0u,1u,14u,15u));
   CHECK(bkend.call_with_return("env", "i32x4.shl", make_v128_i32(2147483648,4294934528,0,168496141), UINT32_C(33))->to_v128() == make_v128_i32(0u,4294901760u,0u,336992282u));
   CHECK(bkend.call_with_return("env", "i32x4.shl", make_v128_i32(0,1,14,15), UINT32_C(33))->to_v128() == make_v128_i32(0u,2u,28u,30u));
   CHECK(bkend.call_with_return("env", "i32x4.shl", make_v128_i32(0,1,14,15), UINT32_C(65))->to_v128() == make_v128_i32(0u,2u,28u,30u));
   CHECK(bkend.call_with_return("env", "i32x4.shl", make_v128_i32(0,1,14,15), UINT32_C(129))->to_v128() == make_v128_i32(0u,2u,28u,30u));
   CHECK(bkend.call_with_return("env", "i32x4.shl", make_v128_i32(0,1,14,15), UINT32_C(257))->to_v128() == make_v128_i32(0u,2u,28u,30u));
   CHECK(bkend.call_with_return("env", "i32x4.shl", make_v128_i32(0,1,14,15), UINT32_C(513))->to_v128() == make_v128_i32(0u,2u,28u,30u));
   CHECK(bkend.call_with_return("env", "i32x4.shl", make_v128_i32(0,1,14,15), UINT32_C(514))->to_v128() == make_v128_i32(0u,4u,56u,60u));
   CHECK(bkend.call_with_return("env", "i32x4.shr_u", make_v128_i32(2147483648,4294934528,12,13), UINT32_C(1))->to_v128() == make_v128_i32(1073741824u,2147467264u,6u,6u));
   CHECK(bkend.call_with_return("env", "i32x4.shr_u", make_v128_i32(1234567890,1234567890,1234567890,1234567890), UINT32_C(2))->to_v128() == make_v128_i32(308641972u,308641972u,308641972u,308641972u));
   CHECK(bkend.call_with_return("env", "i32x4.shr_u", make_v128_i32(2427178479,2427178479,2427178479,2427178479), UINT32_C(2))->to_v128() == make_v128_i32(606794619u,606794619u,606794619u,606794619u));
   CHECK(bkend.call_with_return("env", "i32x4.shr_u", make_v128_i32(2864434397,4009730224,3234914544,168496141), UINT32_C(4))->to_v128() == make_v128_i32(179027149u,250608139u,202182159u,10531008u));
   CHECK(bkend.call_with_return("env", "i32x4.shr_u", make_v128_i32(0,1,14,15), UINT32_C(8))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.shr_u", make_v128_i32(0,1,14,15), UINT32_C(32))->to_v128() == make_v128_i32(0u,1u,14u,15u));
   CHECK(bkend.call_with_return("env", "i32x4.shr_u", make_v128_i32(0,1,14,15), UINT32_C(128))->to_v128() == make_v128_i32(0u,1u,14u,15u));
   CHECK(bkend.call_with_return("env", "i32x4.shr_u", make_v128_i32(0,1,14,15), UINT32_C(256))->to_v128() == make_v128_i32(0u,1u,14u,15u));
   CHECK(bkend.call_with_return("env", "i32x4.shr_u", make_v128_i32(2147483648,4294934528,12,13), UINT32_C(33))->to_v128() == make_v128_i32(1073741824u,2147467264u,6u,6u));
   CHECK(bkend.call_with_return("env", "i32x4.shr_u", make_v128_i32(0,1,14,15), UINT32_C(33))->to_v128() == make_v128_i32(0u,0u,7u,7u));
   CHECK(bkend.call_with_return("env", "i32x4.shr_u", make_v128_i32(0,1,14,15), UINT32_C(65))->to_v128() == make_v128_i32(0u,0u,7u,7u));
   CHECK(bkend.call_with_return("env", "i32x4.shr_u", make_v128_i32(0,1,14,15), UINT32_C(129))->to_v128() == make_v128_i32(0u,0u,7u,7u));
   CHECK(bkend.call_with_return("env", "i32x4.shr_u", make_v128_i32(0,1,14,15), UINT32_C(257))->to_v128() == make_v128_i32(0u,0u,7u,7u));
   CHECK(bkend.call_with_return("env", "i32x4.shr_u", make_v128_i32(0,1,14,15), UINT32_C(513))->to_v128() == make_v128_i32(0u,0u,7u,7u));
   CHECK(bkend.call_with_return("env", "i32x4.shr_u", make_v128_i32(0,1,14,15), UINT32_C(514))->to_v128() == make_v128_i32(0u,0u,3u,3u));
   CHECK(bkend.call_with_return("env", "i32x4.shr_s", make_v128_i32(2147483648,4294934528,12,13), UINT32_C(1))->to_v128() == make_v128_i32(3221225472u,4294950912u,6u,6u));
   CHECK(bkend.call_with_return("env", "i32x4.shr_s", make_v128_i32(1234567890,1234567890,1234567890,1234567890), UINT32_C(2))->to_v128() == make_v128_i32(308641972u,308641972u,308641972u,308641972u));
   CHECK(bkend.call_with_return("env", "i32x4.shr_s", make_v128_i32(2427178479,2427178479,2427178479,2427178479), UINT32_C(2))->to_v128() == make_v128_i32(3828020091u,3828020091u,3828020091u,3828020091u));
   CHECK(bkend.call_with_return("env", "i32x4.shr_s", make_v128_i32(2864434397,4009730224,3234914544,168496141), UINT32_C(4))->to_v128() == make_v128_i32(4205558989u,4277139979u,4228713999u,10531008u));
   CHECK(bkend.call_with_return("env", "i32x4.shr_s", make_v128_i32(0,1,14,15), UINT32_C(8))->to_v128() == make_v128_i32(0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i32x4.shr_s", make_v128_i32(0,1,14,15), UINT32_C(32))->to_v128() == make_v128_i32(0u,1u,14u,15u));
   CHECK(bkend.call_with_return("env", "i32x4.shr_s", make_v128_i32(0,1,14,15), UINT32_C(128))->to_v128() == make_v128_i32(0u,1u,14u,15u));
   CHECK(bkend.call_with_return("env", "i32x4.shr_s", make_v128_i32(0,1,14,15), UINT32_C(256))->to_v128() == make_v128_i32(0u,1u,14u,15u));
   CHECK(bkend.call_with_return("env", "i32x4.shr_s", make_v128_i32(2147483648,4294934528,12,13), UINT32_C(33))->to_v128() == make_v128_i32(3221225472u,4294950912u,6u,6u));
   CHECK(bkend.call_with_return("env", "i32x4.shr_s", make_v128_i32(0,1,14,15), UINT32_C(33))->to_v128() == make_v128_i32(0u,0u,7u,7u));
   CHECK(bkend.call_with_return("env", "i32x4.shr_s", make_v128_i32(0,1,14,15), UINT32_C(65))->to_v128() == make_v128_i32(0u,0u,7u,7u));
   CHECK(bkend.call_with_return("env", "i32x4.shr_s", make_v128_i32(0,1,14,15), UINT32_C(129))->to_v128() == make_v128_i32(0u,0u,7u,7u));
   CHECK(bkend.call_with_return("env", "i32x4.shr_s", make_v128_i32(0,1,14,15), UINT32_C(257))->to_v128() == make_v128_i32(0u,0u,7u,7u));
   CHECK(bkend.call_with_return("env", "i32x4.shr_s", make_v128_i32(0,1,14,15), UINT32_C(513))->to_v128() == make_v128_i32(0u,0u,7u,7u));
   CHECK(bkend.call_with_return("env", "i32x4.shr_s", make_v128_i32(0,1,14,15), UINT32_C(514))->to_v128() == make_v128_i32(0u,0u,3u,3u));
   CHECK(bkend.call_with_return("env", "i32x4.shl_1", make_v128_i32(0,1,14,15))->to_v128() == make_v128_i32(0u,2u,28u,30u));
   CHECK(bkend.call_with_return("env", "i32x4.shr_u_32", make_v128_i32(0,1,14,15))->to_v128() == make_v128_i32(0u,1u,14u,15u));
   CHECK(bkend.call_with_return("env", "i32x4.shr_s_33", make_v128_i32(0,1,14,15))->to_v128() == make_v128_i32(0u,0u,7u,7u));
   CHECK(bkend.call_with_return("env", "i64x2.shl", make_v128_i64(9223372036854775808,18446744071562067968), UINT32_C(1))->to_v128() == make_v128_i64(0u,18446744069414584320u));
   CHECK(bkend.call_with_return("env", "i64x2.shl", make_v128_i64(1234567890123456789,1234567890123456789), UINT32_C(2))->to_v128() == make_v128_i64(4938271560493827156u,4938271560493827156u));
   CHECK(bkend.call_with_return("env", "i64x2.shl", make_v128_i64(1311768467294899695,1311768467294899695), UINT32_C(2))->to_v128() == make_v128_i64(5247073869179598780u,5247073869179598780u));
   CHECK(bkend.call_with_return("env", "i64x2.shl", make_v128_i64(12302652060662210736,13893852172003249165), UINT32_C(4))->to_v128() == make_v128_i64(12374992233499855616u,940705867537367248u));
   CHECK(bkend.call_with_return("env", "i64x2.shl", make_v128_i64(12302652060662210736,13893852172003249165), UINT32_C(8))->to_v128() == make_v128_i64(13532434998902173696u,15051293880597875968u));
   CHECK(bkend.call_with_return("env", "i64x2.shl", make_v128_i64(1,15), UINT32_C(16))->to_v128() == make_v128_i64(65536u,983040u));
   CHECK(bkend.call_with_return("env", "i64x2.shl", make_v128_i64(1,15), UINT32_C(32))->to_v128() == make_v128_i64(4294967296u,64424509440u));
   CHECK(bkend.call_with_return("env", "i64x2.shl", make_v128_i64(1,15), UINT32_C(128))->to_v128() == make_v128_i64(1u,15u));
   CHECK(bkend.call_with_return("env", "i64x2.shl", make_v128_i64(1,15), UINT32_C(256))->to_v128() == make_v128_i64(1u,15u));
   CHECK(bkend.call_with_return("env", "i64x2.shl", make_v128_i64(1,15), UINT32_C(65))->to_v128() == make_v128_i64(2u,30u));
   CHECK(bkend.call_with_return("env", "i64x2.shl", make_v128_i64(1,15), UINT32_C(129))->to_v128() == make_v128_i64(2u,30u));
   CHECK(bkend.call_with_return("env", "i64x2.shl", make_v128_i64(1,15), UINT32_C(257))->to_v128() == make_v128_i64(2u,30u));
   CHECK(bkend.call_with_return("env", "i64x2.shl", make_v128_i64(1,15), UINT32_C(513))->to_v128() == make_v128_i64(2u,30u));
   CHECK(bkend.call_with_return("env", "i64x2.shl", make_v128_i64(1,15), UINT32_C(514))->to_v128() == make_v128_i64(4u,60u));
   CHECK(bkend.call_with_return("env", "i64x2.shr_u", make_v128_i64(9223372036854775808,18446744071562067968), UINT32_C(1))->to_v128() == make_v128_i64(4611686018427387904u,9223372035781033984u));
   CHECK(bkend.call_with_return("env", "i64x2.shr_u", make_v128_i64(1234567890123456789,1234567890123456789), UINT32_C(2))->to_v128() == make_v128_i64(308641972530864197u,308641972530864197u));
   CHECK(bkend.call_with_return("env", "i64x2.shr_u", make_v128_i64(10424652191131583265,10424652191131583265), UINT32_C(2))->to_v128() == make_v128_i64(2606163047782895816u,2606163047782895816u));
   CHECK(bkend.call_with_return("env", "i64x2.shr_u", make_v128_i64(12302652060662210736,13893852172003249165), UINT32_C(4))->to_v128() == make_v128_i64(768915753791388171u,868365760750203072u));
   CHECK(bkend.call_with_return("env", "i64x2.shr_u", make_v128_i64(12302652060662210736,13893852172003249165), UINT32_C(8))->to_v128() == make_v128_i64(48057234611961760u,54272860046887692u));
   CHECK(bkend.call_with_return("env", "i64x2.shr_u", make_v128_i64(1,15), UINT32_C(16))->to_v128() == make_v128_i64(0u,0u));
   CHECK(bkend.call_with_return("env", "i64x2.shr_u", make_v128_i64(1,15), UINT32_C(32))->to_v128() == make_v128_i64(0u,0u));
   CHECK(bkend.call_with_return("env", "i64x2.shr_u", make_v128_i64(1,15), UINT32_C(128))->to_v128() == make_v128_i64(1u,15u));
   CHECK(bkend.call_with_return("env", "i64x2.shr_u", make_v128_i64(1,15), UINT32_C(256))->to_v128() == make_v128_i64(1u,15u));
   CHECK(bkend.call_with_return("env", "i64x2.shr_u", make_v128_i64(1,15), UINT32_C(65))->to_v128() == make_v128_i64(0u,7u));
   CHECK(bkend.call_with_return("env", "i64x2.shr_u", make_v128_i64(1,15), UINT32_C(129))->to_v128() == make_v128_i64(0u,7u));
   CHECK(bkend.call_with_return("env", "i64x2.shr_u", make_v128_i64(1,15), UINT32_C(257))->to_v128() == make_v128_i64(0u,7u));
   CHECK(bkend.call_with_return("env", "i64x2.shr_u", make_v128_i64(1,15), UINT32_C(513))->to_v128() == make_v128_i64(0u,7u));
   CHECK(bkend.call_with_return("env", "i64x2.shr_u", make_v128_i64(0,15), UINT32_C(514))->to_v128() == make_v128_i64(0u,3u));
   CHECK(bkend.call_with_return("env", "i64x2.shr_s", make_v128_i64(9223372036854775808,18446744071562067968), UINT32_C(1))->to_v128() == make_v128_i64(13835058055282163712u,18446744072635809792u));
   CHECK(bkend.call_with_return("env", "i64x2.shr_s", make_v128_i64(1234567890123456789,1234567890123456789), UINT32_C(2))->to_v128() == make_v128_i64(308641972530864197u,308641972530864197u));
   CHECK(bkend.call_with_return("env", "i64x2.shr_s", make_v128_i64(10424652191131583265,10424652191131583265), UINT32_C(2))->to_v128() == make_v128_i64(16441221103065059528u,16441221103065059528u));
   CHECK(bkend.call_with_return("env", "i64x2.shr_s", make_v128_i64(12302652060662210736,13893852172003249165), UINT32_C(4))->to_v128() == make_v128_i64(18062738322894092811u,18162188329852907712u));
   CHECK(bkend.call_with_return("env", "i64x2.shr_s", make_v128_i64(18422743714283585440,13893852172003249165), UINT32_C(8))->to_v128() == make_v128_i64(18446650322305543935u,18428959339718511372u));
   CHECK(bkend.call_with_return("env", "i64x2.shr_s", make_v128_i64(1,15), UINT32_C(16))->to_v128() == make_v128_i64(0u,0u));
   CHECK(bkend.call_with_return("env", "i64x2.shr_s", make_v128_i64(1,15), UINT32_C(32))->to_v128() == make_v128_i64(0u,0u));
   CHECK(bkend.call_with_return("env", "i64x2.shr_s", make_v128_i64(1,15), UINT32_C(128))->to_v128() == make_v128_i64(1u,15u));
   CHECK(bkend.call_with_return("env", "i64x2.shr_s", make_v128_i64(1,15), UINT32_C(256))->to_v128() == make_v128_i64(1u,15u));
   CHECK(bkend.call_with_return("env", "i64x2.shr_s", make_v128_i64(9223372036854775808,18446744071562067968), UINT32_C(65))->to_v128() == make_v128_i64(13835058055282163712u,18446744072635809792u));
   CHECK(bkend.call_with_return("env", "i64x2.shr_s", make_v128_i64(12,13), UINT32_C(65))->to_v128() == make_v128_i64(6u,6u));
   CHECK(bkend.call_with_return("env", "i64x2.shr_s", make_v128_i64(1,15), UINT32_C(129))->to_v128() == make_v128_i64(0u,7u));
   CHECK(bkend.call_with_return("env", "i64x2.shr_s", make_v128_i64(1,15), UINT32_C(257))->to_v128() == make_v128_i64(0u,7u));
   CHECK(bkend.call_with_return("env", "i64x2.shr_s", make_v128_i64(1,15), UINT32_C(513))->to_v128() == make_v128_i64(0u,7u));
   CHECK(bkend.call_with_return("env", "i64x2.shr_s", make_v128_i64(1,15), UINT32_C(514))->to_v128() == make_v128_i64(0u,3u));
   CHECK(bkend.call_with_return("env", "i64x2.shl_1", make_v128_i64(1,15))->to_v128() == make_v128_i64(2u,30u));
   CHECK(bkend.call_with_return("env", "i64x2.shr_u_64", make_v128_i64(1,15))->to_v128() == make_v128_i64(1u,15u));
   CHECK(bkend.call_with_return("env", "i64x2.shr_s_65", make_v128_i64(1,15))->to_v128() == make_v128_i64(0u,7u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_bit_shift_1_wasm>", "[simd_bit_shift_1_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_bit_shift.1.wasm");
   backend_t bkend( code, &wa );

   CHECK(!bkend.call_with_return("env", "i8x16.shl-in-block"));
   CHECK(!bkend.call_with_return("env", "i8x16.shr_s-in-block"));
   CHECK(!bkend.call_with_return("env", "i8x16.shr_u-in-block"));
   CHECK(!bkend.call_with_return("env", "i16x8.shl-in-block"));
   CHECK(!bkend.call_with_return("env", "i16x8.shr_s-in-block"));
   CHECK(!bkend.call_with_return("env", "i16x8.shr_u-in-block"));
   CHECK(!bkend.call_with_return("env", "i32x4.shl-in-block"));
   CHECK(!bkend.call_with_return("env", "i32x4.shr_s-in-block"));
   CHECK(!bkend.call_with_return("env", "i32x4.shr_u-in-block"));
   CHECK(!bkend.call_with_return("env", "i64x2.shl-in-block"));
   CHECK(!bkend.call_with_return("env", "i64x2.shr_s-in-block"));
   CHECK(!bkend.call_with_return("env", "i64x2.shr_u-in-block"));
   CHECK(!bkend.call_with_return("env", "nested-i8x16.shl"));
   CHECK(!bkend.call_with_return("env", "nested-i8x16.shr_s"));
   CHECK(!bkend.call_with_return("env", "nested-i8x16.shr_u"));
   CHECK(!bkend.call_with_return("env", "nested-i16x8.shl"));
   CHECK(!bkend.call_with_return("env", "nested-i16x8.shr_s"));
   CHECK(!bkend.call_with_return("env", "nested-i16x8.shr_u"));
   CHECK(!bkend.call_with_return("env", "nested-i32x4.shl"));
   CHECK(!bkend.call_with_return("env", "nested-i32x4.shr_s"));
   CHECK(!bkend.call_with_return("env", "nested-i32x4.shr_u"));
   CHECK(!bkend.call_with_return("env", "nested-i64x2.shl"));
   CHECK(!bkend.call_with_return("env", "nested-i64x2.shr_s"));
   CHECK(!bkend.call_with_return("env", "nested-i64x2.shr_u"));
}

BACKEND_TEST_CASE( "Testing wasm <simd_bit_shift_10_wasm>", "[simd_bit_shift_10_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_bit_shift.10.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_bit_shift_11_wasm>", "[simd_bit_shift_11_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_bit_shift.11.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_bit_shift_12_wasm>", "[simd_bit_shift_12_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_bit_shift.12.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_bit_shift_13_wasm>", "[simd_bit_shift_13_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_bit_shift.13.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_bit_shift_2_wasm>", "[simd_bit_shift_2_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_bit_shift.2.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_bit_shift_29_wasm>", "[simd_bit_shift_29_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_bit_shift.29.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_bit_shift_3_wasm>", "[simd_bit_shift_3_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_bit_shift.3.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_bit_shift_30_wasm>", "[simd_bit_shift_30_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_bit_shift.30.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_bit_shift_31_wasm>", "[simd_bit_shift_31_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_bit_shift.31.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_bit_shift_32_wasm>", "[simd_bit_shift_32_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_bit_shift.32.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_bit_shift_33_wasm>", "[simd_bit_shift_33_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_bit_shift.33.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_bit_shift_34_wasm>", "[simd_bit_shift_34_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_bit_shift.34.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_bit_shift_35_wasm>", "[simd_bit_shift_35_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_bit_shift.35.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_bit_shift_36_wasm>", "[simd_bit_shift_36_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_bit_shift.36.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_bit_shift_37_wasm>", "[simd_bit_shift_37_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_bit_shift.37.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_bit_shift_38_wasm>", "[simd_bit_shift_38_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_bit_shift.38.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_bit_shift_39_wasm>", "[simd_bit_shift_39_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_bit_shift.39.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_bit_shift_4_wasm>", "[simd_bit_shift_4_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_bit_shift.4.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_bit_shift_40_wasm>", "[simd_bit_shift_40_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_bit_shift.40.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_bit_shift_5_wasm>", "[simd_bit_shift_5_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_bit_shift.5.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_bit_shift_6_wasm>", "[simd_bit_shift_6_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_bit_shift.6.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_bit_shift_7_wasm>", "[simd_bit_shift_7_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_bit_shift.7.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_bit_shift_8_wasm>", "[simd_bit_shift_8_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_bit_shift.8.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_bit_shift_9_wasm>", "[simd_bit_shift_9_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_bit_shift.9.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

