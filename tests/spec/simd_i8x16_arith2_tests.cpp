// Generated by spec_test_generator.  DO NOT MODIFY THIS FILE.

#include <algorithm>
#include <vector>
#include <iostream>
#include <iterator>
#include <cmath>
#include <cstdlib>
#include <catch2/catch.hpp>
#include <utils.hpp>
#include <wasm_config.hpp>
#include <eosio/vm/backend.hpp>

using namespace eosio;
using namespace eosio::vm;
extern wasm_allocator wa;

BACKEND_TEST_CASE( "Testing wasm <simd_i8x16_arith2_0_wasm>", "[simd_i8x16_arith2_0_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i8x16_arith2.0.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "i8x16.min_s", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.min_s", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i8x16.min_s", make_v128_i8(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255), make_v128_i8(0,0,0,0,255,255,255,255,0,0,0,0,255,255,255,255))->to_v128() == make_v128_i8(0u,0u,0u,0u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i8x16.min_s", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i8x16.min_s", make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.min_s", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))->to_v128() == make_v128_i8(255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i8x16.min_s", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255), make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.min_s", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128), make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.min_s", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128), make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.min_s", make_v128_i8(123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123), make_v128_i8(123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123))->to_v128() == make_v128_i8(123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u));
   CHECK(bkend.call_with_return("env", "i8x16.min_s", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128), make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.min_u", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.min_u", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.min_u", make_v128_i8(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255), make_v128_i8(0,0,0,0,255,255,255,255,0,0,0,0,255,255,255,255))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i8x16.min_u", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.min_u", make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.min_u", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.min_u", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255), make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.min_u", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128), make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.min_u", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128), make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.min_u", make_v128_i8(123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123), make_v128_i8(123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123))->to_v128() == make_v128_i8(123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u));
   CHECK(bkend.call_with_return("env", "i8x16.min_u", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128), make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.max_s", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.max_s", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.max_s", make_v128_i8(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255), make_v128_i8(0,0,0,0,255,255,255,255,0,0,0,0,255,255,255,255))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i8x16.max_s", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.max_s", make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.max_s", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.max_s", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255), make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i8x16.max_s", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128), make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.max_s", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128), make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.max_s", make_v128_i8(123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123), make_v128_i8(123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123))->to_v128() == make_v128_i8(123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u));
   CHECK(bkend.call_with_return("env", "i8x16.max_s", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128), make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.max_u", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.max_u", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i8x16.max_u", make_v128_i8(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255), make_v128_i8(0,0,0,0,255,255,255,255,0,0,0,0,255,255,255,255))->to_v128() == make_v128_i8(0u,0u,0u,0u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i8x16.max_u", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i8x16.max_u", make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.max_u", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))->to_v128() == make_v128_i8(255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i8x16.max_u", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255), make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i8x16.max_u", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128), make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.max_u", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128), make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.max_u", make_v128_i8(123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123), make_v128_i8(123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123))->to_v128() == make_v128_i8(123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u));
   CHECK(bkend.call_with_return("env", "i8x16.max_u", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128), make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.avgr_u", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.avgr_u", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.avgr_u", make_v128_i8(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255), make_v128_i8(0,0,0,0,255,255,255,255,0,0,0,0,255,255,255,255))->to_v128() == make_v128_i8(0u,0u,0u,0u,128u,128u,128u,128u,128u,128u,128u,128u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i8x16.avgr_u", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.avgr_u", make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.avgr_u", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.avgr_u", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255), make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(192u,192u,192u,192u,192u,192u,192u,192u,192u,192u,192u,192u,192u,192u,192u,192u));
   CHECK(bkend.call_with_return("env", "i8x16.avgr_u", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128), make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.avgr_u", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128), make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.avgr_u", make_v128_i8(123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123), make_v128_i8(123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123))->to_v128() == make_v128_i8(123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u));
   CHECK(bkend.call_with_return("env", "i8x16.avgr_u", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128), make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.abs", make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.abs", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.abs", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.abs", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.abs", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.abs", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.abs", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.abs", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.abs", make_v128_i8(123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123))->to_v128() == make_v128_i8(123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u));
   CHECK(bkend.call_with_return("env", "i8x16.abs", make_v128_i8(133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133))->to_v128() == make_v128_i8(123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u,123u));
   CHECK(bkend.call_with_return("env", "i8x16.abs", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.abs", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.abs", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.abs", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.popcnt", make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.popcnt", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u));
   CHECK(bkend.call_with_return("env", "i8x16.popcnt", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u));
   CHECK(bkend.call_with_return("env", "i8x16.popcnt", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u));
   CHECK(bkend.call_with_return("env", "i8x16.popcnt", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.popcnt", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.popcnt", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.popcnt", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.popcnt", make_v128_i8(123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123))->to_v128() == make_v128_i8(6u,6u,6u,6u,6u,6u,6u,6u,6u,6u,6u,6u,6u,6u,6u,6u));
   CHECK(bkend.call_with_return("env", "i8x16.popcnt", make_v128_i8(133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133))->to_v128() == make_v128_i8(3u,3u,3u,3u,3u,3u,3u,3u,3u,3u,3u,3u,3u,3u,3u,3u));
   CHECK(bkend.call_with_return("env", "i8x16.popcnt", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.popcnt", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.popcnt", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.popcnt", make_v128_i8(128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.min_s_with_const_0")->to_v128() == make_v128_i8(128u,128u,128u,128u,64u,64u,64u,64u,64u,64u,64u,64u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.min_s_with_const_1")->to_v128() == make_v128_i8(0u,0u,0u,0u,1u,1u,1u,1u,1u,1u,1u,1u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.min_u_with_const_2")->to_v128() == make_v128_i8(128u,128u,128u,128u,64u,64u,64u,64u,64u,64u,64u,64u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.min_u_with_const_3")->to_v128() == make_v128_i8(0u,0u,0u,0u,1u,1u,1u,1u,1u,1u,1u,1u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.max_s_with_const_4")->to_v128() == make_v128_i8(255u,255u,255u,255u,127u,127u,127u,127u,127u,127u,127u,127u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i8x16.max_s_with_const_5")->to_v128() == make_v128_i8(3u,3u,3u,3u,2u,2u,2u,2u,2u,2u,2u,2u,3u,3u,3u,3u));
   CHECK(bkend.call_with_return("env", "i8x16.max_u_with_const_6")->to_v128() == make_v128_i8(255u,255u,255u,255u,127u,127u,127u,127u,127u,127u,127u,127u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i8x16.max_u_with_const_7")->to_v128() == make_v128_i8(3u,3u,3u,3u,2u,2u,2u,2u,2u,2u,2u,2u,3u,3u,3u,3u));
   CHECK(bkend.call_with_return("env", "i8x16.avgr_u_with_const_8")->to_v128() == make_v128_i8(192u,192u,192u,192u,96u,96u,96u,96u,96u,96u,96u,96u,192u,192u,192u,192u));
   CHECK(bkend.call_with_return("env", "i8x16.avgr_u_with_const_9")->to_v128() == make_v128_i8(2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u));
   CHECK(bkend.call_with_return("env", "i8x16.abs_with_const_10")->to_v128() == make_v128_i8(128u,128u,128u,128u,127u,127u,127u,127u,64u,64u,64u,64u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.popcnt_with_const_11")->to_v128() == make_v128_i8(1u,1u,1u,1u,7u,7u,7u,7u,1u,1u,1u,1u,8u,8u,8u,8u));
   CHECK(bkend.call_with_return("env", "i8x16.min_s_with_const_12", make_v128_i8(255,255,255,255,64,64,64,64,127,127,127,127,128,128,128,128))->to_v128() == make_v128_i8(128u,128u,128u,128u,64u,64u,64u,64u,64u,64u,64u,64u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.min_s_with_const_13", make_v128_i8(3,3,3,3,2,2,2,2,1,1,1,1,0,0,0,0))->to_v128() == make_v128_i8(0u,0u,0u,0u,1u,1u,1u,1u,1u,1u,1u,1u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.min_u_with_const_14", make_v128_i8(255,255,255,255,64,64,64,64,127,127,127,127,128,128,128,128))->to_v128() == make_v128_i8(128u,128u,128u,128u,64u,64u,64u,64u,64u,64u,64u,64u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.min_u_with_const_15", make_v128_i8(3,3,3,3,2,2,2,2,1,1,1,1,0,0,0,0))->to_v128() == make_v128_i8(0u,0u,0u,0u,1u,1u,1u,1u,1u,1u,1u,1u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.max_s_with_const_16", make_v128_i8(255,255,255,255,64,64,64,64,127,127,127,127,128,128,128,128))->to_v128() == make_v128_i8(255u,255u,255u,255u,127u,127u,127u,127u,127u,127u,127u,127u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i8x16.max_s_with_const_17", make_v128_i8(3,3,3,3,2,2,2,2,1,1,1,1,0,0,0,0))->to_v128() == make_v128_i8(3u,3u,3u,3u,2u,2u,2u,2u,2u,2u,2u,2u,3u,3u,3u,3u));
   CHECK(bkend.call_with_return("env", "i8x16.max_u_with_const_18", make_v128_i8(255,255,255,255,64,64,64,64,127,127,127,127,128,128,128,128))->to_v128() == make_v128_i8(255u,255u,255u,255u,127u,127u,127u,127u,127u,127u,127u,127u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i8x16.max_u_with_const_19", make_v128_i8(3,3,3,3,2,2,2,2,1,1,1,1,0,0,0,0))->to_v128() == make_v128_i8(3u,3u,3u,3u,2u,2u,2u,2u,2u,2u,2u,2u,3u,3u,3u,3u));
   CHECK(bkend.call_with_return("env", "i8x16.avgr_u_with_const_20", make_v128_i8(255,255,255,255,64,64,64,64,127,127,127,127,128,128,128,128))->to_v128() == make_v128_i8(192u,192u,192u,192u,96u,96u,96u,96u,96u,96u,96u,96u,192u,192u,192u,192u));
   CHECK(bkend.call_with_return("env", "i8x16.avgr_u_with_const_21", make_v128_i8(3,3,3,3,2,2,2,2,1,1,1,1,0,0,0,0))->to_v128() == make_v128_i8(2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u));
   CHECK(bkend.call_with_return("env", "i8x16.min_s", make_v128_i8(128,128,128,128,127,127,127,127,64,64,64,64,255,255,255,255), make_v128_i8(255,255,255,255,64,64,64,64,127,127,127,127,128,128,128,128))->to_v128() == make_v128_i8(128u,128u,128u,128u,64u,64u,64u,64u,64u,64u,64u,64u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.min_s", make_v128_i8(0,0,0,0,1,1,1,1,2,2,2,2,128,128,128,128), make_v128_i8(0,0,0,0,2,2,2,2,1,1,1,1,128,128,128,128))->to_v128() == make_v128_i8(0u,0u,0u,0u,1u,1u,1u,1u,1u,1u,1u,1u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.min_u", make_v128_i8(128,128,128,128,127,127,127,127,64,64,64,64,255,255,255,255), make_v128_i8(255,255,255,255,64,64,64,64,127,127,127,127,128,128,128,128))->to_v128() == make_v128_i8(128u,128u,128u,128u,64u,64u,64u,64u,64u,64u,64u,64u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.min_u", make_v128_i8(0,0,0,0,1,1,1,1,2,2,2,2,128,128,128,128), make_v128_i8(0,0,0,0,2,2,2,2,1,1,1,1,128,128,128,128))->to_v128() == make_v128_i8(0u,0u,0u,0u,1u,1u,1u,1u,1u,1u,1u,1u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.max_s", make_v128_i8(128,128,128,128,127,127,127,127,64,64,64,64,255,255,255,255), make_v128_i8(255,255,255,255,64,64,64,64,127,127,127,127,128,128,128,128))->to_v128() == make_v128_i8(255u,255u,255u,255u,127u,127u,127u,127u,127u,127u,127u,127u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i8x16.max_s", make_v128_i8(0,0,0,0,1,1,1,1,2,2,2,2,128,128,128,128), make_v128_i8(0,0,0,0,2,2,2,2,1,1,1,1,128,128,128,128))->to_v128() == make_v128_i8(0u,0u,0u,0u,2u,2u,2u,2u,2u,2u,2u,2u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.max_u", make_v128_i8(128,128,128,128,127,127,127,127,64,64,64,64,255,255,255,255), make_v128_i8(255,255,255,255,64,64,64,64,127,127,127,127,128,128,128,128))->to_v128() == make_v128_i8(255u,255u,255u,255u,127u,127u,127u,127u,127u,127u,127u,127u,255u,255u,255u,255u));
   CHECK(bkend.call_with_return("env", "i8x16.max_u", make_v128_i8(0,0,0,0,1,1,1,1,2,2,2,2,128,128,128,128), make_v128_i8(0,0,0,0,2,2,2,2,1,1,1,1,128,128,128,128))->to_v128() == make_v128_i8(0u,0u,0u,0u,2u,2u,2u,2u,2u,2u,2u,2u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.avgr_u", make_v128_i8(128,128,128,128,127,127,127,127,64,64,64,64,255,255,255,255), make_v128_i8(255,255,255,255,64,64,64,64,127,127,127,127,128,128,128,128))->to_v128() == make_v128_i8(192u,192u,192u,192u,96u,96u,96u,96u,96u,96u,96u,96u,192u,192u,192u,192u));
   CHECK(bkend.call_with_return("env", "i8x16.avgr_u", make_v128_i8(0,0,0,0,1,1,1,1,2,2,2,2,128,128,128,128), make_v128_i8(0,0,0,0,2,2,2,2,1,1,1,1,128,128,128,128))->to_v128() == make_v128_i8(0u,0u,0u,0u,2u,2u,2u,2u,2u,2u,2u,2u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.abs", make_v128_i8(128,128,128,128,127,127,127,127,64,64,64,64,255,255,255,255))->to_v128() == make_v128_i8(128u,128u,128u,128u,127u,127u,127u,127u,64u,64u,64u,64u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.popcnt", make_v128_i8(128,128,128,128,127,127,127,127,64,64,64,64,255,255,255,255))->to_v128() == make_v128_i8(1u,1u,1u,1u,7u,7u,7u,7u,1u,1u,1u,1u,8u,8u,8u,8u));
   CHECK(bkend.call_with_return("env", "i8x16.min_s", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.min_s", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.min_u", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.min_u", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.max_s", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.max_s", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.max_u", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.max_u", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.avgr_u", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.avgr_u", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.abs", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.abs", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.abs", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.abs", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.popcnt", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.popcnt", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.popcnt", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.popcnt", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_i8x16_arith2_10_wasm>", "[simd_i8x16_arith2_10_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i8x16_arith2.10.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i8x16_arith2_11_wasm>", "[simd_i8x16_arith2_11_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i8x16_arith2.11.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i8x16_arith2_12_wasm>", "[simd_i8x16_arith2_12_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i8x16_arith2.12.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i8x16_arith2_13_wasm>", "[simd_i8x16_arith2_13_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i8x16_arith2.13.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i8x16_arith2_14_wasm>", "[simd_i8x16_arith2_14_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i8x16_arith2.14.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i8x16_arith2_15_wasm>", "[simd_i8x16_arith2_15_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i8x16_arith2.15.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i8x16_arith2_16_wasm>", "[simd_i8x16_arith2_16_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i8x16_arith2.16.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i8x16_arith2_17_wasm>", "[simd_i8x16_arith2_17_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i8x16_arith2.17.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i8x16_arith2_18_wasm>", "[simd_i8x16_arith2_18_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i8x16_arith2.18.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i8x16_arith2_19_wasm>", "[simd_i8x16_arith2_19_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i8x16_arith2.19.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i8x16_arith2_20_wasm>", "[simd_i8x16_arith2_20_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i8x16_arith2.20.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i8x16_arith2_21_wasm>", "[simd_i8x16_arith2_21_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i8x16_arith2.21.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i8x16_arith2_22_wasm>", "[simd_i8x16_arith2_22_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i8x16_arith2.22.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i8x16_arith2_23_wasm>", "[simd_i8x16_arith2_23_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i8x16_arith2.23.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i8x16_arith2_24_wasm>", "[simd_i8x16_arith2_24_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i8x16_arith2.24.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i8x16_arith2_25_wasm>", "[simd_i8x16_arith2_25_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i8x16_arith2.25.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i8x16_arith2_26_wasm>", "[simd_i8x16_arith2_26_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i8x16_arith2.26.wasm");
   backend_t bkend( code, &wa );

   CHECK(bkend.call_with_return("env", "i8x16.min_s-i8x16.avgr_u", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_i8(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.min_s-i8x16.max_u", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_i8(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.min_s-i8x16.max_s", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_i8(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.min_s-i8x16.min_u", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_i8(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.min_s-i8x16.min_s", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_i8(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.min_s-i8x16.abs", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255), make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.abs-i8x16.min_s", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.min_s-i8x16.popcnt", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255), make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.popcnt-i8x16.min_s", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u));
   CHECK(bkend.call_with_return("env", "i8x16.min_u-i8x16.avgr_u", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_i8(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.min_u-i8x16.max_u", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_i8(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.min_u-i8x16.max_s", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_i8(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.min_u-i8x16.min_u", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_i8(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.min_u-i8x16.min_s", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_i8(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.min_u-i8x16.abs", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255), make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.abs-i8x16.min_u", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.min_u-i8x16.popcnt", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255), make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.popcnt-i8x16.min_u", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.max_s-i8x16.avgr_u", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_i8(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2))->to_v128() == make_v128_i8(2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u));
   CHECK(bkend.call_with_return("env", "i8x16.max_s-i8x16.max_u", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_i8(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2))->to_v128() == make_v128_i8(2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u));
   CHECK(bkend.call_with_return("env", "i8x16.max_s-i8x16.max_s", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_i8(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2))->to_v128() == make_v128_i8(2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u));
   CHECK(bkend.call_with_return("env", "i8x16.max_s-i8x16.min_u", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_i8(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2))->to_v128() == make_v128_i8(2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u));
   CHECK(bkend.call_with_return("env", "i8x16.max_s-i8x16.min_s", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_i8(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2))->to_v128() == make_v128_i8(2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u));
   CHECK(bkend.call_with_return("env", "i8x16.max_s-i8x16.abs", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255), make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.abs-i8x16.max_s", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.max_s-i8x16.popcnt", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255), make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u));
   CHECK(bkend.call_with_return("env", "i8x16.popcnt-i8x16.max_s", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u));
   CHECK(bkend.call_with_return("env", "i8x16.max_u-i8x16.avgr_u", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_i8(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2))->to_v128() == make_v128_i8(2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u));
   CHECK(bkend.call_with_return("env", "i8x16.max_u-i8x16.max_u", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_i8(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2))->to_v128() == make_v128_i8(2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u));
   CHECK(bkend.call_with_return("env", "i8x16.max_u-i8x16.max_s", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_i8(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2))->to_v128() == make_v128_i8(2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u));
   CHECK(bkend.call_with_return("env", "i8x16.max_u-i8x16.min_u", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_i8(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2))->to_v128() == make_v128_i8(2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u));
   CHECK(bkend.call_with_return("env", "i8x16.max_u-i8x16.min_s", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_i8(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2))->to_v128() == make_v128_i8(2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u));
   CHECK(bkend.call_with_return("env", "i8x16.max_u-i8x16.abs", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255), make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.abs-i8x16.max_u", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.max_u-i8x16.popcnt", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255), make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u));
   CHECK(bkend.call_with_return("env", "i8x16.popcnt-i8x16.max_u", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u));
   CHECK(bkend.call_with_return("env", "i8x16.avgr_u-i8x16.avgr_u", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_i8(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2))->to_v128() == make_v128_i8(2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u));
   CHECK(bkend.call_with_return("env", "i8x16.avgr_u-i8x16.max_u", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_i8(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2))->to_v128() == make_v128_i8(2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u));
   CHECK(bkend.call_with_return("env", "i8x16.avgr_u-i8x16.max_s", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_i8(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2))->to_v128() == make_v128_i8(2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u,2u));
   CHECK(bkend.call_with_return("env", "i8x16.avgr_u-i8x16.min_u", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_i8(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.avgr_u-i8x16.min_s", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), make_v128_i8(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.avgr_u-i8x16.abs", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255), make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.abs-i8x16.avgr_u", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u,128u));
   CHECK(bkend.call_with_return("env", "i8x16.avgr_u-i8x16.popcnt", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255), make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))->to_v128() == make_v128_i8(4u,4u,4u,4u,4u,4u,4u,4u,4u,4u,4u,4u,4u,4u,4u,4u));
   CHECK(bkend.call_with_return("env", "i8x16.popcnt-i8x16.avgr_u", make_v128_i8(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.abs-i8x16.popcnt", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u,8u));
   CHECK(bkend.call_with_return("env", "i8x16.abs-i8x16.abs", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.popcnt-i8x16.popcnt", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
   CHECK(bkend.call_with_return("env", "i8x16.popcnt-i8x16.abs", make_v128_i8(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255))->to_v128() == make_v128_i8(1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u,1u));
}

BACKEND_TEST_CASE( "Testing wasm <simd_i8x16_arith2_7_wasm>", "[simd_i8x16_arith2_7_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i8x16_arith2.7.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i8x16_arith2_8_wasm>", "[simd_i8x16_arith2_8_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i8x16_arith2.8.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <simd_i8x16_arith2_9_wasm>", "[simd_i8x16_arith2_9_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "simd_i8x16_arith2.9.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

